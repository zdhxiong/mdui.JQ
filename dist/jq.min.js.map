{"version":3,"file":"jq.min.js","sources":["../node_modules/mdn-polyfills/CustomEvent.js","../node_modules/promise-polyfill/src/finally.js","../node_modules/mdn-polyfills/MouseEvent.js","../node_modules/promise-polyfill/src/index.js","../node_modules/promise-polyfill/src/polyfill.js","../src/utils.ts","../src/functions/each.ts","../src/functions/map.ts","../src/JQ.ts","../src/$.ts","../src/functions/extend.ts","../src/functions/param.ts","../src/functions/utils/ajax.ts","../src/methods/each.ts","../src/methods/trigger.ts","../src/methods/remove.ts","../src/methods/get.ts","../src/methods/append.ts","../src/functions/ajax.ts","../src/functions/contains.ts","../src/static/ajax.ts","../src/static/ajaxSetup.ts","../src/functions/ajaxSetup.ts","../src/static/contains.ts","../src/functions/utils/data.ts","../src/functions/data.ts","../src/functions/merge.ts","../src/functions/removeData.ts","../src/functions/unique.ts","../src/static/data.ts","../src/static/each.ts","../src/static/extend.ts","../src/static/map.ts","../src/static/merge.ts","../src/static/param.ts","../src/static/removeData.ts","../src/static/unique.ts","../src/methods/add.ts","../src/methods/addClass.ts","../src/methods/insertBefore.ts","../src/methods/after.ts","../src/methods/find.ts","../src/methods/utils/event.ts","../src/methods/utils/dir.ts","../src/methods/off.ts","../src/methods/on.ts","../src/methods/ajaxStart.ts","../src/methods/appendTo.ts","../src/methods/attr.ts","../src/methods/before.ts","../src/methods/is.ts","../src/methods/children.ts","../src/methods/map.ts","../src/methods/clone.ts","../src/methods/parent.ts","../src/methods/slice.ts","../src/methods/eq.ts","../src/methods/closest.ts","../src/methods/data.ts","../src/methods/empty.ts","../src/methods/extend.ts","../src/methods/index.ts","../src/methods/filter.ts","../src/methods/first.ts","../src/methods/has.ts","../src/methods/hasClass.ts","../src/methods/width.ts","../src/methods/hide.ts","../src/methods/val.ts","../src/methods/innerWidth.ts","../src/methods/last.ts","../src/methods/next.ts","../src/methods/not.ts","../src/methods/offset.ts","../src/methods/offsetParent.ts","../src/methods/one.ts","../src/methods/position.ts","../src/methods/prependTo.ts","../src/methods/prev.ts","../src/methods/removeAttr.ts","../src/methods/removeData.ts","../src/methods/removeProp.ts","../src/methods/replaceWith.ts","../src/methods/replaceAll.ts","../src/methods/serializeArray.ts","../src/methods/serialize.ts","../src/methods/show.ts","../src/methods/siblings.ts","../src/methods/toggle.ts"],"sourcesContent":["!function(){function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent(\"CustomEvent\");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}\"function\"!=typeof window.CustomEvent&&(t.prototype=window.Event.prototype,window.CustomEvent=t)}();\n","/**\n * @this {Promise}\n */\nfunction finallyConstructor(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      // @ts-ignore\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      // @ts-ignore\n      return constructor.resolve(callback()).then(function() {\n        // @ts-ignore\n        return constructor.reject(reason);\n      });\n    }\n  );\n}\n\nexport default finallyConstructor;\n","!function(){try{return new MouseEvent(\"test\")}catch(e){}var e=function(e,t){t=t||{bubbles:!1,cancelable:!1};var n=document.createEvent(\"MouseEvent\");return n.initMouseEvent(e,t.bubbles,t.cancelable,window,0,t.screenX||0,t.screenY||0,t.clientX||0,t.clientY||0,t.ctrlKey||!1,t.altKey||!1,t.shiftKey||!1,t.metaKey||!1,t.button||0,t.relatedTarget||null),n};e.prototype=Event.prototype,window.MouseEvent=e}();\n","import promiseFinally from './finally';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction isArray(x) {\n  return Boolean(x && typeof x.length !== 'undefined');\n}\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\n/**\n * @constructor\n * @param {Function} fn\n */\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  /** @type {!number} */\n  this._state = 0;\n  /** @type {!boolean} */\n  this._handled = false;\n  /** @type {Promise|undefined} */\n  this._value = undefined;\n  /** @type {!Array<!Function>} */\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\n/**\n * @constructor\n */\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  // @ts-ignore\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = promiseFinally;\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!isArray(arr)) {\n      return reject(new TypeError('Promise.all accepts an array'));\n    }\n\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!isArray(arr)) {\n      return reject(new TypeError('Promise.race accepts an array'));\n    }\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      Promise.resolve(arr[i]).then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  // @ts-ignore\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      // @ts-ignore\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nexport default Promise;\n","import Promise from './index';\nimport promiseFinally from './finally';\n\n/** @suppress {undefinedVars} */\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!('Promise' in globalNS)) {\n  globalNS['Promise'] = Promise;\n} else if (!globalNS.Promise.prototype['finally']) {\n  globalNS.Promise.prototype['finally'] = promiseFinally;\n}\n","function isNodeName(element: HTMLElement, name: string): boolean {\n  return element.nodeName.toLowerCase() === name.toLowerCase();\n}\n\nfunction isArrayLike(target: any): target is ArrayLike<any> {\n  return typeof target.length === 'number';\n}\n\nfunction isObjectLike(target: any): target is Record<string, any> {\n  return typeof target === 'object' && target !== null;\n}\n\nfunction isFunction(target: any): target is Function {\n  return typeof target === 'function';\n}\n\nfunction isString(target: any): target is string {\n  return typeof target === 'string';\n}\n\nfunction isUndefined(target: any): target is undefined {\n  return typeof target === 'undefined';\n}\n\nfunction isNull(target: any): target is null {\n  return target === null;\n}\n\nfunction isWindow(target: any): target is Window {\n  return target instanceof Window;\n}\n\nfunction isDocument(target: any): target is HTMLDocument {\n  return target instanceof HTMLDocument;\n}\n\nfunction isElement(target: any): target is HTMLElement {\n  return target instanceof HTMLElement;\n}\n\nexport {\n  isNodeName,\n  isArrayLike,\n  isObjectLike,\n  isFunction,\n  isString,\n  isUndefined,\n  isNull,\n  isWindow,\n  isDocument,\n  isElement,\n};\n","import { isArrayLike } from '../utils';\nimport PlainObject from '../interfaces/PlainObject';\n\n/**\n * 遍历数组，原样返回第一个参数。回调函数返回 false 时，停止遍历\n * @param array 需要遍历的数组\n * @param callback 为数组中每个元素执行的回调函数\n * @example\n```js\neach( [ \"a\", \"b\", \"c\" ], function( index, value ){\n  alert( \"Index #\" + index + \": \" + value );\n});\n```\n */\nfunction each<T>(\n  array: ArrayLike<T>,\n  callback: (this: T, index: number, value: T) => any | false,\n): ArrayLike<T>;\n\n/**\n * 遍历对象，原样返回第一个参数。回调函数返回 false 时，停止遍历\n * @param obj 需要遍历的对象\n * @param callback 为对象中每个元素执行的回调函数\n * @example\n```js\neach({ name: \"John\", lang: \"JS\" }, function( key, value ) {\n  alert( \"Key: \" + key + \", Value: \" + value );\n});\n```\n */\nfunction each<T extends PlainObject, K extends keyof T>(\n  obj: T,\n  callback: (this: T[K], key: K, value: T[K]) => any | false,\n): T;\n\nfunction each(target: ArrayLike<any> | PlainObject, callback: Function): any {\n  if (isArrayLike(target)) {\n    for (let i = 0; i < target.length; i += 1) {\n      if (callback.call(target[i], i, target[i]) === false) {\n        return target;\n      }\n    }\n  } else {\n    const keys = Object.keys(target);\n    for (let i = 0; i < keys.length; i += 1) {\n      if (callback.call(target[keys[i]], keys[i], target[keys[i]]) === false) {\n        return target;\n      }\n    }\n  }\n\n  return target;\n}\n\nexport default each;\n","import each from './each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { isNull, isUndefined } from '../utils';\n\n/**\n * 遍历数组，通过函数返回值生成一个新数组，null 和 undefined 将被过滤掉。\n * @param array 被遍历的数组\n * @param callback 处理每个元素的回调函数。\n *                 第一个参数是数组值，第二个参数是数组索引。\n *                 函数可以返回任何值，若返回数组，则会被展开；若返回 null 或 undefined，则不会被放入新生成的数组中。\n *                 函数内部的 this 指向 window 对象。\n * @example ````数组的每个元素都 +4\n```js\nmap( [ 0, 1, 2 ], function( value ) {\n  return value + 4;\n});\n// [ 4, 5, 6 ]\n```\n * @example ````移除小于 2 的值\n```js\nmap([ 0, 1, 2, 3 ], function ( value ) {\n  return value >= 2 ? value : null;\n});\n// [ 2, 3 ]\n```\n * @example ````返回数组时，展开\n```js\nmap( [ 1, 2, 3 ], function( value, index ) {\n    return [ index, value ];\n});\n// [ 0, 1, 1, 2, 2, 3 ]\n```\n */\nfunction map<T, TReturn>(\n  array: ArrayLike<T>,\n  callback: (\n    this: Window,\n    value: T,\n    index: number,\n  ) => TReturn | TReturn[] | null | undefined,\n): TReturn[];\n\n/**\n * 循环对象，通过函数返回值生成一个新数组，null 和 undefined 将被过滤掉。\n * @param obj 被遍历的对象\n * @param callback 处理每个元素的回调函数。\n *                 第一个参数为对象值，第二个参数为对象键。\n *                 函数可以返回任何值，若返回数组，则会被展开；若返回 null 或 undefined，则不会被放入新生成的数组中。\n *                 函数内部的 this 指向 window 对象。\n * @example ````值 +2\n```js\nmap( { width: 1, height: 2 }, function( value, key ) {\n  return value + 2;\n});\n// [ 3, 4 ]\n```\n * @example ````获取键名组成的数组\n```js\nmap( { width: 1, height: 2 }, function( value, key ) {\n  return key;\n});\n// [ 'width', 'height' ]\n```\n */\nfunction map<T extends PlainObject, K extends keyof T, TReturn>(\n  obj: T,\n  callback: (\n    this: Window,\n    value: T[K],\n    key: K,\n  ) => TReturn | TReturn[] | null | undefined,\n): TReturn[];\n\nfunction map(elements: any, callback: Function): any {\n  let value;\n  const ret: any[] = [];\n\n  each(elements, (i, element) => {\n    value = callback.call(window, element, i);\n\n    if (!isNull(value) && !isUndefined(value)) {\n      ret.push(value);\n    }\n  });\n\n  return [].concat(...ret);\n}\n\nexport default map;\n","import JQElement from './types/JQElement';\nimport { isDocument, isElement, isWindow } from './utils';\nimport each from './functions/each';\nimport map from './functions/map';\n\n/**\n * 为了使用模块扩充，这里不能使用默认导出\n */\nexport class JQ<T = JQElement> implements ArrayLike<T> {\n  length = 0;\n  [index: number]: T;\n\n  constructor(arr?: ArrayLike<Node | Window | null | undefined>) {\n    if (!arr) {\n      return this;\n    }\n\n    // 仅保留 HTMLElement、HTMLDocument 和 Window 元素\n    const elements = map(arr, element => {\n      if (isWindow(element) || isDocument(element) || isElement(element)) {\n        return element;\n      }\n\n      return null;\n    });\n\n    each(elements, (i, element) => {\n      // @ts-ignore\n      this[i] = element;\n    });\n\n    this.length = elements.length;\n\n    return this;\n  }\n}\n","import JQSelector from './types/JQSelector';\nimport { JQStatic } from './interfaces/JQStatic';\nimport { isFunction, isWindow, isString, isArrayLike } from './utils';\nimport { JQ } from './JQ';\nimport each from './functions/each';\n\nfunction get$(): JQStatic {\n  const $ = function(selector?: JQSelector | Function) {\n    if (!selector) {\n      return new JQ();\n    }\n\n    // JQ\n    if (selector instanceof JQ) {\n      return selector;\n    }\n\n    // function\n    if (isFunction(selector)) {\n      if (\n        /complete|loaded|interactive/.test(document.readyState) &&\n        document.body\n      ) {\n        selector.call(document, $);\n      } else {\n        document.addEventListener(\n          'DOMContentLoaded',\n          () => {\n            selector.call(document, $);\n          },\n          false,\n        );\n      }\n\n      return new JQ([document]);\n    }\n\n    // Node\n    if (selector instanceof Node || isWindow(selector)) {\n      return new JQ([selector]);\n    }\n\n    // String\n    if (isString(selector)) {\n      const html = selector.trim();\n\n      // 根据 HTML 字符串创建 JQ 对象\n      if (html[0] === '<' && html[html.length - 1] === '>') {\n        let toCreate = 'div';\n\n        const tags = {\n          li: 'ul',\n          tr: 'tbody',\n          td: 'tr',\n          th: 'tr',\n          tbody: 'table',\n          option: 'select',\n        };\n\n        each(tags, (childTag, parentTag) => {\n          if (html.indexOf(`<${childTag}`) === 0) {\n            toCreate = parentTag;\n            return false;\n          }\n\n          return;\n        });\n\n        const tempParent = document.createElement(toCreate);\n        tempParent.innerHTML = html;\n\n        return new JQ(tempParent.childNodes);\n      }\n\n      // 根据 CSS 选择器创建 JQ 对象\n      const elements =\n        selector[0] === '#' && !selector.match(/[ .<>:~]/)\n          ? [document.getElementById(selector.slice(1))]\n          : document.querySelectorAll(selector);\n\n      if (elements) {\n        return new JQ(elements);\n      }\n    }\n\n    // NodeList, Array\n    else if (isArrayLike(selector)) {\n      return new JQ(selector);\n    }\n\n    return new JQ();\n  } as JQStatic;\n\n  $.fn = JQ.prototype;\n\n  return $;\n}\n\nconst $ = get$();\n\nexport default $;\n","import each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { isUndefined } from '../utils';\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @param object4 该对象的属性将合并到第一个参数\n * @param object5 该对象的属性将合并到第一个参数\n * @param object6 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n  { key6: value6 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n  key6: value6,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject,\n  X extends PlainObject,\n  Y extends PlainObject,\n  Z extends PlainObject\n>(\n  target: T,\n  object1: U,\n  object2: V,\n  object3: W,\n  object4: X,\n  object5: Y,\n  object6: Z,\n): T & U & V & W & X & Y & Z;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @param object4 该对象的属性将合并到第一个参数\n * @param object5 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject,\n  X extends PlainObject,\n  Y extends PlainObject\n>(\n  target: T,\n  object1: U,\n  object2: V,\n  object3: W,\n  object4: X,\n  object5: Y,\n): T & U & V & W & X & Y;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @param object4 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject,\n  X extends PlainObject\n>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject\n>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject\n>(target: T, object1: U, object2: V): T & U & V;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n}\n```\n */\nfunction extend<T extends PlainObject, U extends PlainObject>(\n  target: T,\n  object1: U,\n): T & U;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param objectN 额外的对象，这些对象的属性将合并到第一个对象\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n */\nfunction extend(\n  target: PlainObject,\n  object1: PlainObject,\n  ...objectN: PlainObject[]\n): PlainObject;\n\nfunction extend(\n  target: PlainObject,\n  object1: PlainObject,\n  ...objectN: PlainObject[]\n): PlainObject {\n  objectN.unshift(object1);\n\n  each(objectN, (_, object) => {\n    each(object, (prop, value) => {\n      if (!isUndefined(value)) {\n        target[prop] = value;\n      }\n    });\n  });\n\n  return target;\n}\n\nexport default extend;\n","import { isObjectLike, isNull, isUndefined } from '../utils';\nimport each from './each';\nimport PlainObject from '../interfaces/PlainObject';\n\n/**\n * 将对象序列化，序列化后的字符串可作为 URL 查询字符串使用\n * @param obj 对象\n * @example\n```js\nparam( { width:1680, height:1050 } );\n// width=1680&height=1050\n```\n```js\nparam( { foo: { one: 1,two: 2 } } )\n// foo[one]=1&foo[two]=2\n```\n```js\nparam( { ids: [1, 2, 3] } )\n// ids[]=1&ids[]=2&ids[]=3\n```\n */\nfunction param(obj: PlainObject): string {\n  if (!isObjectLike(obj)) {\n    return '';\n  }\n\n  const args: any[] = [];\n\n  function destructure(key: any, value: any): void {\n    let keyTmp;\n\n    if (isObjectLike(value)) {\n      each(value, (i, v) => {\n        if (Array.isArray(value) && !isObjectLike(v)) {\n          keyTmp = '';\n        } else {\n          keyTmp = i;\n        }\n\n        destructure(`${key}[${keyTmp}]`, v);\n      });\n    } else {\n      if (isNull(value) || isUndefined(value) || value === '') {\n        keyTmp = '=';\n      } else {\n        keyTmp = `=${encodeURIComponent(value)}`;\n      }\n\n      args.push(encodeURIComponent(key) + keyTmp);\n    }\n  }\n\n  each(obj, destructure);\n\n  return args.join('&');\n}\n\nexport default param;\n","import AjaxOptions from '../../interfaces/AjaxOptions';\nimport { EventName } from '../../types/JQAjax';\n\n// 全局配置参数\nconst globalOptions: AjaxOptions = {};\n\n// 全局事件名\nconst ajaxEvents: {\n  [name: string]: EventName;\n} = {\n  ajaxStart: 'start.mdui.ajax',\n  ajaxSuccess: 'success.mdui.ajax',\n  ajaxError: 'error.mdui.ajax',\n  ajaxComplete: 'complete.mdui.ajax',\n};\n\nexport { globalOptions, ajaxEvents };\n","import $ from '../$';\nimport each from '../functions/each';\nimport JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 遍历 JQ 对象，为每个元素执行一个函数。如果函数返回 false，则结束遍历。\n     * 函数的第一个参数为元素的索引号，第二个参数为当前元素。函数的 this 关键字指向当前元素\n     * @param callback\n     * @example\n```js\n$('img').each(function (index, element) {\n  this.src = 'test' + index + '.jpg';\n});\n```\n     */\n    each(callback: (this: T, index: number, element: T) => any): this;\n  }\n}\n\n$.fn.each = function(this: JQ, callback: any): JQ {\n  return each(this, callback) as JQ;\n};\n","import $ from '../$';\nimport './each';\nimport JQElement from '../types/JQElement';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 触发指定的事件\n     * @param eventName 事件名\n     * @param extraParameters 传给事件处理函数的额外参数\n     * @example ````触发 .box 元素上的 click 事件\n```js\n$('.box').trigger('click');\n```\n     * @example ````触发 .box 元素上的 click 事件，并给事件处理函数传入额外参数\n```js\n$('.box').trigger('click', {key1: 'value1', key2: 'value2'});\n```\n     */\n    trigger(\n      eventName: string,\n      extraParameters?: any[] | PlainObject | string | number | boolean,\n    ): this;\n  }\n}\n\n$.fn.trigger = function(\n  this: JQ,\n  eventName: string,\n  extraParameters: any = {},\n): JQ {\n  type EventParams = {\n    detail?: any;\n    bubbles: boolean;\n    cancelable: boolean;\n  };\n\n  let event: MouseEvent | CustomEvent;\n  const eventParams: EventParams = {\n    bubbles: true,\n    cancelable: true,\n  };\n  const isMouseEvent =\n    ['click', 'mousedown', 'mouseup', 'mousemove'].indexOf(eventName) > -1;\n\n  if (isMouseEvent) {\n    // Note: MouseEvent 无法传入 detail 参数\n    event = new MouseEvent(eventName, eventParams);\n  } else {\n    eventParams.detail = extraParameters;\n    event = new CustomEvent(eventName, eventParams);\n  }\n\n  // @ts-ignore\n  event._detail = extraParameters;\n\n  return this.each(function() {\n    this.dispatchEvent(event);\n  });\n};\n","import JQElement from '../types/JQElement';\nimport { isElement } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 从 DOM 中移除选中的元素\n     * @example ````移除 DOM 中所有 p 元素\n```js\n$('p').remove()\n```\n     */\n    remove(): this;\n  }\n}\n\n$.fn.remove = function(this: JQ): JQ {\n  return this.each((_, element) => {\n    if (isElement(element) && element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  });\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 获取指定索引位置的 Dom 元素\n     * @param index 索引号\n     * @example ````获取第 3 个 p 元素\n```js\n$('p').get(2)\n```\n     * @example ````获取最后一个 p 元素\n```js\n$('p').get(-1)\n```\n     */\n    get(index: number): T;\n\n    /**\n     * 获取 Dom 元素组成的数组\n     * @example ````获取所有 p 元素组成的数组\n````js\n$('p').get()\n````\n     */\n    get(): T[];\n  }\n}\n\n$.fn.get = function(this: JQ, index?: number): JQElement | JQElement[] {\n  return index === undefined\n    ? [].slice.call(this)\n    : this[index >= 0 ? index : index + this.length];\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { isElement, isString } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport './get';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 在当前元素内部的后面插入指定内容\n     * @param contents 可以是字符串、HTML、JQ 对象、DOM 元素、DOM 元素数组、NodeList 等\n     * @example\n```js\n$('<p>I would like to say: </p>').append('<b>Hello</b>');\n// [ <p>I would like to say: <b>Hello</b></p> ]\n```\n     */\n    append(contents: JQSelector): this;\n  }\n}\n\neach(['append', 'prepend'], (nameIndex, name) => {\n  $.fn[name] = function(this: JQ, newChild: JQSelector): JQ {\n    let newChilds: any[];\n    const copyByClone = this.length > 1;\n\n    if (\n      isString(newChild) &&\n      (newChild[0] !== '<' || newChild[newChild.length - 1] !== '>')\n    ) {\n      const tempDiv = document.createElement('div');\n      tempDiv.innerHTML = newChild;\n      newChilds = [].slice.call(tempDiv.childNodes);\n    } else {\n      newChilds = $(newChild).get();\n    }\n\n    if (nameIndex === 1) {\n      // prepend\n      newChilds.reverse();\n    }\n\n    return this.each((i, element) => {\n      if (!isElement(element)) {\n        return;\n      }\n\n      each(newChilds, (_, child) => {\n        // 一个元素要同时追加到多个元素中，需要先复制一份，然后追加\n        if (copyByClone && i > 0) {\n          child = child.cloneNode(true);\n        }\n\n        if (nameIndex === 0) {\n          // append\n          element.appendChild(child);\n        } else {\n          // prepend\n          element.insertBefore(child, element.childNodes[0]);\n        }\n      });\n    });\n  };\n});\n","import $ from '../$';\nimport AjaxOptions from '../interfaces/AjaxOptions';\nimport each from './each';\nimport extend from './extend';\nimport param from './param';\nimport { isFunction, isString, isUndefined } from '../utils';\nimport { ajaxEvents, globalOptions } from './utils/ajax';\nimport '../methods/trigger';\nimport '../methods/remove';\nimport '../methods/append';\nimport {\n  CallbackName,\n  ErrorCallback,\n  ErrorTextStatus,\n  EventName,\n  StatusCodeCallbacks,\n  SuccessCallback,\n  SuccessTextStatus,\n} from '../types/JQAjax';\n\ninterface EventParams {\n  data?: string;\n  xhr?: XMLHttpRequest;\n  options?: AjaxOptions;\n}\n\nlet jsonpID = 0;\n\n/**\n * 判断此请求方法是否通过查询字符串提交参数\n * @param method 请求方法，大写\n */\nfunction isQueryStringData(method: string): boolean {\n  return ['GET', 'HEAD'].indexOf(method) >= 0;\n}\n\n/**\n * 添加参数到 URL 上，且 URL 中不存在 ? 时，自动把第一个 & 替换为 ?\n * @param url\n * @param query\n */\nfunction appendQuery(url: string, query: string): string {\n  return `${url}&${query}`.replace(/[&?]{1,2}/, '?');\n}\n\n/**\n * 获取 jsonp 请求的回调函数名称\n */\nfunction defaultJsonpCallback(): string {\n  jsonpID += 1;\n\n  return `mduijsonp_${Date.now()}_${jsonpID}`;\n}\n\n/**\n * 合并请求参数，参数优先级：options > globalOptions > defaults\n * @param options\n */\nfunction mergeOptions(options: AjaxOptions): AjaxOptions {\n  // 默认参数\n  const defaults: AjaxOptions = {\n    url: '',\n    method: 'GET',\n    data: '',\n    processData: true,\n    async: true,\n    cache: true,\n    username: '',\n    password: '',\n    headers: {},\n    xhrFields: {},\n    statusCode: {},\n    dataType: 'text',\n    jsonp: 'callback',\n    jsonpCallback: defaultJsonpCallback,\n    contentType: 'application/x-www-form-urlencoded',\n    timeout: 0,\n    global: true,\n  };\n\n  // globalOptions 中的回调函数不合并\n  each(globalOptions, (key, value) => {\n    const callbacks: (CallbackName | 'statusCode')[] = [\n      'beforeSend',\n      'success',\n      'error',\n      'complete',\n      'statusCode',\n    ];\n\n    // @ts-ignore\n    if (callbacks.indexOf(key) < 0 && !isUndefined(value)) {\n      defaults[key] = value;\n    }\n  });\n\n  return extend({}, defaults, options);\n}\n\n/**\n * 发送 ajax 请求\n * @param options\n * @example\n```js\najax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n}).then(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n```\n */\nfunction ajax(options: AjaxOptions): Promise<any> {\n  // 是否已取消请求\n  let isCanceled = false;\n\n  // 事件参数\n  const eventParams: EventParams = {};\n\n  // 参数合并\n  const mergedOptions = mergeOptions(options);\n\n  let url = mergedOptions.url! || window.location.toString();\n  const method = mergedOptions.method!.toUpperCase();\n  let data = mergedOptions.data!;\n  const processData = mergedOptions.processData!;\n  const async = mergedOptions.async!;\n  const cache = mergedOptions.cache!;\n  const username = mergedOptions.username!;\n  const password = mergedOptions.password!;\n  const headers = mergedOptions.headers!;\n  const xhrFields = mergedOptions.xhrFields!;\n  const statusCode = mergedOptions.statusCode!;\n  const dataType = mergedOptions.dataType!;\n  const jsonp = mergedOptions.jsonp!;\n  const jsonpCallback = mergedOptions.jsonpCallback!;\n  const contentType = mergedOptions.contentType!;\n  const timeout = mergedOptions.timeout!;\n  const global = mergedOptions.global!;\n\n  // 需要发送的数据\n  // GET/HEAD 请求和 processData 为 true 时，转换为查询字符串格式，特殊格式不转换\n  if (\n    data &&\n    (isQueryStringData(method) || processData) &&\n    !isString(data) &&\n    !(data instanceof ArrayBuffer) &&\n    !(data instanceof Blob) &&\n    !(data instanceof Document) &&\n    !(data instanceof FormData)\n  ) {\n    data = param(data);\n  }\n\n  // 对于 GET、HEAD 类型的请求，把 data 数据添加到 URL 中\n  if (isQueryStringData(method) && data) {\n    // 查询字符串拼接到 URL 中\n    url = appendQuery(url, data);\n    data = null;\n  }\n\n  /**\n   * 触发全局事件\n   * @param event 事件名\n   * @param params 事件参数\n   */\n  function triggerEvent(event: EventName, params: EventParams): void {\n    if (global) {\n      $(document).trigger(event, params);\n    }\n  }\n\n  /**\n   * 触发 XHR 回调和事件\n   * @param callback 回调函数名称\n   * @param args\n   */\n  function triggerCallback(callback: CallbackName, ...args: any[]): void {\n    let result1;\n    let result2;\n\n    if (callback) {\n      // 全局回调\n      if (callback in globalOptions) {\n        // @ts-ignore\n        result1 = globalOptions[callback](...args);\n      }\n\n      // 自定义回调\n      if (mergedOptions[callback]) {\n        // @ts-ignore\n        result2 = mergedOptions[callback](...args);\n      }\n\n      // beforeSend 回调返回 false 时取消 ajax 请求\n      if (\n        callback === 'beforeSend' &&\n        (result1 === false || result2 === false)\n      ) {\n        isCanceled = true;\n      }\n    }\n  }\n\n  // JSONP 请求\n  function JSONP(): Promise<any> {\n    let textStatus: SuccessTextStatus | ErrorTextStatus;\n\n    return new Promise((resolve, reject): void => {\n      // URL 中添加自动生成的回调函数名\n      const callbackName = isFunction(jsonpCallback)\n        ? jsonpCallback()\n        : jsonpCallback;\n\n      const requestUrl = appendQuery(url, `${jsonp}=${callbackName}`);\n\n      eventParams.options = mergedOptions;\n\n      triggerEvent(ajaxEvents.ajaxStart, eventParams);\n      triggerCallback('beforeSend', null);\n\n      if (isCanceled) {\n        reject(new Error('cancel'));\n\n        return;\n      }\n\n      let abortTimeout: any;\n\n      // 创建 script\n      let script: HTMLScriptElement | null = document.createElement('script');\n      script.type = 'text/javascript';\n\n      // 创建 script 失败\n      script.onerror = function(): void {\n        if (abortTimeout) {\n          clearTimeout(abortTimeout);\n        }\n\n        textStatus = 'error';\n\n        triggerEvent(ajaxEvents.ajaxError, eventParams);\n        triggerCallback('error', null, textStatus);\n\n        triggerEvent(ajaxEvents.ajaxComplete, eventParams);\n        triggerCallback('complete', null, textStatus);\n\n        reject(new Error(textStatus));\n      };\n\n      script.src = requestUrl;\n\n      // 处理\n      // @ts-ignore\n      window[callbackName] = function(data: string): void {\n        if (abortTimeout) {\n          clearTimeout(abortTimeout);\n        }\n\n        textStatus = 'success';\n        eventParams.data = data;\n\n        triggerEvent(ajaxEvents.ajaxSuccess, eventParams);\n        triggerCallback('success', data, textStatus, null);\n\n        $(script).remove();\n        script = null;\n        delete window[callbackName];\n\n        resolve(data);\n      };\n\n      $('head').append(script);\n\n      if (timeout > 0) {\n        abortTimeout = setTimeout(() => {\n          $(script).remove();\n          script = null;\n\n          textStatus = 'timeout';\n\n          triggerEvent(ajaxEvents.ajaxError, eventParams);\n          triggerCallback('error', null, textStatus);\n\n          reject(new Error(textStatus));\n        }, timeout);\n      }\n\n      return;\n    });\n  }\n\n  // XMLHttpRequest 请求\n  function XHR(): Promise<any> {\n    let textStatus: SuccessTextStatus | ErrorTextStatus;\n\n    return new Promise((resolve, reject): void => {\n      // GET/HEAD 请求的缓存处理\n      if (isQueryStringData(method) && !cache) {\n        url = appendQuery(url, `_=${Date.now()}`);\n      }\n\n      // 创建 XHR\n      const xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, async, username, password);\n\n      if (\n        contentType ||\n        (data && !isQueryStringData(method) && contentType !== false)\n      ) {\n        xhr.setRequestHeader('Content-Type', contentType);\n      }\n\n      // 设置 Accept\n      if (dataType === 'json') {\n        xhr.setRequestHeader('Accept', 'application/json, text/javascript');\n      }\n\n      // 添加 headers\n      if (headers) {\n        each(headers, (key: string, value) => {\n          // undefined 值不发送，string 和 null 需要发送\n          if (!isUndefined(value)) {\n            xhr.setRequestHeader(key, value + ''); // 把 null 转换成字符串\n          }\n        });\n      }\n\n      // 检查是否是跨域请求，跨域请求时不添加 X-Requested-With\n      const crossDomain =\n        /^([\\w-]+:)?\\/\\/([^/]+)/.test(url) &&\n        RegExp.$2 !== window.location.host;\n\n      if (!crossDomain) {\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      }\n\n      if (xhrFields) {\n        each(xhrFields, (key, value) => {\n          // @ts-ignore\n          xhr[key] = value;\n        });\n      }\n\n      eventParams.xhr = xhr;\n      eventParams.options = mergedOptions;\n\n      let xhrTimeout: any;\n\n      xhr.onload = function(): void {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        // AJAX 返回的 HTTP 响应码是否表示成功\n        const isHttpStatusSuccess =\n          (xhr.status >= 200 && xhr.status < 300) ||\n          xhr.status === 304 ||\n          xhr.status === 0;\n\n        let responseData: any;\n\n        if (isHttpStatusSuccess) {\n          if (xhr.status === 204 || method === 'HEAD') {\n            textStatus = 'nocontent';\n          } else if (xhr.status === 304) {\n            textStatus = 'notmodified';\n          } else {\n            textStatus = 'success';\n          }\n\n          if (dataType === 'json') {\n            try {\n              responseData = JSON.parse(xhr.responseText);\n              eventParams.data = responseData;\n            } catch (err) {\n              textStatus = 'parsererror';\n\n              triggerEvent(ajaxEvents.ajaxError, eventParams);\n              triggerCallback('error', xhr, textStatus);\n\n              reject(new Error(textStatus));\n            }\n\n            if (textStatus !== 'parsererror') {\n              triggerEvent(ajaxEvents.ajaxSuccess, eventParams);\n              triggerCallback('success', responseData, textStatus, xhr);\n\n              resolve(responseData);\n            }\n          } else {\n            responseData =\n              xhr.responseType === 'text' || xhr.responseType === ''\n                ? xhr.responseText\n                : xhr.response;\n            eventParams.data = responseData;\n\n            triggerEvent(ajaxEvents.ajaxSuccess, eventParams);\n            triggerCallback('success', responseData, textStatus, xhr);\n\n            resolve(responseData);\n          }\n        } else {\n          textStatus = 'error';\n\n          triggerEvent(ajaxEvents.ajaxError, eventParams);\n          triggerCallback('error', xhr, textStatus);\n\n          reject(new Error(textStatus));\n        }\n\n        // statusCode\n        each(\n          [globalOptions.statusCode!, statusCode],\n          (_, func: StatusCodeCallbacks) => {\n            if (func && func[xhr.status]) {\n              if (isHttpStatusSuccess) {\n                (func[xhr.status] as SuccessCallback)(\n                  responseData,\n                  textStatus as SuccessTextStatus,\n                  xhr,\n                );\n              } else {\n                (func[xhr.status] as ErrorCallback)(\n                  xhr,\n                  textStatus as ErrorTextStatus,\n                );\n              }\n            }\n          },\n        );\n\n        triggerEvent(ajaxEvents.ajaxComplete, eventParams);\n        triggerCallback('complete', xhr, textStatus);\n      };\n\n      xhr.onerror = function(): void {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        triggerEvent(ajaxEvents.ajaxError, eventParams);\n        triggerCallback('error', xhr, xhr.statusText);\n\n        triggerEvent(ajaxEvents.ajaxComplete, eventParams);\n        triggerCallback('complete', xhr, 'error');\n\n        reject(new Error(xhr.statusText));\n      };\n\n      xhr.onabort = function(): void {\n        let statusText: ErrorTextStatus = 'abort';\n\n        if (xhrTimeout) {\n          statusText = 'timeout';\n          clearTimeout(xhrTimeout);\n        }\n\n        triggerEvent(ajaxEvents.ajaxError, eventParams);\n        triggerCallback('error', xhr, statusText);\n\n        triggerEvent(ajaxEvents.ajaxComplete, eventParams);\n        triggerCallback('complete', xhr, statusText);\n\n        reject(new Error(statusText));\n      };\n\n      // ajax start 回调\n      triggerEvent(ajaxEvents.ajaxStart, eventParams);\n      triggerCallback('beforeSend', xhr);\n\n      if (isCanceled) {\n        reject(new Error('cancel'));\n\n        return;\n      }\n\n      // Timeout\n      if (timeout > 0) {\n        xhrTimeout = setTimeout(() => {\n          xhr.abort();\n        }, timeout);\n      }\n\n      // 发送 XHR\n      xhr.send(data);\n    });\n  }\n\n  return dataType === 'jsonp' ? JSONP() : XHR();\n}\n\nexport default ajax;\n","/**\n * 检查 parent 元素内是否包含 child 元素\n * @param parent 父元素\n * @param child 子元素\n * @example\n```js\ncontains( document.documentElement, document.body ); // true\ncontains( document.body, document.documentElement ); // false\n```\n */\nimport { isUndefined } from '../utils';\n\nfunction contains(\n  parent: HTMLElement | HTMLDocument,\n  child: HTMLElement | HTMLDocument,\n): boolean;\n\n/**\n * 检查当前页面中是否包含指定元素\n * @param child 被检查的子元素\n * @example\n```js\ncontains( document.body ); // true\ncontains( document.documentElement ); // false\n```\n */\nfunction contains(child: HTMLElement | HTMLDocument): boolean;\n\nfunction contains(\n  parent: HTMLElement | HTMLDocument,\n  child?: HTMLElement | HTMLDocument,\n): boolean {\n  if (isUndefined(child)) {\n    child = parent;\n    parent = document.documentElement;\n  }\n\n  return parent !== child && parent.contains(child);\n}\n\nexport default contains;\n","import $ from '../$';\nimport ajax from '../functions/ajax';\nimport AjaxOptions from '../interfaces/AjaxOptions';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 发送 ajax 请求\n     * @param options\n     * @example\n```js\najax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n}).then(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n```\n     */\n    ajax(options: AjaxOptions): Promise<any>;\n  }\n}\n\n$.ajax = ajax;\n","import $ from '../$';\nimport ajaxSetup from '../functions/ajaxSetup';\nimport AjaxOptions from '../interfaces/AjaxOptions';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 为 Ajax 请求设置全局配置参数\n     * @param options 键值对参数\n     * @example\n```js\n$.ajaxSetup({\n  dataType: 'json',\n  method: 'POST',\n});\n```\n     */\n    ajaxSetup(options: AjaxOptions): AjaxOptions;\n  }\n}\n\n$.ajaxSetup = ajaxSetup;\n","import AjaxOptions from '../interfaces/AjaxOptions';\nimport extend from '../functions/extend';\nimport { globalOptions } from './utils/ajax';\n\n/**\n * 为 Ajax 请求设置全局配置参数\n * @param options 键值对参数\n * @example\n```js\najaxSetup({\n  dataType: 'json',\n  method: 'POST',\n});\n```\n */\nfunction ajaxSetup(options: AjaxOptions): AjaxOptions {\n  return extend(globalOptions, options);\n}\n\nexport default ajaxSetup;\n","import $ from '../$';\nimport contains from '../functions/contains';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 检查 parent 元素内是否包含 child 元素\n     * @param parent 父元素\n     * @param child 子元素\n     * @example\n```js\n$.contains( document.documentElement, document.body ); // true\n$.contains( document.body, document.documentElement ); // false\n```\n     */\n    contains(\n      parent: HTMLElement | HTMLDocument,\n      child: HTMLElement | HTMLDocument,\n    ): boolean;\n\n    /**\n     * 检查当前页面中是否包含指定元素\n     * @param child 被检查的子元素\n     * @example\n```js\n$.contains( document.body ); // true\n$.contains( document.documentElement ); // false\n```\n     */\n    contains(child: HTMLElement | HTMLDocument): boolean;\n  }\n}\n\n$.contains = contains;\n","const dataNS = 'mduiElementDataStorage';\n\nexport default dataNS;\n","import JQElement from '../types/JQElement';\nimport PlainObject from '../interfaces/PlainObject';\nimport dataNS from './utils/data';\nimport { isElement, isObjectLike, isUndefined } from '../utils';\nimport each from './each';\n\n/**\n * 在元素上设置键值对数据\n * @param element\n * @param obj\n */\nfunction setObjToElement(element: JQElement, obj: PlainObject): void {\n  // @ts-ignore\n  if (!element[dataNS]) {\n    // @ts-ignore\n    element[dataNS] = {};\n  }\n\n  each(obj, (key, value) => {\n    // @ts-ignore\n    element[dataNS][key] = value;\n  });\n}\n\n/**\n * 在指定元素上存储数据，返回设置的值\n * @param element 用于存储数据的元素\n * @param key 数据键名\n * @param value 数据值\n * @example\n```js\ndata(document.body, 'type', 'image')\n// 'image'\n```\n */\nfunction data<T>(element: JQElement, key: string, value: T): T;\n\n/**\n * 在指定元素上存储数据，返回设置的键值对数据\n * @param element 用于存储数据的元素\n * @param data 键值对数据\n * @example\n```js\ndata(document.body, { 'width': 1020, 'height': 680 })\n// { 'width': 1020, 'height': 680 }\n```\n */\nfunction data<T extends PlainObject>(element: JQElement, data: T): T;\n\n/**\n * 获取在指定元素上存储的指定键名对应的值\n * @param element 用于存储数据的元素\n * @param key 数据键名\n * @example\n```js\ndata(document.body, 'height')\n// 680\n```\n */\nfunction data(element: JQElement, key: string): any;\n\n/**\n * 获取指定元素上存储的所有数据\n * @param element 用于存储数据的元素\n * @example\n```js\ndata(document.body)\n// { 'type': 'image', 'width': 1020, 'height': 680 }\n```\n */\nfunction data(element: JQElement): PlainObject;\n\nfunction data(\n  element: JQElement,\n  key?: string | PlainObject,\n  value?: any,\n): any {\n  // 根据键值对设置值\n  // data(element, { 'key' : 'value' })\n  if (isObjectLike(key)) {\n    setObjToElement(element, key);\n\n    return key;\n  }\n\n  // 根据 key、value 设置值\n  // data(element, 'key', 'value')\n  if (!isUndefined(value)) {\n    setObjToElement(element, { [key as string]: value });\n\n    return value;\n  }\n\n  // 获取所有值\n  // data(element)\n  if (isUndefined(key)) {\n    const result: PlainObject = {};\n\n    // 获取元素上的 data- 属性\n    if (isElement(element)) {\n      each(element.attributes, (_, attribute) => {\n        const { name } = attribute;\n\n        if (name.indexOf('data-') === 0) {\n          const prop = name\n            .slice(5)\n            .replace(/-./g, u => u.charAt(1).toUpperCase());\n\n          result[prop] = attribute.value;\n        }\n      });\n    }\n\n    // @ts-ignore\n    if (element[dataNS]) {\n      // @ts-ignore\n      each(element[dataNS], (key: string, value) => {\n        result[key] = value;\n      });\n    }\n\n    return result;\n  }\n\n  // 从 dataNS 中获取指定值\n  // data(element, 'key')\n  // @ts-ignore\n  if (element[dataNS] && key in element[dataNS]) {\n    // @ts-ignore\n    return element[dataNS][key];\n  }\n\n  // 从 data- 属性中获取指定值\n  // data(element, 'key')\n  if (isElement(element)) {\n    const dataKey = element.getAttribute(`data-${key}`);\n\n    if (dataKey) {\n      return dataKey;\n    }\n  }\n\n  return undefined;\n}\n\nexport default data;\n","import each from './each';\n\n/**\n * 把第二个数组的元素追加到第一个数组中，并返回合并后的数组\n * @param first 第一个数组\n * @param second 该数组的元素将被追加到第一个数组中\n * @example\n```js\nmerge( [ 0, 1, 2 ], [ 2, 3, 4 ] )\n// [ 0, 1, 2, 2, 3, 4 ]\n```\n */\nfunction merge<T, U>(first: T[], second: U[]): Array<T | U> {\n  each(second, (_, value) => {\n    first.push(value as any);\n  });\n\n  return first;\n}\n\nexport default merge;\n","import JQElement from '../types/JQElement';\nimport dataNS from './utils/data';\nimport { isUndefined } from '../utils';\n\n/**\n * 移除指定元素上存放的数据\n * @param element 存放数据的元素\n * @param name 数据键名，若为指定键名，将移除元素上所有数据\n * @example ````移除指定键名的数据\n```js\nremoveData(document.body, 'name');\n```\n * @example ````移除所有数据\n```js\nremoveData(document.body);\n```\n */\nfunction removeData(element: JQElement, name?: string): void {\n  // @ts-ignore\n  if (!element[dataNS]) {\n    return;\n  }\n\n  if (isUndefined(name)) {\n    // @ts-ignore\n    element[dataNS] = null;\n    // @ts-ignore\n    delete element[dataNS];\n    // @ts-ignore\n  } else if (element[dataNS][name]) {\n    // @ts-ignore\n    element[dataNS][name] = null;\n    // @ts-ignore\n    delete element[dataNS][name];\n  }\n}\n\nexport default removeData;\n","import each from './each';\n\n/**\n * 过滤掉数组中的重复元素\n * @param arr 数组\n * @example\n```js\nunique([1,2,12,3,2,1,2,1,1]);\n// [1, 2, 12, 3]\n```\n */\nfunction unique(arr: any[]): any[] {\n  const result: any[] = [];\n\n  each(arr, (i, val) => {\n    if (result.indexOf(val) === -1) {\n      result.push(val);\n    }\n  });\n\n  return result;\n}\n\nexport default unique;\n","import JQElement from '../types/JQElement';\nimport PlainObject from '../interfaces/PlainObject';\nimport $ from '../$';\nimport data from '../functions/data';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 在指定元素上存储数据，返回设置的值\n     * @param element 用于存储数据的元素\n     * @param key 数据键名\n     * @param value 数据值\n     * @example\n```js\n$.data(document.body, 'type', 'image')\n// 'image'\n```\n     */\n    data<T>(element: JQElement, key: string, value: T): T;\n\n    /**\n     * 在指定元素上存储数据，返回设置的键值对数据\n     * @param element 用于存储数据的元素\n     * @param data 键值对数据\n     * @example\n```js\n$.data(document.body, { 'width': 1020, 'height': 680 })\n// { 'width': 1020, 'height': 680 }\n```\n     */\n    data<T extends PlainObject>(element: JQElement, data: T): T;\n\n    /**\n     * 获取在指定元素上存储的指定键名对应的值\n     * @param element 用于存储数据的元素\n     * @param key 数据键名\n     * @example\n```js\n$.data(document.body, 'height')\n// 680\n```\n     */\n    data(element: JQElement, key: string): any;\n\n    /**\n     * 获取指定元素上存储的所有数据\n     * @param element 用于存储数据的元素\n     * @example\n```js\n$.data(document.body)\n// { 'type': 'image', 'width': 1020, 'height': 680 }\n```\n     */\n    data(element: JQElement): PlainObject;\n  }\n}\n\n$.data = data;\n","import PlainObject from '../interfaces/PlainObject';\nimport $ from '../$';\nimport each from '../functions/each';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 遍历数组，原样返回第一个参数。回调函数返回 false 时，停止遍历\n     * @param array 需要遍历的数组\n     * @param callback 为数组中每个元素执行的回调函数\n     * @example\n```js\n$.each( [ \"a\", \"b\", \"c\" ], function( index, value ){\n  alert( \"Index #\" + index + \": \" + value );\n});\n```\n     */\n    each<T>(\n      array: ArrayLike<T>,\n      callback: (this: T, index: number, value: T) => any | false,\n    ): ArrayLike<T>;\n\n    /**\n     * 遍历对象，原样返回第一个参数。回调函数返回 false 时，停止遍历\n     * @param obj 需要遍历的对象\n     * @param callback 为对象中每个元素执行的回调函数\n     * @example\n```js\n$.each({ name: \"John\", lang: \"JS\" }, function( key, value ) {\n  alert( \"Key: \" + key + \", Value: \" + value );\n});\n```\n     */\n    each<T extends PlainObject, K extends keyof T>(\n      obj: T,\n      callback: (this: T[K], key: K, value: T[K]) => any | false,\n    ): T;\n  }\n}\n\n$.each = each;\n","import $ from '../$';\nimport each from '../functions/each';\nimport extend from '../functions/extend';\nimport PlainObject from '../interfaces/PlainObject';\n\n/**\n * 比 ../functions/extend 函数多了一个 extend<T>(target: T): this & T 的用法\n */\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @param object4 该对象的属性将合并到第一个参数\n     * @param object5 该对象的属性将合并到第一个参数\n     * @param object6 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n  { key6: value6 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n  key6: value6,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject,\n      X extends PlainObject,\n      Y extends PlainObject,\n      Z extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n      object4: X,\n      object5: Y,\n      object6: Z,\n    ): T & U & V & W & X & Y & Z;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @param object4 该对象的属性将合并到第一个参数\n     * @param object5 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject,\n      X extends PlainObject,\n      Y extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n      object4: X,\n      object5: Y,\n    ): T & U & V & W & X & Y;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @param object4 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject,\n      X extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n      object4: X,\n    ): T & U & V & W & X;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n    ): T & U & V & W;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n     */\n    extend<T extends PlainObject, U extends PlainObject, V extends PlainObject>(\n      target: T,\n      object1: U,\n      object2: V,\n    ): T & U & V;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n}\n```\n     */\n    extend<T extends PlainObject, U extends PlainObject>(\n      target: T,\n      object1: U,\n    ): T & U;\n\n    /**\n     * 将对象属性扩展到 $ 命名空间中\n     * @param target 该对象的属性将扩展到 $ 命名空间中\n     * @example\n```js\n$.extend({\n  customFunc: function () {}\n})\n\n// 然后就可以这样调用自定义方法了\n$.customFunc()\n```\n     */\n    extend<T extends PlainObject>(target: T): this & T;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param objectN 额外的对象，这些对象的属性将合并到第一个对象\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n     */\n    extend(\n      target: PlainObject,\n      object1: PlainObject,\n      ...objectN: PlainObject[]\n    ): PlainObject;\n  }\n}\n\n$.extend = function(...objectN: PlainObject[]): any {\n  if (objectN.length === 1) {\n    each(objectN[0], (prop, value) => {\n      this[prop] = value;\n    });\n\n    return this;\n  }\n\n  return extend(\n    objectN.shift() as PlainObject,\n    objectN.shift() as PlainObject,\n    ...objectN,\n  );\n};\n","import PlainObject from '../interfaces/PlainObject';\nimport $ from '../$';\nimport map from '../functions/map';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 遍历数组，通过函数返回值生成一个新数组，null 和 undefined 将被过滤掉。\n     * @param array 被遍历的数组\n     * @param callback 处理每个元素的回调函数。\n     *                 第一个参数是数组值，第二个参数是数组索引。\n     *                 函数可以返回任何值，若返回数组，则会被展开；若返回 null 或 undefined，则不会被放入新生成的数组中。\n     *                 函数内部的 this 指向 window 对象。\n     * @example ````数组的每个元素都 +4\n```js\n$.map( [ 0, 1, 2 ], function( value ) {\n  return value + 4;\n});\n// [ 4, 5, 6 ]\n```\n     * @example ````移除小于 2 的值\n```js\n$.map([ 0, 1, 2, 3 ], function ( value ) {\n  return value >= 2 ? value : null;\n});\n// [ 2, 3 ]\n```\n     * @example ````返回数组时，展开\n```js\n$.map( [ 1, 2, 3 ], function( value, index ) {\n    return [ index, value ];\n});\n// [ 0, 1, 1, 2, 2, 3 ]\n```\n     */\n    map<T, TReturn>(\n      array: ArrayLike<T>,\n      callback: (\n        this: Window,\n        value: T,\n        index: number,\n      ) => TReturn | TReturn[] | null | undefined,\n    ): TReturn[];\n\n    /**\n     * 循环对象，通过函数返回值生成一个新数组，null 和 undefined 将被过滤掉。\n     * @param obj 被遍历的对象\n     * @param callback 处理每个元素的回调函数。\n     *                 第一个参数为对象值，第二个参数为对象键。\n     *                 函数可以返回任何值，若返回数组，则会被展开；若返回 null 或 undefined，则不会被放入新生成的数组中。\n     *                 函数内部的 this 指向 window 对象。\n     * @example ````值 +2\n```js\n$.map( { width: 1, height: 2 }, function( value, key ) {\n  return value + 2;\n});\n// [ 3, 4 ]\n```\n     * @example ````获取键名组成的数组\n```js\n$.map( { width: 1, height: 2 }, function( value, key ) {\n  return key;\n});\n// [ 'width', 'height' ]\n```\n     */\n    map<T extends PlainObject, K extends keyof T, TReturn>(\n      obj: T,\n      callback: (\n        this: Window,\n        value: T[K],\n        key: K,\n      ) => TReturn | TReturn[] | null | undefined,\n    ): TReturn[];\n  }\n}\n\n$.map = map;\n","import $ from '../$';\nimport merge from '../functions/merge';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 把第二个数组的元素追加到第一个数组中，并返回合并后的数组\n     * @param first 第一个数组\n     * @param second 该数组的元素将被追加到第一个数组中\n     * @example\n```js\n$.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )\n// [ 0, 1, 2, 2, 3, 4 ]\n```\n     */\n    merge<T, U>(first: T[], second: U[]): Array<T | U>;\n  }\n}\n\n$.merge = merge;\n","import $ from '../$';\nimport param from '../functions/param';\nimport PlainObject from '../interfaces/PlainObject';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 将数组或对象序列化，序列化后的字符串可作为 URL 查询字符串使用\n     * @param obj 数组或对象\n     * @example\n```js\nparam( { width:1680, height:1050 } );\n// width=1680&height=1050\n```\n```js\nparam( { foo: { one: 1,two: 2 } } )\n// foo[one]=1&foo[two]=2\n```\n```js\nparam( { ids: [1, 2, 3] } )\n// ids[]=1&ids[]=2&ids[]=3\n```\n     */\n    param(obj: any[] | PlainObject): string;\n  }\n}\n\n$.param = param;\n","import JQElement from '../types/JQElement';\nimport $ from '../$';\nimport removeData from '../functions/removeData';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 移除指定元素上存放的数据。若没有指定 name，则移除元素上的所有数据\n     * @param element 存放数据的元素\n     * @param name 数据键名\n     * @example 移除元素上键名为 name 的数据\n```js\nvar element = document.getElementById('test');\nif (element) {\n  $.removeData(element, 'name');\n}\n     ```\n     * @example 移除元素上所有数据\n```js\nvar element = document.getElementById('test');\nif (element) {\n  $.removeData(element);\n}\n```\n     */\n    removeData(element: JQElement, name?: string): void;\n  }\n}\n\n$.removeData = removeData;\n","import $ from '../$';\nimport unique from '../functions/unique';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 过滤掉数组中的重复元素\n     * @param arr 数组\n     * @example\n```js\nunique([1,2,12,3,2,1,2,1,1]);\n// [1, 2, 12, 3]\n```\n     */\n    unique(arr: any[]): any[];\n  }\n}\n\n$.unique = unique;\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport unique from '../functions/unique';\nimport merge from '../functions/merge';\nimport JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 添加元素到当前 JQ 对象中\n     * @param selector 可以是 HTML 字符串、CSS 选择器、JQ 对象、DOM 元素、DOM 元素数组、NodeList 等\n     * @example ````把含 .selected 的元素添加到当前 JQ 对象中\n```js\n$('.box').add('.selected');\n```\n     */\n    add(selector: JQSelector): this;\n  }\n}\n\n$.fn.add = function(this: JQ, selector: JQSelector): JQ {\n  return new JQ(unique(merge(this.get(), $(selector).get())));\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport './each';\nimport JQElement from '../types/JQElement';\nimport { isElement, isFunction } from '../utils';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 添加 CSS 类，多个类名用空格分割\n     * @param className\n     * @example ````在 p 元素上加上 item 类\n```js\n$('p').addClass('item')\n```\n     @example ````在 p 元素上加上 item1 和 item2 两个类\n```js\n$('p').addClass('item1 item2')\n```\n     */\n    addClass(\n      className:\n        | string\n        | ((\n            this: HTMLElement,\n            index: number,\n            currentClassName: string,\n          ) => string),\n    ): this;\n  }\n}\n\ntype classListMethod = 'add' | 'remove' | 'toggle';\n\neach(['add', 'remove', 'toggle'], (_, name: classListMethod) => {\n  $.fn[`${name}Class`] = function(\n    this: JQ,\n    className:\n      | string\n      | ((\n          this: HTMLElement,\n          index: number,\n          currentClassName: string,\n        ) => string),\n  ): JQ {\n    return this.each((i, element) => {\n      if (!isElement(element)) {\n        return;\n      }\n\n      if (isFunction(className)) {\n        className = className.call(element, i, element.classList.value);\n      }\n\n      const classes = className.split(' ').filter(name => name);\n\n      each(classes, (_, cls) => {\n        element.classList[name](cls);\n      });\n    });\n  };\n});\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { isElement } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 把当前元素插入到指定元素的前面\n     * @param selector\n     * @example\n```js\n$('<p>I would like to say: </p>').insertBefore('<b>Hello</b>');\n// [ <p>I would like to say: </p><b>Hello</b> ]\n```\n     */\n    insertBefore(selector: JQSelector): this;\n  }\n}\n\neach(['insertBefore', 'insertAfter'], (nameIndex, name) => {\n  $.fn[name] = function(this: JQ, selector: JQSelector): JQ {\n    const $target = $(selector);\n\n    return this.each((_, element) => {\n      if (!isElement(element)) {\n        return;\n      }\n\n      $target.each((_, target) => {\n        if (!isElement(target) || !target.parentNode) {\n          return;\n        }\n\n        target.parentNode.insertBefore(\n          $target.length === 1 ? element : element.cloneNode(true),\n          nameIndex === 0 ? target : target.nextSibling,\n        );\n      });\n    });\n  };\n});\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './insertAfter';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 在当前元素后面插入指定内容\n     * @param selector\n     * @example\n```js\n$('<p>I would like to say: </p>').after('<b>Hello</b>')\n// [ <p>I would like to say: </p><b>Hello</b> ]\n```\n     */\n    after(selector: JQSelector): this;\n  }\n}\n\n$.fn.after = function(this: JQ, selector: JQSelector): JQ {\n  $(selector).insertAfter(this);\n\n  return this;\n};\n","import JQElement from '../types/JQElement';\nimport Selector from '../types/Selector';\nimport { isWindow } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport merge from '../functions/merge';\nimport './each';\nimport './get';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 根据 CSS 选择器找到指定的后代节点的集合\n     * @param selector\n     * @example\n```js\n$('#box').find('.box')\n```\n     */\n    find(selector: Selector): this;\n  }\n}\n\n$.fn.find = function(this: JQ, selector: Selector): JQ {\n  const foundElements: HTMLElement[] = [];\n\n  this.each((_, element) => {\n    if (!isWindow(element)) {\n      merge(foundElements, $(element.querySelectorAll(selector)).get());\n    }\n  });\n\n  return new JQ(foundElements);\n};\n","import JQElement from '../../types/JQElement';\nimport { isObjectLike } from '../../utils';\nimport $ from '../../$';\nimport contains from '../../functions/contains';\nimport data from '../../functions/data';\nimport '../find';\n\ntype Handler = {\n  e: string; // 事件名\n  fn: Function; // 事件处理函数\n  i: number; // 事件ID\n  proxy: any;\n  sel?: string; // 选择器\n};\n\ntype Handlers = {\n  // 元素ID\n  [elementIndex: number]: Handler[];\n};\n\n// 存储事件\nconst handlers: Handlers = {};\n\n// 元素ID\nlet mduiElementId = 1;\n\n/**\n * 为元素赋予一个唯一的ID\n */\nfunction getElementId(element: JQElement): number {\n  const key = 'mduiElementId';\n\n  if (!data(element, key)) {\n    mduiElementId += 1;\n    data(element, key, mduiElementId);\n  }\n\n  return data(element, key);\n}\n\n/**\n * 获取匹配的事件\n * @param element\n * @param eventName\n * @param func\n * @param selector\n */\nfunction getHandlers(\n  element: JQElement,\n  eventName: string,\n  func?: Function,\n  selector?: string,\n): Handler[] {\n  return (handlers[getElementId(element)] || []).filter(\n    handler =>\n      handler &&\n      (!eventName || handler.e === eventName) &&\n      (!func || handler.fn.toString() === func.toString()) &&\n      (!selector || handler.sel === selector),\n  );\n}\n\n/**\n * 添加事件监听\n * @param element\n * @param eventName\n * @param func\n * @param data\n * @param selector\n */\nfunction add(\n  element: JQElement,\n  eventName: string,\n  func: Function,\n  data?: any,\n  selector?: string,\n): void {\n  const elementId = getElementId(element);\n\n  if (!handlers[elementId]) {\n    handlers[elementId] = [];\n  }\n\n  // 传入 data.useCapture 来设置 useCapture: true\n  let useCapture = false;\n  if (isObjectLike(data) && data.useCapture) {\n    useCapture = true;\n  }\n\n  eventName.split(' ').forEach(event => {\n    function callFn(e: Event, elem: JQElement): void {\n      // 因为鼠标事件模拟事件的 detail 属性是只读的，因此在 e._detail 中存储参数\n      const result = func.apply(\n        elem,\n        // @ts-ignore\n        e._detail === undefined ? [e] : [e].concat(e._detail),\n      );\n\n      if (result === false) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    }\n\n    function proxyFn(e: Event): void {\n      // @ts-ignore\n      e._data = data;\n\n      if (selector) {\n        // 事件代理\n        $(element)\n          .find(selector)\n          .get()\n          .reverse()\n          .forEach(elem => {\n            if (elem === e.target || contains(elem, e.target as HTMLElement)) {\n              callFn(e, elem);\n            }\n          });\n      } else {\n        // 不使用事件代理\n        callFn(e, element);\n      }\n    }\n\n    const handler: Handler = {\n      e: event,\n      fn: func,\n      sel: selector,\n      i: handlers[elementId].length,\n      proxy: proxyFn,\n    };\n\n    handlers[elementId].push(handler);\n    element.addEventListener(handler.e, proxyFn, useCapture);\n  });\n}\n\n/**\n * 移除事件监听\n * @param element\n * @param eventName\n * @param func\n * @param selector\n */\nfunction remove(\n  element: JQElement,\n  eventName: string,\n  func?: Function,\n  selector?: string,\n): void {\n  (eventName || '').split(' ').forEach(event => {\n    getHandlers(element, event, func, selector).forEach(handler => {\n      delete handlers[getElementId(element)][handler.i];\n      element.removeEventListener(handler.e, handler.proxy, false);\n    });\n  });\n}\n\nexport { add, remove };\n","import JQSelector from '../../types/JQSelector';\nimport { isElement } from '../../utils';\nimport { JQ } from '../../JQ';\nimport $ from '../../$';\nimport unique from '../../functions/unique';\nimport '../each';\nimport '../is';\n\nexport default function dir(\n  $elements: JQ,\n  selector: JQSelector,\n  nameIndex: number,\n  node: 'parentNode' | 'nextElementSibling' | 'previousElementSibling',\n): JQ {\n  const ret: Node[] = [];\n  let target;\n\n  $elements.each((_, element) => {\n    if (!isElement(element)) {\n      return;\n    }\n\n    target = element[node];\n    while (target) {\n      if (nameIndex === 2) {\n        // prevUntil, nextUntil, parentsUntil\n        if (!selector || $(target).is(selector)) {\n          break;\n        }\n\n        ret.push(target);\n      } else if (nameIndex === 0) {\n        // prev, next, parent\n        if (!selector || $(target).is(selector)) {\n          ret.push(target);\n        }\n\n        break;\n      } else {\n        // prevAll, nextAll, parents\n        if (!selector || $(target).is(selector)) {\n          ret.push(target);\n        }\n      }\n\n      // @ts-ignore\n      target = target[node];\n    }\n  });\n\n  return new JQ(unique(ret));\n}\n","import { JQ } from '../JQ';\nimport JQElement from '../types/JQElement';\nimport PlainObject from '../interfaces/PlainObject';\nimport $ from '../$';\nimport { isFunction, isObjectLike } from '../utils';\nimport { remove } from './utils/event';\nimport each from '../functions/each';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 解除通过事件委托绑定的指定事件\n     * @param eventName\n     * @param selector\n     * @param callback\n     * @example\n```js\n$(document).off('click', '.box', function () {});\n```\n     * @example\n```js\n$(document).off('click dbclick', '.box', function () {});\n```\n     * @example\n```js\n$(document).off('click', '.box');\n```\n     * @example\n```js\n$(document).off('click dbclick', '.box');\n```\n     */\n    off(eventName: string, selector: string, callback?: Function): this;\n\n    /**\n     * 解除绑定的指定事件\n     * @param eventName\n     * @param callback\n     * @example\n```js\n$('.box').off('click', function () {});\n```\n     * @example\n```js\n$('.box').off('click dbclick', function () {});\n```\n     * @example\n```js\n$('.box').off('click');\n```\n     * @example\n```js\n$('.box').off('click dbclick');\n```\n     */\n    off(eventName: string, callback?: Function): this;\n\n    /**\n     * 同时移除多个事件处理函数\n     * @param events\n     * @param selector\n     * @example\n```js\n$('.wrapper').off({\n  'click': function () {},\n  'dbclick': function () {},\n}, '.box')\n```\n     * @example\n```js\n$('.wrapper').off({\n  'click': function () {},\n  'dbclick': function () {},\n})\n```\n     */\n    off(events: PlainObject<Function>, selector?: string): this;\n  }\n}\n\n$.fn.off = function(\n  this: JQ,\n  eventName: PlainObject<Function> | string,\n  selector?: any,\n  callback?: any,\n): any {\n  // eventName 是对象\n  if (isObjectLike(eventName)) {\n    each(eventName, (type: string, fn: Function) => {\n      // this.off('click', undefined, function () {})\n      // this.off('click', '.box', function () {})\n      this.off(type, selector, fn);\n    });\n\n    return this;\n  }\n\n  // selector 不存在\n  if (isFunction(selector)) {\n    callback = selector;\n    selector = undefined;\n    // this.off('click', undefined, function () {})\n  }\n\n  return this.each(function() {\n    remove(this, eventName, callback, selector);\n  });\n};\n","import { JQ } from '../JQ';\nimport JQElement from '../types/JQElement';\nimport PlainObject from '../interfaces/PlainObject';\nimport $ from '../$';\nimport { isString, isFunction, isObjectLike } from '../utils';\nimport { add } from './utils/event';\nimport each from '../functions/each';\nimport './off';\nimport './each';\n\ntype EventCallback = (e: Event, data?: any) => void | false;\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 通过事件委托同时添加多个事件处理函数\n     * @param events\n     * @param selector\n     * @param data\n     */\n    on(events: PlainObject<EventCallback>, selector: string, data?: any): this;\n\n    /**\n     * 同时添加多个事件处理函数\n     * @param events\n     * @param data\n     */\n    on(events: PlainObject<EventCallback>, data?: any): this;\n\n    /**\n     * 通过事件委托添加事件处理函数，并传入参数\n     * @param eventName\n     * @param selector\n     * @param data 如果 data 是 string 类型，则必须提供 selector 参数；selector 参数可以是 null\n     * @param callback\n     */\n    on(\n      eventName: string,\n      selector: string,\n      data: any,\n      callback: EventCallback,\n    ): this;\n\n    /**\n     * 通过事件委托添加事件处理函数\n     * @param eventName\n     * @param selector\n     * @param callback\n     */\n    on(eventName: string, selector: string, callback: EventCallback): this;\n\n    /**\n     * 添加事件处理函数，并传入参数\n     * @param eventName\n     * @param data\n     * @param callback\n     */\n    on(eventName: string, data: any, callback: EventCallback): this;\n\n    /**\n     * 添加事件处理函数\n     * @param eventName\n     * @param callback\n     */\n    on(eventName: string, callback: EventCallback): this;\n  }\n}\n\n$.fn.on = function(\n  this: JQ,\n  eventName: PlainObject<EventCallback> | string,\n  selector: any,\n  data?: any,\n  callback?: any,\n  one?: boolean, // 是否是 one 方法，只在 JQ 内部使用\n): JQ {\n  // eventName 是对象\n  if (isObjectLike(eventName)) {\n    each(eventName, (type: string, fn: EventCallback) => {\n      // selector 和 data 都可能是 undefined\n      // @ts-ignore\n      this.on(type, selector, data, fn, one);\n    });\n\n    return this;\n  }\n\n  // selector 不存在\n  if (selector && !isString(selector)) {\n    callback = data;\n    data = selector;\n    selector = undefined;\n  }\n\n  // data 不存在\n  if (isFunction(data)) {\n    callback = data;\n    data = undefined;\n  }\n\n  // $().one()\n  if (one) {\n    const origCallback: Function = callback;\n\n    callback = (): void => {\n      this.off(eventName, selector, callback);\n      // eslint-disable-next-line prefer-rest-params\n      return origCallback.apply(callback, arguments);\n    };\n  }\n\n  return this.each(function() {\n    add(this, eventName, callback, data, selector);\n  });\n};\n","import JQElement from '../types/JQElement';\nimport { GlobalCallback, GlobalSuccessCallback } from '../types/JQAjax';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport { ajaxEvents } from '../functions/utils/ajax';\nimport './on';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 监听全局 Ajax 开始事件\n     * 通过 $(document).on('start.mdui.ajax', function (event, params) {}) 调用时，包含两个参数\n     * event: 事件对象\n     * params: {\n     *   xhr: XMLHttpRequest 对象\n     *   options: ajax 请求的配置参数\n     * }\n     * @param handler\n     * @example\n```js\n$(document).ajaxStart(function (event, xhr, options) {});\n```\n     */\n    ajaxStart(handler: GlobalCallback): this;\n  }\n}\n\neach(ajaxEvents, (name, eventName) => {\n  $.fn[name] = function(\n    this: JQ,\n    fn: GlobalCallback | GlobalSuccessCallback,\n  ): any {\n    return this.on(eventName, (e, params) => {\n      fn(e, params.xhr, params.options, params.data);\n    });\n  };\n});\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './append';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 把当前元素追加到指定元素内部的后面\n     * @param selector\n     * @example\n```js\n$('<p>Hello</p>').appendTo('<p>I would like to say: </p>')\n// [ <p>I would like to say: <p>Hello</p></p> ]\n```\n     */\n    appendTo(selector: JQSelector): this;\n  }\n}\n\n$.fn.appendTo = function(this: JQ, selector: JQSelector): JQ {\n  $(selector).append(this);\n\n  return this;\n};\n","import JQElement from '../types/JQElement';\nimport PlainObject from '../interfaces/PlainObject';\nimport { isElement, isFunction, isObjectLike, isUndefined } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 设置元素的属性\n     * @param attributeName\n     * @param value\n     * @example ````设置属性值\n```js\n$('div').attr('title', 'mdui');\n```\n     * @example ````通过函数返回值设置属性值\n```js\n$('img').attr('src', function() {\n  return '/resources/' + this.title;\n});\n```\n     */\n    attr(\n      attributeName: string,\n      value:\n        | string\n        | number\n        | null\n        | ((\n            this: HTMLElement,\n            index: number,\n            oldAttrValue: string,\n          ) => string | number | void | undefined),\n    ): this;\n\n    /**\n     * 同时设置多个属性\n     * @param attributes\n     * @example\n```js\n$('img').attr({\n  src: '/resources/hat.gif',\n  title: 'mdui',\n  alt: 'mdui Logo'\n});\n```\n     @example\n```js\n$('img').attr({\n  src: function () {\n    return '/resources/' + this.title;\n  },\n  title: 'mdui',\n  alt: 'mdui Logo'\n});\n```\n     */\n    attr(\n      attributes: PlainObject<\n        | string\n        | number\n        | null\n        | ((\n            this: HTMLElement,\n            index: number,\n            oldAttrValue: string,\n          ) => string | number | void | undefined)\n      >,\n    ): this;\n\n    /**\n     * 获取第一个元素的属性值\n     * @param attributeName\n     * @example\n```js\n$('div').attr('title');\n```\n     */\n    attr(attributeName: string): string | undefined;\n  }\n}\n\neach(['attr', 'prop', 'css'], (nameIndex, name) => {\n  function set(element: HTMLElement, key: string, value: any): void {\n    if (nameIndex === 0) {\n      element.setAttribute(key, value);\n    } else if (nameIndex === 1) {\n      // @ts-ignore\n      element[key] = value;\n    } else {\n      // @ts-ignore\n      element.style[key] = value;\n    }\n  }\n\n  function get(element: HTMLElement, key: string): any {\n    if (nameIndex === 0) {\n      return element.getAttribute(key);\n    }\n\n    if (nameIndex === 1) {\n      // @ts-ignore\n      return element[key];\n    }\n\n    return window.getComputedStyle(element, null).getPropertyValue(key);\n  }\n\n  $.fn[name] = function<T extends JQElement>(\n    this: JQ<T>,\n    key: string | PlainObject,\n    value?: any,\n  ): any {\n    if (isObjectLike(key)) {\n      each(key, (k, v) => {\n        // @ts-ignore\n        this[name](k, v);\n      });\n\n      return this;\n    }\n\n    if (isUndefined(value)) {\n      const element = this[0];\n\n      return isElement(element) ? get(element, key) : undefined;\n    }\n\n    return this.each((i, element) => {\n      if (!isElement(element)) {\n        return;\n      }\n\n      if (isFunction(value)) {\n        value = value.call(element, i, get(element, key));\n      }\n\n      set(element, key, value);\n    });\n  };\n});\n","import JQSelector from '../types/JQSelector';\nimport JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './insertBefore';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 把指定元素插入到当前元素前面\n     * @param selector\n     * @example\n```js\n$('<p>I would like to say: </p>').before('<b>Hello</b>')\n// [ <b>Hello</b><p>I would like to say: </p> ]\n```\n     */\n    before(selector: JQSelector): this;\n  }\n}\n\n$.fn.before = function(this: JQ, selector: JQSelector): JQ {\n  $(selector).insertBefore(this);\n\n  return this;\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport {\n  isArrayLike,\n  isDocument,\n  isElement,\n  isNull,\n  isString,\n  isUndefined,\n  isWindow,\n} from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 根据选择器、DOM元素或 JQ 对象来检测匹配元素集合，\n     * 如果其中至少有一个元素符合这个给定的表达式就返回true\n     * @param selector\n     * @example\n```js\n$('.box').is('.box') // true\n$('.box').is('.boxss'); // false\n```\n     */\n    is(selector: JQSelector): boolean;\n  }\n}\n\n$.fn.is = function(this: JQ, selector: JQSelector): boolean {\n  const self = this[0];\n\n  if (!self || isUndefined(selector) || isNull(selector)) {\n    return false;\n  }\n\n  // CSS 选择器\n  if (isString(selector) && isElement(self)) {\n    const matchesSelector =\n      self.matches ||\n      // @ts-ignore\n      self.matchesSelector ||\n      self.webkitMatchesSelector ||\n      // @ts-ignore\n      self.mozMatchesSelector ||\n      // @ts-ignore\n      self.oMatchesSelector ||\n      // @ts-ignore\n      self.msMatchesSelector;\n\n    return matchesSelector.call(self, selector);\n  }\n\n  if (isDocument(selector) || isWindow(selector)) {\n    return self === selector;\n  }\n\n  if (selector instanceof Node || isArrayLike(selector)) {\n    const $compareWith = selector instanceof Node ? [selector] : selector;\n\n    for (let i = 0; i < $compareWith.length; i += 1) {\n      if ($compareWith[i] === self) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import JQElement from '../types/JQElement';\nimport Selector from '../types/Selector';\nimport { isElement, isWindow } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport unique from '../functions/unique';\nimport './each';\nimport './is';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 获取当前元素的直接子元素，可以使用 CSS 选择器作为参数进行过滤\n     * @param selector\n     * @example ````找到 #box 的所有直接子元素\n```js\n$('#box').children()\n```\n     * @example ````找到 #box 的所有直接子元素中，包含 .box 的元素集合\n```js\n$('#box').children('.box')\n```\n     */\n    children(selector?: Selector): this;\n  }\n}\n\n$.fn.children = function(this: JQ, selector?: Selector): JQ {\n  const children: HTMLElement[] = [];\n\n  this.each((_, element) => {\n    if (isWindow(element)) {\n      return;\n    }\n\n    each(element.childNodes, (__, childNode) => {\n      if (!isElement(childNode)) {\n        return;\n      }\n\n      if (!selector || $(childNode).is(selector)) {\n        children.push(childNode);\n      }\n    });\n  });\n\n  return new JQ(unique(children));\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport map from '../functions/map';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 为当前 JQ 对象的每个元素都调用一个函数，生成一个包含函数返回值的新的 JQ 对象。null 和 undefined 会被过滤掉。\n     * @param callback\n     * @example\n```js\nconst result = $('input.checked').map(function (i, element) {\n  return $(this).val();\n});\n// result 为匹配元素的值组成的 JQ 对象\n```\n     */\n    map(\n      callback: (this: T, index: number, element: T) => null | undefined | any,\n    ): this;\n  }\n}\n\n$.fn.map = function(\n  this: JQ,\n  callback: (\n    this: JQElement,\n    index: number,\n    element: JQElement,\n  ) => null | undefined | any,\n): JQ {\n  return new JQ(map(this, (element, i) => callback.call(element, i, element)));\n};\n","import JQElement from '../types/JQElement';\nimport { isWindow } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './map';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 通过深度克隆来复制集合中的所有元素\n     * 通过原生 cloneNode 方法深度克隆来复制集合中的所有元素。此方法不会有数据和事件处理程序复制到新的元素。这点和jquery中利用一个参数来确定是否复制数据和事件处理不相同。\n     * @example\n```js\n$('body').append($(\"#box\").clone())\n```\n     */\n    clone(): this;\n  }\n}\n\n$.fn.clone = function(this: JQ): JQ {\n  return this.map(function() {\n    return !isWindow(this) ? this.cloneNode(true) : null;\n  });\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport dir from './utils/dir';\nimport './get';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 如果没有传入参数，则返回直接父元素的 JQ 对象。\n     * 如果传入了参数，仅返回和 CSS 选择器匹配的直接父元素的 JQ 对象。\n     * @param selector\n     * @example ````返回 .box 元素的直接父元素\n```js\n$('.box').parent()\n```\n     * @example ````返回 .box 元素的直接父元素中含有 .parent 类的元素\n```js\n$('.box').parent('.parent')\n```\n     */\n    parent(selector?: JQSelector): this;\n  }\n}\n\neach(['', 's', 'sUntil'], (nameIndex, name) => {\n  $.fn[`parent${name}`] = function(this: JQ, selector?: JQSelector): JQ {\n    // parents、parentsUntil 需要把元素的顺序反向处理，以便和 jQuery 的结果一致\n    const $nodes = nameIndex === 0 ? this : $(this.get().reverse());\n\n    return dir($nodes, selector, nameIndex, 'parentNode');\n  };\n});\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 返回一个 JQ 对象的子集\n     * 子集为从 start 开始的元素。如果传入了 end 参数，则提取从 start 到不包含 end 位置的元素。\n     * @param start\n     * @param end\n     * @example ````返回对象中第三个（包含第三个）之后的所有元素\n```js\n$('div').slice(3);\n```\n     * @example ```返回对象中第三个到第五个（包含第三个，不包含第五个）之间的元素\n```js\n$('div').slice(3, 5);\n```\n     */\n    slice(start: number, end?: number): this;\n  }\n}\n\n$.fn.slice = function(this: JQ, ...args: [number, number?]): JQ {\n  return new JQ([].slice.apply(this, args));\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './slice';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 返回 JQ 对象中指定索引号的元素的 JQ 对象\n     * @param index\n     * @example ````返回第一个元素的 JQ 对象\n```js\n$('div').eq(0);\n```\n     * @example ````返回最后一个元素的 JQ 对象\n```js\n$('div').eq(-1);\n```\n     */\n    eq(index: number): this;\n  }\n}\n\n$.fn.eq = function(this: JQ, index: number): JQ {\n  const ret = index === -1 ? this.slice(index) : this.slice(index, +index + 1);\n\n  return new JQ(ret);\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './parents';\nimport './eq';\nimport './is';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 从当前元素向上逐级匹配，返回最先匹配到的元素\n     * @param selector\n     * @example ````获取 .box 元素的父元素中最近的 .parent 元素\n```js\n$('.box').closest('.parent')\n```\n     */\n    closest(selector: JQSelector): this;\n  }\n}\n\n$.fn.closest = function(this: JQ, selector: JQSelector): JQ {\n  if (this.is(selector)) {\n    return this;\n  }\n\n  return this.parents(selector).eq(0);\n};\n","import JQElement from '../types/JQElement';\nimport PlainObject from '../interfaces/PlainObject';\nimport { isObjectLike, isUndefined } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport data from '../functions/data';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 在当前元素上存储数据\n     * @param key\n     * @param value\n     * @example\n```js\n$('.box').data('type', 'image')\n```\n     */\n    data(key: string, value: any): this;\n\n    /**\n     * 在当前元素上存储数据\n     * @param obj\n     * @example\n```js\n$('.box').data({\n  width: 1020,\n  height: 680,\n})\n```\n     */\n    data(obj: PlainObject): this;\n\n    /**\n     * 获取在当前元素上存储的数据\n     * @param key\n     * @example\n```js\n$('.box').data('height')\n// 680\n```\n     */\n    data(key: string): any;\n\n    /**\n     * 获取在当前元素上存储的所有数据\n     * @example\n```js\n$('.box').data()\n// { 'type': 'image', 'width': 1020, 'height': 680 }\n```\n     */\n    data(): PlainObject;\n  }\n}\n\n$.fn.data = function(this: JQ, key?: string | PlainObject, value?: any): any {\n  // 同时设置多个值\n  if (isObjectLike(key)) {\n    return this.each((_, element) => {\n      data(element, key);\n    });\n  }\n\n  // 设置值\n  if (!isUndefined(value)) {\n    return this.each((_, element) => {\n      data(element, key as string, value);\n    });\n  }\n\n  if (!this[0]) {\n    return undefined;\n  }\n\n  // 获取值\n  if (!isUndefined(key)) {\n    return data(this[0], key);\n  }\n\n  // 获取所有值\n  return data(this[0]);\n};\n","import JQElement from '../types/JQElement';\nimport { isElement } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 移除当前元素中所有的子元素\n     * @example\n```js\n$('.box').empty()\n```\n     */\n    empty(): this;\n  }\n}\n\n$.fn.empty = function(this: JQ): JQ {\n  return this.each(function() {\n    if (isElement(this)) {\n      this.innerHTML = '';\n    }\n  });\n};\n","import JQElement from '../types/JQElement';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 在 $ 的原型链上扩展方法\n     * @param obj\n     * @example\n```js\n$.fn.extend({\n  customFunc: function () {}\n})\n\n// 然后就可以这样使用扩展的方法了\n$(document).customFunc()\n```\n     */\n    extend(obj: PlainObject): this;\n  }\n}\n\n$.fn.extend = function(this: JQ, obj: PlainObject): JQ {\n  each(obj, (prop, value) => {\n    // 在 JQ 对象上扩展方法时，需要自己添加 typescript 的类型定义\n    $.fn[prop] = value;\n  });\n\n  return this;\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { isString } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './eq';\nimport './parent';\nimport './children';\nimport './get';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 如果没有传入参数，则返回当前对象中第一个元素相对于同辈元素的索引值。\n     * 如果传入一个 CSS 选择器作为参数，则返回当前对象中第一个元素相对于 CSS 选择器匹配元素的索引值。\n     * 如果传入一个 DOM 元素，则返回该 DOM 元素在当前对象中的索引值。\n     * 如果传入一个 JQ 对象，则返回 JQ 对象中第一个元素在当前对象中的索引值。\n     * @param selector\n     */\n    index(selector?: JQSelector): number;\n  }\n}\n\n$.fn.index = function(this: JQ, selector?: JQSelector): number {\n  if (!selector || isString(selector)) {\n    return (selector ? $(selector) : this)\n      .eq(0)\n      .parent()\n      .children()\n      .get()\n      .indexOf(this[0]);\n  }\n\n  // 返回指定元素在当前 JQ 对象中的位置\n  return this.get().indexOf($(selector).get(0));\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { isFunction } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './map';\nimport './index';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 从当前对象中筛选出与指定表达式匹配的元素\n     * 参数为函数时，函数返回 true 时，该元素会被保留，返回 false 时，该元素会被移除。\n     * @param selector\n     * @example ````筛选出所有含 .box 的 div 元素\n```js\n$('div').filter('.box');\n```\n     * @example ````筛选出所有已选中的元素\n```js\n$('#select option').filter(function (idx, element) {\n  return element.selected;\n});\n```\n     */\n    filter(\n      selector: JQSelector | ((this: T, index: number, element: T) => boolean),\n    ): this;\n  }\n}\n\n$.fn.filter = function(this: JQ, selector: any): JQ {\n  if (isFunction(selector)) {\n    return this.map((index, element) =>\n      selector.call(element, index, element) ? element : undefined,\n    );\n  }\n\n  const $selector = $(selector);\n\n  return this.map((_, element) =>\n    $selector.index(element) > -1 ? element : undefined,\n  );\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './eq';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 返回当前对象中第一个元素的 JQ 对象。\n     * @example\n```js\n$('div').first()\n```\n     */\n    first(): this;\n  }\n}\n\n$.fn.first = function(this: JQ): JQ {\n  return this.eq(0);\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { isString, isWindow } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport contains from '../functions/contains';\nimport './filter';\nimport './find';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 保留含有指定子元素的元素，去掉不含有指定子元素的元素\n     * @param selector\n     * @example ````给含有 ul 的 li 加上背景色\n```js\n$('li').has('ul').css('background-color', 'red');\n```\n     */\n    has(selector: JQSelector): this;\n  }\n}\n\n$.fn.has = function(this: JQ, selector: JQSelector): JQ {\n  const $targets = isString(selector) ? this.find(selector) : $(selector);\n  const { length } = $targets;\n\n  return this.filter(function() {\n    if (isWindow(this)) {\n      return false;\n    }\n\n    for (let i = 0; i < length; i += 1) {\n      if (contains(this, $targets[i] as HTMLElement)) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n};\n","import $ from '../$';\nimport JQElement from '../types/JQElement';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 是否含有指定的 CSS 类\n     * @param className\n     * @example\n```js\n$('div').hasClass('item')\n```\n     */\n    hasClass(className: string): boolean;\n  }\n}\n\n$.fn.hasClass = function(className: string): boolean {\n  if (!this[0] || !className) {\n    return false;\n  }\n\n  return this[0].classList.contains(className);\n};\n","import JQElement from '../types/JQElement';\nimport { isWindow, isDocument, isUndefined } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport './css';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 设置对象中所有元素的宽度。参数是数字或数字字符串时，自动添加 px 作为单位\n     * @param value\n     * @example\n```js\n$('.box').width('20%')\n```\n     @example\n```js\n$('.box').width(10);\n```\n     */\n    width(value: string | number): this;\n\n    /**\n     * 获取第一个元素的宽度\n     * @example\n```js\n$('.box').width();\n```\n     */\n    width(): number;\n  }\n}\n\neach(\n  {\n    Width: 'width',\n    Height: 'height',\n  },\n  (prop, name) => {\n    $.fn[name] = function(this: JQ, value?: string | number): JQ | number {\n      // 获取值\n      if (isUndefined(value)) {\n        const element = this[0];\n\n        if (isWindow(element)) {\n          // @ts-ignore\n          return element[`inner${prop}`];\n        }\n\n        if (isDocument(element)) {\n          // @ts-ignore\n          return element.documentElement[`scroll${prop}`];\n        }\n\n        const $element = $(element);\n\n        // IE10、IE11 在 box-sizing:border-box 时，不会包含 padding 和 border，这里进行修复\n        let IEFixValue = 0;\n        const isWidth = name === 'width';\n\n        // 判断是 IE 浏览器\n        if ('ActiveXObject' in window) {\n          if ($element.css('box-sizing') === 'border-box') {\n            const directionLeft = isWidth ? 'left' : 'top';\n            const directionRight = isWidth ? 'right' : 'bottom';\n            const propertyNames = [\n              `padding-${directionLeft}`,\n              `padding-${directionRight}`,\n              `border-${directionLeft}-width`,\n              `border-${directionRight}-width`,\n            ];\n\n            each(propertyNames, (_, property) => {\n              IEFixValue += parseFloat($element.css(property) || '0');\n            });\n          }\n        }\n\n        return parseFloat($(element).css(name) || '0') + IEFixValue;\n      }\n\n      // 设置值\n      if (!isNaN(Number(value)) && value !== '') {\n        value += 'px';\n      }\n\n      return this.css(name, value);\n    };\n  },\n);\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './each';\nimport { isElement } from '../utils';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 隐藏对象中所有元素\n     * @example\n```js\n$('.box').hide();\n```\n     */\n    hide(): this;\n  }\n}\n\n$.fn.hide = function(this: JQ): JQ {\n  return this.each(function() {\n    if (isElement(this)) {\n      this.style.display = 'none';\n    }\n  });\n};\n","import JQElement from '../types/JQElement';\nimport { isUndefined } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 设置当前元素的值\n     * @param value\n     * @example\n```js\n$('#input').val('input value')\n```\n     */\n    val(value: string | number | string[]): this;\n\n    /**\n     * 获取当前元素的值\n     * @example\n```js\n$('#input').val()\n```\n     */\n    val(): string;\n  }\n}\n\neach(['val', 'html', 'text'], (nameIndex, name) => {\n  const props = {\n    0: 'value',\n    1: 'innerHTML',\n    2: 'textContent',\n  };\n\n  const defaults = {\n    0: undefined,\n    1: undefined,\n    2: null,\n  };\n\n  $.fn[name] = function<T extends JQElement>(this: JQ<T>, value?: any): any {\n    // 获取值\n    if (isUndefined(value)) {\n      // @ts-ignore\n      return this[0] ? this[0][props[nameIndex]] : defaults[nameIndex];\n    }\n\n    // 设置值\n    return this.each((_, element) => {\n      // @ts-ignore\n      element[props[nameIndex]] = value;\n    });\n  };\n});\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport './css';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 获取元素的宽度，包含内边距\n     * @example\n```js\n$('.box').innerWidth()\n```\n     */\n    innerWidth(): number;\n  }\n}\n\neach(\n  {\n    Width: 'width',\n    Height: 'height',\n  },\n  (prop, name) => {\n    $.fn[`inner${prop}`] = function(this: JQ): number {\n      let value = this[name as 'width' | 'height']();\n      const $element = $(this[0]);\n\n      if ($element.css('box-sizing') !== 'border-box') {\n        const isWidth = name === 'width';\n        const directionLeft = isWidth ? 'left' : 'top';\n        const directionRight = isWidth ? 'right' : 'bottom';\n        const propertyNames = [\n          `padding-${directionLeft}`,\n          `padding-${directionRight}`,\n        ];\n\n        each(propertyNames, (_, property) => {\n          value += parseFloat($element.css(property) || '0');\n        });\n      }\n\n      return value;\n    };\n  },\n);\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './eq';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 获取对象中最后一个元素\n     * @example\n```js\n$('div').last()\n```\n     */\n    last(): this;\n  }\n}\n\n$.fn.last = function(this: JQ): JQ {\n  return this.eq(-1);\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport dir from './utils/dir';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 获取当前元素的后一个匹配的同辈元素\n     * @param selector\n     * @example ````获取 .box 元素的后一个元素\n```js\n$('.box').next()\n```\n     * @example ````获取 .box 元素的后一个 div 元素\n```js\n$('.box').next('div')\n```\n     */\n    next(selector?: JQSelector): this;\n  }\n}\n\neach(['', 'All', 'Until'], (nameIndex, name) => {\n  $.fn[`next${name}`] = function(this: JQ, selector?: JQSelector): JQ {\n    return dir(this, selector, nameIndex, 'nextElementSibling');\n  };\n});\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './map';\nimport './filter';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 从当前对象中筛选出与表达式不匹配的元素\n     * 参数为函数时，函数返回 true 时，该元素会被移除，返回 false 时，该元素会被保留。\n     * @param selection\n     * @example ````筛选出所有不含 .box 类的 div 元素\n```js\n$('div').not('.box')\n```\n     * @example ````筛选出所有未选中的元素\n```js\n$('#select option').not(function (idx, element) {\n  return element.selected;\n})\n```\n     */\n    not(\n      selection:\n        | JQSelector\n        | ((this: JQElement, index: number, element: JQElement) => boolean),\n    ): this;\n  }\n}\n\n$.fn.not = function(\n  this: JQ,\n  selector:\n    | JQSelector\n    | ((this: JQElement, index: number, element: JQElement) => boolean),\n): JQ {\n  const $excludes = this.filter(selector);\n\n  return this.map((_, element) =>\n    $excludes.index(element) > -1 ? undefined : element,\n  );\n};\n","import JQElement from '../types/JQElement';\nimport { isElement } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\n\ninterface Coordinates {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n}\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 获取当前元素相对于 document 的偏移\n     * @example\n```js\n$('.box').offset();\n// { top: 20, left: 30, width: 200, height: 100 }\n```\n     */\n    offset(): Coordinates | undefined;\n  }\n}\n\n$.fn.offset = function(this: JQ): Coordinates | undefined {\n  const element = this[0];\n\n  if (element && isElement(element)) {\n    const offset = element.getBoundingClientRect();\n\n    return {\n      left: offset.left + window.pageXOffset,\n      top: offset.top + window.pageYOffset,\n      width: offset.width,\n      height: offset.height,\n    };\n  }\n\n  return undefined;\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './map';\nimport './css';\nimport { isElement } from '../utils';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 返回最近的用于定位的父元素，\n     * 即父元素中第一个 position 为 relative 或 absolute 的元素\n     * @example\n```js\n$('.box').offsetParent()\n```\n     */\n    offsetParent(): this;\n  }\n}\n\n/**\n * 返回最近的用于定位的父元素\n * @returns {*|JQ}\n */\n$.fn.offsetParent = function(this: JQ): JQ {\n  return this.map(function() {\n    if (!isElement(this)) {\n      return new JQ();\n    }\n\n    let parent = this.offsetParent;\n\n    while (\n      parent &&\n      isElement(parent) &&\n      $(parent).css('position') === 'static'\n    ) {\n      parent = parent.offsetParent;\n    }\n\n    return parent || document.documentElement;\n  });\n};\n","import JQElement from '../types/JQElement';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './on';\n\ntype EventCallback = (e: Event, data?: any) => void | false;\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 通过事件委托同时添加多个事件处理函数，触发一次后自动解绑\n     * @param events\n     * @param selector\n     * @param data\n     */\n    one(events: PlainObject<EventCallback>, selector: string, data?: any): this;\n\n    /**\n     * 同时添加多个事件处理函数，触发一次后自动解绑\n     * @param events\n     * @param data\n     */\n    one(events: PlainObject<EventCallback>, data?: any): this;\n\n    /**\n     * 通过事件委托添加事件处理函数，并传入参数，触发一次后自动解绑\n     * @param eventName\n     * @param selector\n     * @param data 如果 data 是 string 类型，则必须提供 selector 参数；selector 参数可以是 null\n     * @param callback\n     */\n    one(\n      eventName: string,\n      selector: string,\n      data: any,\n      callback: EventCallback,\n    ): this;\n\n    /**\n     * 通过事件委托添加事件处理函数，触发一次后自动解绑\n     * @param eventName\n     * @param selector\n     * @param callback\n     */\n    one(eventName: string, selector: string, callback: EventCallback): this;\n\n    /**\n     * 添加事件处理函数，并传入参数，触发一次后自动解绑\n     * @param eventName\n     * @param data\n     * @param callback\n     */\n    one(eventName: string, data: any, callback: EventCallback): this;\n\n    /**\n     * 添加事件处理函数，触发一次后自动解绑\n     * @param eventName\n     * @param callback\n     */\n    one(eventName: string, callback: EventCallback): this;\n  }\n}\n\n$.fn.one = function(\n  this: JQ,\n  eventName: PlainObject<EventCallback> | string,\n  selector: any,\n  data?: any,\n  callback?: any,\n): JQ {\n  // @ts-ignore\n  return this.on(eventName, selector, data, callback, true);\n};\n","import JQElement from '../types/JQElement';\nimport { isElement, isNodeName } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './css';\nimport './offset';\nimport './offsetParent';\n\ninterface Coordinates {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n}\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 获取元素相对于父元素的偏移\n     * @example\n```js\n$('.box').position();\n// { top: 20, left: 30, width: 100, height: 200 }\n```\n     */\n    position(): Coordinates | undefined;\n  }\n}\n\n$.fn.position = function(this: JQ): Coordinates | undefined {\n  const element = this[0];\n\n  if (!element || !isElement(element)) {\n    return undefined;\n  }\n\n  let $offsetParent: JQ;\n  let parentOffset: { left: number; top: number } = {\n    left: 0,\n    top: 0,\n  };\n  const offset = this.offset();\n\n  if (!offset) {\n    return undefined;\n  }\n\n  if (this.css('position') !== 'fixed') {\n    $offsetParent = this.offsetParent();\n    if (!isNodeName($offsetParent[0] as HTMLElement, 'html')) {\n      parentOffset = $offsetParent.offset() as Coordinates;\n    }\n\n    parentOffset.top =\n      parentOffset.top + parseFloat($offsetParent.css('borderTopWidth') || '0');\n\n    parentOffset.left =\n      parentOffset.left +\n      parseFloat($offsetParent.css('borderLeftWidth') || '0');\n  }\n\n  return {\n    top:\n      offset.top - parentOffset.top - parseFloat(this.css('marginTop') || '0'),\n    left:\n      offset.left -\n      parentOffset.left -\n      parseFloat(this.css('marginLeft') || '0'),\n    width: offset.width,\n    height: offset.height,\n  };\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './prepend';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 前置到指定元素内部\n     * @param selector\n     * @example\n```js\n$('<p>Hello</p>').prependTo('<p>I would like to say: </p>')\n// [ <p><p>Hello</p>I would like to say: </p> ]\n```\n     */\n    prependTo(selector: JQSelector): this;\n  }\n}\n\n$.fn.prependTo = function(this: JQ, selector: JQSelector): JQ {\n  $(selector).prepend(this);\n\n  return this;\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport dir from './utils/dir';\nimport './get';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 获取当前元素的前一个匹配的同辈元素\n     * @param selector\n     * @example ````获取 .box 元素的前一个元素\n```js\n$('.box').prev()\n```\n     * @example ````获取 .box 元素的前一个 div 元素\n```js\n$('.box').prev('div')\n```\n     */\n    prev(selector?: JQSelector): this;\n  }\n}\n\neach(['', 'All', 'Until'], (nameIndex, name) => {\n  $.fn[`prev${name}`] = function(this: JQ, selector?: JQSelector): JQ {\n    // prevAll、prevUntil 需要把元素的顺序倒序处理，以便和 jQuery 的结果一致\n    const $nodes = nameIndex === 0 ? this : $(this.get().reverse());\n\n    return dir($nodes, selector, nameIndex, 'previousElementSibling');\n  };\n});\n","import JQElement from '../types/JQElement';\nimport { isElement } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 移除指定属性\n     * @param attributeName\n     * @example\n```js\n$('div').removeAttr('title')\n```\n     */\n    removeAttr(attributeName: string): this;\n  }\n}\n\n$.fn.removeAttr = function(this: JQ, attributeName: string): JQ {\n  return this.each(function() {\n    if (isElement(this)) {\n      this.removeAttribute(attributeName);\n    }\n  });\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport removeData from '../functions/removeData';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 移除元素上存储的数据。若未指定键名，则移除元素上所有数据\n     * @param name\n     * @example ````移除指定键名的数据\n```js\n$('.box').removeData('key');\n```\n     * @example ````移除元素上所有数据\n```js\n$('.box').removeData();\n```\n     */\n    removeData(name?: string): this;\n  }\n}\n\n$.fn.removeData = function(this: JQ, name?: string): JQ {\n  return this.each((_, element) => {\n    removeData(element, name);\n  });\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 删除属性值\n     * @param name\n     * @example\n```js\n$('input').removeProp('disabled')\n```\n     */\n    removeProp(name: string): this;\n  }\n}\n\n$.fn.removeProp = function(this: JQ, name: string): JQ {\n  return this.each(function() {\n    try {\n      // @ts-ignore\n      delete this[name];\n    } catch (e) {}\n  });\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './before';\nimport './remove';\nimport JQSelector from '../types/JQSelector';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 用新元素替换当前元素\n     * @param newContent\n     * @example ````用 <p>Hello</p> 替换所有的 .box 元素\n```js\n$('.box').replaceWith('<p>Hello</p>')\n```\n     */\n    replaceWith(newContent: JQSelector): this;\n  }\n}\n\n$.fn.replaceWith = function(this: JQ, newContent: JQSelector): JQ {\n  return this.before(newContent).remove();\n};\n","import JQElement from '../types/JQElement';\nimport JQSelector from '../types/JQSelector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './replaceWith';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 用当前元素替换指定元素\n     * @param selector\n     * @example ````用 .new 元素替换所有 .box 元素\n```js\n$('.new').replaceAll('.box');\n```\n     */\n    replaceAll(selector: JQSelector): this;\n  }\n}\n\n$.fn.replaceAll = function(this: JQ, selector: JQSelector): JQ {\n  $(selector).replaceWith(this);\n\n  return this;\n};\n","import JQElement from '../types/JQElement';\nimport { isNodeName } from '../utils';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './each';\nimport './attr';\nimport './val';\n\ninterface NameValuePair {\n  name: string;\n  value: string;\n}\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 把表单元素的值组合成由 name 和 value 的键值对组成的数组\n     * @example\n```js\n$('form').serializeArray()\n// [ {\"name\":\"name\",\"value\":\"mdui\"}, {\"name\":\"password\",\"value\":\"\"} ]\n```\n     */\n    serializeArray(): NameValuePair[];\n  }\n}\n\n/**\n * 将表单元素的值组合成键值对数组\n * @returns {Array}\n */\n$.fn.serializeArray = function(this: JQ): NameValuePair[] {\n  const result: NameValuePair[] = [];\n  const formElement = this[0];\n\n  if (!formElement || !(formElement instanceof HTMLFormElement)) {\n    return result;\n  }\n\n  $([].slice.call(formElement.elements)).each(function() {\n    const $item = $(this);\n    const type = $item.attr('type');\n\n    if (\n      !isNodeName(this, 'fieldset') &&\n      // @ts-ignore\n      !this.disabled &&\n      // @ts-ignore\n      ['submit', 'reset', 'button'].indexOf(type) === -1 &&\n      // @ts-ignore\n      (['radio', 'checkbox'].indexOf(type) === -1 || this.checked)\n    ) {\n      const name = $item.attr('name');\n\n      if (name) {\n        result.push({\n          name,\n          value: $item.val(),\n        });\n      }\n    }\n  });\n\n  return result;\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport each from '../functions/each';\nimport './serializeArray';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 将表单元素数组或者对象序列化\n     * @example\n```js\n$('form').serialize();\n// golang=456&name=mdui&password=\n```\n     */\n    serialize(): string;\n  }\n}\n\n/**\n * 将表单元素或对象序列化\n * @returns {String}\n */\n$.fn.serialize = function(this: JQ): string {\n  const result: string[] = [];\n\n  each(this.serializeArray(), (_, item) => {\n    result.push(\n      `${encodeURIComponent(item.name)}=${encodeURIComponent(item.value)}`,\n    );\n  });\n\n  return result.join('&');\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './each';\nimport { isElement } from '../utils';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 显示对象中的所有元素\n     * @example\n```js\n$('.box').show()\n```\n     */\n    show(): this;\n  }\n}\n\nconst elementDisplay: {\n  [nodeName: string]: string;\n} = {};\n\n/**\n * 获取元素的默认 display 样式值，用于 .show() 方法\n * @param nodeName\n */\nfunction defaultDisplay(nodeName: string): string {\n  let element: HTMLElement;\n  let display: string;\n\n  if (!elementDisplay[nodeName]) {\n    element = document.createElement(nodeName);\n    document.body.appendChild(element);\n    display = getComputedStyle(element, '').getPropertyValue('display');\n    element.parentNode!.removeChild(element);\n    if (display === 'none') {\n      display = 'block';\n    }\n\n    elementDisplay[nodeName] = display;\n  }\n\n  return elementDisplay[nodeName];\n}\n\n/**\n * 显示指定元素\n * @returns {JQ}\n */\n$.fn.show = function(this: JQ): JQ {\n  return this.each(function() {\n    if (!isElement(this)) {\n      return;\n    }\n\n    if (this.style.display === 'none') {\n      this.style.display = '';\n    }\n\n    if (\n      window.getComputedStyle(this, '').getPropertyValue('display') === 'none'\n    ) {\n      this.style.display = defaultDisplay(this.nodeName);\n    }\n  });\n};\n","import JQElement from '../types/JQElement';\nimport Selector from '../types/Selector';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './add';\nimport './prevAll';\nimport './nextAll';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 取得同辈元素的集合。可指定 CSS 选择器作为参数\n     * @param selector\n     * @example ````获取 .box 元素的所有同辈元素\n```js\n$('.box').siblings()\n```\n     * @example ````获取 .box 元素的所有同辈元素中含 .selected 的元素\n```js\n$('.box').siblings('.selected')\n```\n     */\n    siblings(selector?: Selector): this;\n  }\n}\n\n/**\n * 取得同辈元素的集合\n * @param selector {String=}\n * @returns {JQ}\n */\n$.fn.siblings = function(this: JQ, selector?: Selector): JQ {\n  return this.prevAll(selector).add(this.nextAll(selector));\n};\n","import JQElement from '../types/JQElement';\nimport { JQ } from '../JQ';\nimport $ from '../$';\nimport './each';\nimport { isElement } from '../utils';\n\ndeclare module '../JQ' {\n  interface JQ<T = JQElement> {\n    /**\n     * 切换当前元素的显示状态\n     * @example\n```js\n$('.box').toggle()\n```\n     */\n    toggle(): this;\n  }\n}\n\n/**\n * 切换元素的显示状态\n * @returns {JQ}\n */\n$.fn.toggle = function(this: JQ): JQ {\n  return this.each(function() {\n    if (!isElement(this)) {\n      return;\n    }\n\n    this.style.display = this.style.display === 'none' ? '' : 'none';\n  });\n};\n"],"names":["t","e","bubbles","cancelable","detail","n","document","createEvent","initCustomEvent","finallyConstructor","callback","constructor","this","then","value","resolve","reason","reject","MouseEvent","initMouseEvent","window","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","prototype","Event","CustomEvent","setTimeoutFunc","setTimeout","isArray","x","Boolean","length","noop","Promise","fn","TypeError","_state","_handled","_value","undefined","_deferreds","doResolve","handle","self","deferred","_immediateFn","cb","onFulfilled","onRejected","ret","promise","push","newValue","finale","thisArg","apply","arguments","bind","_unhandledRejectionFn","i","len","Handler","done","ex","prom","promiseFinally","all","arr","args","Array","slice","call","remaining","res","val","race","setImmediate","err","console","warn","globalNS","global","Error","isNodeName","element","name","nodeName","toLowerCase","isArrayLike","target","isObjectLike","isFunction","isString","isUndefined","isNull","isWindow","Window","isDocument","HTMLDocument","isElement","HTMLElement","each","let","const","keys","Object","map","elements","concat","ref","JQ","$","selector","test","readyState","body","addEventListener","Node","html","trim","toCreate","li","tr","td","th","tbody","option","childTag","parentTag","indexOf","tempParent","createElement","innerHTML","childNodes","match","querySelectorAll","getElementById","extend","object1","objectN","unshift","_","object","prop","param","obj","destructure","key","keyTmp","v","encodeURIComponent","join","globalOptions","ajaxEvents","ajaxStart","ajaxSuccess","ajaxError","ajaxComplete","trigger","eventName","extraParameters","event","eventParams","isMouseEvent","_detail","dispatchEvent","remove","parentNode","removeChild","get","index","nameIndex","newChild","newChilds","copyByClone","tempDiv","reverse","child","cloneNode","appendChild","insertBefore","jsonpID","isQueryStringData","method","appendQuery","url","query","replace","defaultJsonpCallback","Date","now","contains","parent","documentElement","ajax","options","textStatus","isCanceled","mergedOptions","defaults","data","processData","async","cache","username","password","headers","xhrFields","statusCode","dataType","jsonp","jsonpCallback","contentType","timeout","mergeOptions","location","toString","toUpperCase","triggerEvent","params","triggerCallback","result1","result2","ArrayBuffer","Blob","Document","FormData","callbackName","requestUrl","abortTimeout","script","type","onerror","clearTimeout","src","append","xhrTimeout","xhr","XMLHttpRequest","open","setRequestHeader","RegExp","$2","host","onload","responseData","isHttpStatusSuccess","status","JSON","parse","responseText","responseType","response","func","statusText","onabort","abort","send","ajaxSetup","dataNS","setObjToElement","result","attributes","attribute","u","charAt","dataKey","getAttribute","merge","first","second","removeData","unique","shift","add","className","classList","split","filter","cls","$target","nextSibling","after","insertAfter","find","foundElements","handlers","mduiElementId","getElementId","forEach","handler","sel","getHandlers","removeEventListener","proxy","dir","$elements","node","is","off","on","one","origCallback","elementId","useCapture","callFn","elem","preventDefault","stopPropagation","proxyFn","_data","appendTo","getComputedStyle","getPropertyValue","k","setAttribute","style","set","before","matches","matchesSelector","webkitMatchesSelector","mozMatchesSelector","oMatchesSelector","msMatchesSelector","$compareWith","children","__","childNode","clone","eq","closest","parents","empty","$selector","has","$targets","hasClass","Width","Height","$element","IEFixValue","isWidth","css","directionLeft","directionRight","property","parseFloat","isNaN","Number","hide","display","props","0","1","2","last","not","$excludes","offset","getBoundingClientRect","left","pageXOffset","top","pageYOffset","width","height","offsetParent","position","$offsetParent","parentOffset","prependTo","prepend","removeAttr","attributeName","removeAttribute","removeProp","replaceWith","newContent","replaceAll","serializeArray","formElement","HTMLFormElement","$item","attr","disabled","checked","serialize","item","elementDisplay","show","defaultDisplay","siblings","prevAll","nextAll","toggle"],"mappings":"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"}