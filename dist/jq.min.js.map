{"version":3,"file":"jq.min.js","sources":["../node_modules/mdn-polyfills/CustomEvent.js","../node_modules/promise-polyfill/src/finally.js","../node_modules/mdn-polyfills/MouseEvent.js","../node_modules/promise-polyfill/src/index.js","../node_modules/promise-polyfill/src/polyfill.js","../src/utils.ts","../src/functions/each.ts","../src/JQ.ts","../src/$.ts","../src/functions/contains.ts","../src/functions/merge.ts","../src/methods/each.ts","../src/methods/get.ts","../src/methods/find.ts","../src/methods/utils/event.ts","../src/functions/extend.ts","../src/functions/param.ts","../src/methods/trigger.ts","../src/functions/utils/ajax.ts","../src/functions/ajax.ts","../src/static/ajax.ts","../src/static/ajaxSetup.ts","../src/functions/ajaxSetup.ts","../src/static/contains.ts","../src/functions/utils/data.ts","../src/functions/data.ts","../src/functions/map.ts","../src/functions/removeData.ts","../src/functions/unique.ts","../src/methods/utils/dir.ts","../src/static/data.ts","../src/static/each.ts","../src/static/extend.ts","../src/static/map.ts","../src/static/merge.ts","../src/static/param.ts","../src/static/removeData.ts","../src/static/unique.ts","../src/methods/add.ts","../src/methods/addClass.ts","../src/methods/is.ts","../src/methods/remove.ts","../src/methods/insertBefore.ts","../src/methods/before.ts","../src/methods/off.ts","../src/methods/on.ts","../src/methods/ajaxStart.ts","../src/methods/append.ts","../src/methods/map.ts","../src/methods/appendTo.ts","../src/methods/attr.ts","../src/methods/children.ts","../src/methods/clone.ts","../src/methods/slice.ts","../src/methods/eq.ts","../src/methods/parent.ts","../src/methods/closest.ts","../src/methods/data.ts","../src/methods/width.ts","../src/methods/position.ts","../src/methods/offset.ts","../src/methods/empty.ts","../src/methods/extend.ts","../src/methods/filter.ts","../src/methods/first.ts","../src/methods/has.ts","../src/methods/hasClass.ts","../src/methods/hide.ts","../src/methods/val.ts","../src/methods/index.ts","../src/methods/last.ts","../src/methods/next.ts","../src/methods/not.ts","../src/methods/offsetParent.ts","../src/methods/one.ts","../src/methods/prev.ts","../src/methods/removeAttr.ts","../src/methods/removeData.ts","../src/methods/removeProp.ts","../src/methods/replaceWith.ts","../src/methods/replaceAll.ts","../src/methods/serializeArray.ts","../src/methods/serialize.ts","../src/methods/show.ts","../src/methods/siblings.ts","../src/methods/toggle.ts"],"sourcesContent":["!function(){function t(t,e){e=e||{bubbles:!1,cancelable:!1,detail:void 0};var n=document.createEvent(\"CustomEvent\");return n.initCustomEvent(t,e.bubbles,e.cancelable,e.detail),n}\"function\"!=typeof window.CustomEvent&&(t.prototype=window.Event.prototype,window.CustomEvent=t)}();\n","/**\n * @this {Promise}\n */\nfunction finallyConstructor(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      // @ts-ignore\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      // @ts-ignore\n      return constructor.resolve(callback()).then(function() {\n        // @ts-ignore\n        return constructor.reject(reason);\n      });\n    }\n  );\n}\n\nexport default finallyConstructor;\n","!function(){try{return new MouseEvent(\"test\")}catch(e){}var e=function(e,t){t=t||{bubbles:!1,cancelable:!1};var n=document.createEvent(\"MouseEvent\");return n.initMouseEvent(e,t.bubbles,t.cancelable,window,0,t.screenX||0,t.screenY||0,t.clientX||0,t.clientY||0,t.ctrlKey||!1,t.altKey||!1,t.shiftKey||!1,t.metaKey||!1,t.button||0,t.relatedTarget||null),n};e.prototype=Event.prototype,window.MouseEvent=e}();\n","import promiseFinally from './finally';\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction isArray(x) {\n  return Boolean(x && typeof x.length !== 'undefined');\n}\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\n/**\n * @constructor\n * @param {Function} fn\n */\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  /** @type {!number} */\n  this._state = 0;\n  /** @type {!boolean} */\n  this._handled = false;\n  /** @type {Promise|undefined} */\n  this._value = undefined;\n  /** @type {!Array<!Function>} */\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\n/**\n * @constructor\n */\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  // @ts-ignore\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = promiseFinally;\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!isArray(arr)) {\n      return reject(new TypeError('Promise.all accepts an array'));\n    }\n\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!isArray(arr)) {\n      return reject(new TypeError('Promise.race accepts an array'));\n    }\n\n    for (var i = 0, len = arr.length; i < len; i++) {\n      Promise.resolve(arr[i]).then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  // @ts-ignore\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      // @ts-ignore\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nexport default Promise;\n","import Promise from './index';\nimport promiseFinally from './finally';\n\n/** @suppress {undefinedVars} */\nvar globalNS = (function() {\n  // the only reliable means to get the global object is\n  // `Function('return this')()`\n  // However, this causes CSP violations in Chrome apps.\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('unable to locate global object');\n})();\n\nif (!('Promise' in globalNS)) {\n  globalNS['Promise'] = Promise;\n} else if (!globalNS.Promise.prototype['finally']) {\n  globalNS.Promise.prototype['finally'] = promiseFinally;\n}\n","function isNodeName(element: Element, name: string): boolean {\n  return element.nodeName.toLowerCase() === name.toLowerCase();\n}\n\nfunction isFunction(target: any): target is Function {\n  return typeof target === 'function';\n}\n\nfunction isString(target: any): target is string {\n  return typeof target === 'string';\n}\n\nfunction isNumber(target: any): target is number {\n  return typeof target === 'number';\n}\n\nfunction isBoolean(target: any): target is boolean {\n  return typeof target === 'boolean';\n}\n\nfunction isUndefined(target: any): target is undefined {\n  return typeof target === 'undefined';\n}\n\nfunction isNull(target: any): target is null {\n  return target === null;\n}\n\nfunction isWindow(target: any): target is Window {\n  return target instanceof Window;\n}\n\nfunction isDocument(target: any): target is Document {\n  return target instanceof Document;\n}\n\nfunction isElement(target: any): target is Element {\n  return target instanceof Element;\n}\n\nfunction isNode(target: any): target is Node {\n  return target instanceof Node;\n}\n\nfunction isArrayLike(target: any): target is ArrayLike<any> {\n  if (isFunction(target) || isWindow(target)) {\n    return false;\n  }\n\n  return isNumber(target.length);\n}\n\nfunction isObjectLike(target: any): target is Record<string, any> {\n  return typeof target === 'object' && target !== null;\n}\n\nfunction toElement(target: Element | Document): Element {\n  return isDocument(target) ? target.documentElement : target;\n}\n\n/**\n * 把用 - 分隔的字符串转为驼峰（如 box-sizing 转换为 boxSizing）\n * @param string\n */\nfunction toCamelCase(string: string): string {\n  return string\n    .replace(/^-ms-/, 'ms-')\n    .replace(/-([a-z])/g, (_, letter: string) => letter.toUpperCase());\n}\n\n/**\n * 把驼峰法转为用 - 分隔的字符串（如 boxSizing 转换为 box-sizing）\n * @param string\n */\nfunction toKebabCase(string: string): string {\n  return string.replace(/[A-Z]/g, replacer => '-' + replacer.toLowerCase());\n}\n\n/**\n * 获取元素的样式值\n * @param element\n * @param name\n */\nfunction getComputedStyleValue(element: HTMLElement, name: string): string {\n  return window.getComputedStyle(element).getPropertyValue(toKebabCase(name));\n}\n\n/**\n * 检查元素的 box-sizing 是否是 border-box\n * @param element\n */\nfunction isBorderBox(element: HTMLElement): boolean {\n  return getComputedStyleValue(element, 'box-sizing') === 'border-box';\n}\n\n/**\n * 获取元素的 padding, border, margin 宽度（两侧宽度的和，单位为px）\n * @param element\n * @param direction\n * @param extra\n */\nfunction getExtraWidth(\n  element: HTMLElement,\n  direction: 'width' | 'height',\n  extra: 'padding' | 'border' | 'margin',\n): number {\n  const position =\n    direction === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];\n\n  return [0, 1].reduce((prev, _, index) => {\n    let prop = extra + position[index];\n\n    if (extra === 'border') {\n      prop += 'Width';\n    }\n\n    return prev + parseFloat(getComputedStyleValue(element, prop) || '0');\n  }, 0);\n}\n\n/**\n * 获取元素的样式值，对 width 和 height 进行过处理\n * @param element\n * @param name\n */\nfunction getStyle(element: HTMLElement, name: string): string {\n  // width、height 属性使用 getComputedStyle 得到的值不准确，需要使用 getBoundingClientRect 获取\n  if (name === 'width' || name === 'height') {\n    const valueNumber = element.getBoundingClientRect()[name];\n\n    if (isBorderBox(element)) {\n      return `${valueNumber}px`;\n    }\n\n    return `${valueNumber -\n      getExtraWidth(element, name, 'border') -\n      getExtraWidth(element, name, 'padding')}px`;\n  }\n\n  return getComputedStyleValue(element, name);\n}\n\n/**\n * 获取子节点组成的数组\n * @param target\n * @param parent\n */\nfunction getChildNodesArray(target: string, parent: string): Array<Node> {\n  const tempParent = document.createElement(parent);\n  tempParent.innerHTML = target;\n\n  return [].slice.call(tempParent.childNodes);\n}\n\n/**\n * 始终返回 false 的函数\n */\nfunction returnFalse(): boolean {\n  return false;\n}\n\n/**\n * 数值单位的 CSS 属性\n */\nconst cssNumber = [\n  'animationIterationCount',\n  'columnCount',\n  'fillOpacity',\n  'flexGrow',\n  'flexShrink',\n  'fontWeight',\n  'gridArea',\n  'gridColumn',\n  'gridColumnEnd',\n  'gridColumnStart',\n  'gridRow',\n  'gridRowEnd',\n  'gridRowStart',\n  'lineHeight',\n  'opacity',\n  'order',\n  'orphans',\n  'widows',\n  'zIndex',\n  'zoom',\n];\n\nexport {\n  isNodeName,\n  isArrayLike,\n  isObjectLike,\n  isFunction,\n  isString,\n  isNumber,\n  isBoolean,\n  isUndefined,\n  isNull,\n  isWindow,\n  isDocument,\n  isElement,\n  isNode,\n  toElement,\n  toCamelCase,\n  toKebabCase,\n  getComputedStyleValue,\n  isBorderBox,\n  getExtraWidth,\n  getStyle,\n  getChildNodesArray,\n  returnFalse,\n  cssNumber,\n};\n","import PlainObject from '../interfaces/PlainObject';\nimport { isArrayLike } from '../utils';\n\n/**\n * 遍历数组，原样返回第一个参数\n *\n * @param array 需要遍历的数组\n * @param callback 为数组中每个元素执行的回调函数\n *\n * 函数的第一个参数为数组的索引，第二个参数为对应的索引的值，`this` 也指向该值\n *\n * 函数返回 `false` 时，停止遍历\n * @example\n```js\neach( [ \"a\", \"b\", \"c\" ], function( index, value ){\n  alert( \"Index #\" + index + \": \" + value );\n});\n```\n */\nfunction each<T>(\n  array: ArrayLike<T>,\n  callback: (this: T, index: number, value: T) => any | void,\n): ArrayLike<T>;\n\n/**\n * 遍历对象，原样返回第一个参数\n *\n * @param obj 需要遍历的对象\n * @param callback 为对象中每个元素执行的回调函数\n *\n * 函数的第一个参数为对象的键名，第二个参数为对应的键值，`this` 也指向该值\n *\n * 函数返回 `false` 时，停止遍历\n * @example\n```js\neach({ name: \"John\", lang: \"JS\" }, function( key, value ) {\n  alert( \"Key: \" + key + \", Value: \" + value );\n});\n```\n */\nfunction each<T extends PlainObject, K extends keyof T>(\n  obj: T,\n  callback: (this: T[K], key: K, value: T[K]) => any | void,\n): T;\n\nfunction each(target: ArrayLike<any> | PlainObject, callback: Function): any {\n  if (isArrayLike(target)) {\n    for (let i = 0; i < target.length; i += 1) {\n      if (callback.call(target[i], i, target[i]) === false) {\n        return target;\n      }\n    }\n  } else {\n    const keys = Object.keys(target);\n    for (let i = 0; i < keys.length; i += 1) {\n      if (callback.call(target[keys[i]], keys[i], target[keys[i]]) === false) {\n        return target;\n      }\n    }\n  }\n\n  return target;\n}\n\nexport default each;\n","import each from './functions/each';\n\n/**\n * 为了使用模块扩充，这里不能使用默认导出\n */\nexport class JQ<T = HTMLElement> implements ArrayLike<T> {\n  length = 0;\n  [index: number]: T;\n\n  constructor(arr?: ArrayLike<T>) {\n    if (!arr) {\n      return this;\n    }\n\n    each(arr, (i, item) => {\n      // @ts-ignore\n      this[i] = item;\n    });\n\n    this.length = arr.length;\n\n    return this;\n  }\n}\n","import each from './functions/each';\nimport { JQStatic } from './interfaces/JQStatic';\nimport PlainObject from './interfaces/PlainObject';\nimport { JQ } from './JQ';\nimport TypeOrArray from './types/TypeOrArray';\nimport {\n  getChildNodesArray,\n  isArrayLike,\n  isFunction,\n  isNode,\n  isString,\n} from './utils';\n\nfunction get$(): JQStatic {\n  const $ = function(\n    selector?:\n      | string\n      | TypeOrArray<Element>\n      | null\n      | JQ\n      | PlainObject\n      | Function,\n  ) {\n    if (!selector) {\n      return new JQ();\n    }\n\n    // JQ\n    if (selector instanceof JQ) {\n      return selector;\n    }\n\n    // function\n    if (isFunction(selector)) {\n      if (\n        /complete|loaded|interactive/.test(document.readyState) &&\n        document.body\n      ) {\n        selector.call(document, $);\n      } else {\n        document.addEventListener(\n          'DOMContentLoaded',\n          () => selector.call(document, $),\n          false,\n        );\n      }\n\n      return new JQ([document]);\n    }\n\n    // String\n    if (isString(selector)) {\n      const html = selector.trim();\n\n      // 根据 HTML 字符串创建 JQ 对象\n      if (html[0] === '<' && html[html.length - 1] === '>') {\n        let toCreate = 'div';\n\n        const tags = {\n          li: 'ul',\n          tr: 'tbody',\n          td: 'tr',\n          th: 'tr',\n          tbody: 'table',\n          option: 'select',\n        };\n\n        each(tags, (childTag, parentTag) => {\n          if (html.indexOf(`<${childTag}`) === 0) {\n            toCreate = parentTag;\n            return false;\n          }\n\n          return;\n        });\n\n        return new JQ(getChildNodesArray(html, toCreate));\n      }\n\n      // 根据 CSS 选择器创建 JQ 对象\n      const isIdSelector = selector[0] === '#' && !selector.match(/[ .<>:~]/);\n\n      if (!isIdSelector) {\n        return new JQ(document.querySelectorAll(selector));\n      }\n\n      const element = document.getElementById(selector.slice(1));\n      if (element) {\n        return new JQ([element]);\n      }\n\n      return new JQ();\n    }\n\n    if (isArrayLike(selector) && !isNode(selector)) {\n      return new JQ(selector);\n    }\n\n    return new JQ([selector]);\n  } as JQStatic;\n\n  $.fn = JQ.prototype;\n\n  return $;\n}\n\nconst $ = get$();\n\nexport default $;\n","import { toElement } from '../utils';\n\n/**\n * 检查 container 元素内是否包含 contains 元素\n * @param container 父元素\n * @param contains 子元素\n * @example\n```js\ncontains( document, document.body ); // true\ncontains( document.getElementById('test'), document ); // false\ncontains( $('.container').get(0), $('.contains').get(0) ); // false\n```\n */\nfunction contains(\n  container: Element | Document,\n  contains: Element | Document,\n): boolean {\n  return container !== contains && toElement(container).contains(contains);\n}\n\nexport default contains;\n","import each from './each';\n\n/**\n * 把第二个数组的元素追加到第一个数组中，并返回合并后的数组\n * @param first 第一个数组\n * @param second 该数组的元素将被追加到第一个数组中\n * @example\n```js\nmerge( [ 0, 1, 2 ], [ 2, 3, 4 ] )\n// [ 0, 1, 2, 2, 3, 4 ]\n```\n */\nfunction merge<T, U>(first: T[], second: U[]): Array<T | U> {\n  each(second, (_, value) => {\n    first.push(value as any);\n  });\n\n  return first;\n}\n\nexport default merge;\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 遍历 JQ 对象，为每个元素执行一个函数\n     * @param callback\n     * 执行的回调函数\n     *\n     * 函数的第一个参数为元素的索引位置，第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 如果函数返回 `false`，则结束遍历。\n     * @example\n```js\n$('img').each(function (index, element) {\n  this.src = 'test' + index + '.jpg';\n});\n```\n     */\n    each(callback: (this: T, index: number, element: T) => void | any): this;\n  }\n}\n\n$.fn.each = function(this: JQ, callback: void | any): JQ {\n  return each(this, callback) as JQ;\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取集合中指定索引位置的元素\n     * @param index 索引位置\n     * @example\n```js\n// 获取第 3 个 p 元素\n$('p').get(2)\n```\n     * @example\n```js\n// 获取最后一个 p 元素\n$('p').get(-1)\n```\n     */\n    get(index: number): T;\n\n    /**\n     * 获取集合中所有元素组成的数组\n     * @example\n```js\n// 获取所有 p 元素组成的数组\n$('p').get()\n```\n     */\n    get(): T[];\n  }\n}\n\n$.fn.get = function(this: JQ, index?: number): any | any[] {\n  return index === undefined\n    ? [].slice.call(this)\n    : this[index >= 0 ? index : index + this.length];\n};\n","import $ from '../$';\nimport merge from '../functions/merge';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './each';\nimport './get';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 根据 CSS 选择器找到指定的后代节点的集合\n     * @param selector CSS 选择器\n     * @example\n```js\n$('#box').find('.box')\n```\n     */\n    find(selector: Selector): this;\n  }\n}\n\n$.fn.find = function(this: JQ, selector: Selector): JQ {\n  const foundElements: HTMLElement[] = [];\n\n  this.each((_, element) => {\n    merge(foundElements, $(element.querySelectorAll(selector)).get());\n  });\n\n  return new JQ(foundElements);\n};\n","import $ from '../../$';\nimport contains from '../../functions/contains';\nimport { isObjectLike } from '../../utils';\nimport '../find';\n\ntype EventCallback = (\n  this: Element | Document | Window,\n  event: Event,\n  data?: any,\n  ...dataN: any[]\n) => void | false;\n\ntype Handler = {\n  type: string; // 事件名\n  ns: string; // 命名空间\n  func: Function; // 事件处理函数\n  id: number; // 事件ID\n  proxy: any;\n  selector?: string; // 选择器\n};\n\ntype Handlers = {\n  // 元素ID\n  [elementIndex: number]: Handler[];\n};\n\n// 存储事件\nconst handlers: Handlers = {};\n\n// 元素ID\nlet mduiElementId = 1;\n\n/**\n * 为元素赋予一个唯一的ID\n */\nfunction getElementId(element: Element | Document | Window | Function): number {\n  const key = '_mduiEventId';\n\n  // @ts-ignore\n  if (!element[key]) {\n    // @ts-ignore\n    element[key] = ++mduiElementId;\n  }\n\n  // @ts-ignore\n  return element[key];\n}\n\n/**\n * 解析事件名中的命名空间\n */\nfunction parse(type: string): { type: string; ns: string } {\n  const parts = type.split('.');\n\n  return {\n    type: parts[0],\n    ns: parts\n      .slice(1)\n      .sort()\n      .join(' '),\n  };\n}\n\n/**\n * 命名空间匹配规则\n */\nfunction matcherFor(ns: string): RegExp {\n  return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)');\n}\n\n/**\n * 获取匹配的事件\n * @param element\n * @param type\n * @param func\n * @param selector\n */\nfunction getHandlers(\n  element: Element | Document | Window,\n  type: string,\n  func?: Function,\n  selector?: string,\n): Handler[] {\n  const event = parse(type);\n\n  return (handlers[getElementId(element)] || []).filter(\n    handler =>\n      handler &&\n      (!event.type || handler.type === event.type) &&\n      (!event.ns || matcherFor(event.ns).test(handler.ns)) &&\n      (!func || getElementId(handler.func) === getElementId(func)) &&\n      (!selector || handler.selector === selector),\n  );\n}\n\n/**\n * 添加事件监听\n * @param element\n * @param types\n * @param func\n * @param data\n * @param selector\n */\nfunction add(\n  element: Element | Document | Window,\n  types: string,\n  func: Function,\n  data?: any,\n  selector?: string,\n): void {\n  const elementId = getElementId(element);\n\n  if (!handlers[elementId]) {\n    handlers[elementId] = [];\n  }\n\n  // 传入 data.useCapture 来设置 useCapture: true\n  let useCapture = false;\n  if (isObjectLike(data) && data.useCapture) {\n    useCapture = true;\n  }\n\n  types.split(' ').forEach(type => {\n    if (!type) {\n      return;\n    }\n\n    const event = parse(type);\n\n    function callFn(e: Event, elem: Element | Document | Window): void {\n      // 因为鼠标事件模拟事件的 detail 属性是只读的，因此在 e._detail 中存储参数\n      const result = func.apply(\n        elem,\n        // @ts-ignore\n        e._detail === undefined ? [e] : [e].concat(e._detail),\n      );\n\n      if (result === false) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    }\n\n    function proxyFn(e: Event): void {\n      // @ts-ignore\n      if (e._ns && !matcherFor(e._ns).test(event.ns)) {\n        return;\n      }\n\n      // @ts-ignore\n      e._data = data;\n\n      if (selector) {\n        // 事件代理\n        $(element)\n          .find(selector)\n          .get()\n          .reverse()\n          .forEach(elem => {\n            if (\n              elem === e.target ||\n              contains(elem as HTMLElement, e.target as HTMLElement)\n            ) {\n              callFn(e, elem);\n            }\n          });\n      } else {\n        // 不使用事件代理\n        callFn(e, element);\n      }\n    }\n\n    const handler: Handler = {\n      type: event.type,\n      ns: event.ns,\n      func,\n      selector,\n      id: handlers[elementId].length,\n      proxy: proxyFn,\n    };\n\n    handlers[elementId].push(handler);\n\n    element.addEventListener(handler.type, proxyFn, useCapture);\n  });\n}\n\n/**\n * 移除事件监听\n * @param element\n * @param types\n * @param func\n * @param selector\n */\nfunction remove(\n  element: Element | Document | Window,\n  types?: string,\n  func?: Function,\n  selector?: string,\n): void {\n  const handlersInElement = handlers[getElementId(element)] || [];\n  const removeEvent = (handler: Handler): void => {\n    delete handlersInElement[handler.id];\n    element.removeEventListener(handler.type, handler.proxy, false);\n  };\n\n  if (!types) {\n    handlersInElement.forEach(handler => removeEvent(handler));\n  } else {\n    types.split(' ').forEach(type => {\n      if (type) {\n        getHandlers(element, type, func, selector).forEach(handler =>\n          removeEvent(handler),\n        );\n      }\n    });\n  }\n}\n\nexport { EventCallback, parse, add, remove };\n","import each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { isUndefined } from '../utils';\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @param object4 该对象的属性将合并到第一个参数\n * @param object5 该对象的属性将合并到第一个参数\n * @param object6 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n  { key6: value6 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n  key6: value6,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject,\n  X extends PlainObject,\n  Y extends PlainObject,\n  Z extends PlainObject\n>(\n  target: T,\n  object1: U,\n  object2: V,\n  object3: W,\n  object4: X,\n  object5: Y,\n  object6: Z,\n): T & U & V & W & X & Y & Z;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @param object4 该对象的属性将合并到第一个参数\n * @param object5 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject,\n  X extends PlainObject,\n  Y extends PlainObject\n>(\n  target: T,\n  object1: U,\n  object2: V,\n  object3: W,\n  object4: X,\n  object5: Y,\n): T & U & V & W & X & Y;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @param object4 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject,\n  X extends PlainObject\n>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject\n>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject\n>(target: T, object1: U, object2: V): T & U & V;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n}\n```\n */\nfunction extend<T extends PlainObject, U extends PlainObject>(\n  target: T,\n  object1: U,\n): T & U;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param objectN 额外的对象，这些对象的属性将合并到第一个对象\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n */\nfunction extend(\n  target: PlainObject,\n  object1: PlainObject,\n  ...objectN: PlainObject[]\n): PlainObject;\n\nfunction extend(\n  target: PlainObject,\n  object1: PlainObject,\n  ...objectN: PlainObject[]\n): PlainObject {\n  objectN.unshift(object1);\n\n  each(objectN, (_, object) => {\n    each(object, (prop, value) => {\n      if (!isUndefined(value)) {\n        target[prop] = value;\n      }\n    });\n  });\n\n  return target;\n}\n\nexport default extend;\n","import PlainObject from '../interfaces/PlainObject';\nimport { isObjectLike } from '../utils';\nimport each from './each';\n\n/**\n * 将数组或对象序列化，序列化后的字符串可作为 URL 查询字符串使用\n *\n * 若传入数组，则格式必须和 serializeArray 方法的返回值一样\n * @param obj 对象或数组\n * @example\n```js\nparam({ width: 1680, height: 1050 });\n// width=1680&height=1050\n```\n * @example\n```js\nparam({ foo: { one: 1, two: 2 }})\n// foo[one]=1&foo[two]=2\n```\n * @example\n```js\nparam({ids: [1, 2, 3]})\n// ids[]=1&ids[]=2&ids[]=3\n```\n * @example\n```js\nparam([\n  {\"name\":\"name\",\"value\":\"mdui\"},\n  {\"name\":\"password\",\"value\":\"123456\"}\n])\n// name=mdui&password=123456\n```\n */\nfunction param(obj: any[] | PlainObject): string {\n  if (!isObjectLike(obj) && !Array.isArray(obj)) {\n    return '';\n  }\n\n  const args: any[] = [];\n\n  function destructure(key: any, value: any): void {\n    let keyTmp;\n\n    if (isObjectLike(value)) {\n      each(value, (i, v) => {\n        if (Array.isArray(value) && !isObjectLike(v)) {\n          keyTmp = '';\n        } else {\n          keyTmp = i;\n        }\n\n        destructure(`${key}[${keyTmp}]`, v);\n      });\n    } else {\n      if (value == null || value === '') {\n        keyTmp = '=';\n      } else {\n        keyTmp = `=${encodeURIComponent(value)}`;\n      }\n\n      args.push(encodeURIComponent(key) + keyTmp);\n    }\n  }\n\n  if (Array.isArray(obj)) {\n    each(obj, function() {\n      destructure(this.name, this.value);\n    });\n  } else {\n    each(obj, destructure);\n  }\n\n  return args.join('&');\n}\n\nexport default param;\n","import $ from '../$';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport './each';\nimport { parse } from './utils/event';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 触发指定的事件\n     * @param type 事件名\n     * @param extraParameters 传给事件处理函数的额外参数\n     * @example ````触发 .box 元素上的 click 事件\n```js\n$('.box').trigger('click');\n```\n     * @example ````触发 .box 元素上的 click 事件，并给事件处理函数传入额外参数\n```js\n$('.box').trigger('click', {key1: 'value1', key2: 'value2'});\n```\n     */\n    trigger(\n      type: string,\n      extraParameters?: any[] | PlainObject | string | number | boolean,\n    ): this;\n  }\n}\n\n$.fn.trigger = function(this: JQ, type: string, extraParameters: any): JQ {\n  type EventParams = {\n    detail?: any;\n    bubbles: boolean;\n    cancelable: boolean;\n  };\n\n  const event = parse(type);\n  let eventObject: MouseEvent | CustomEvent;\n  const eventParams: EventParams = {\n    bubbles: true,\n    cancelable: true,\n  };\n  const isMouseEvent =\n    ['click', 'mousedown', 'mouseup', 'mousemove'].indexOf(event.type) > -1;\n\n  if (isMouseEvent) {\n    // Note: MouseEvent 无法传入 detail 参数\n    eventObject = new MouseEvent(event.type, eventParams);\n  } else {\n    eventParams.detail = extraParameters;\n    eventObject = new CustomEvent(event.type, eventParams);\n  }\n\n  // @ts-ignore\n  eventObject._detail = extraParameters;\n\n  // @ts-ignore\n  eventObject._ns = event.ns;\n\n  return this.each(function() {\n    this.dispatchEvent(eventObject);\n  });\n};\n","import AjaxOptions from '../../interfaces/AjaxOptions';\nimport { EventName } from '../../types/JQAjax';\n\ntype AjaxEventsInterface = { [name: string]: EventName };\n\n// 全局配置参数\nconst globalOptions: AjaxOptions = {};\n\n// 全局事件名\nconst ajaxEvents: AjaxEventsInterface = {\n  ajaxStart: 'start.mdui.ajax',\n  ajaxSuccess: 'success.mdui.ajax',\n  ajaxError: 'error.mdui.ajax',\n  ajaxComplete: 'complete.mdui.ajax',\n};\n\nexport { globalOptions, ajaxEvents };\n","import $ from '../$';\nimport AjaxOptions from '../interfaces/AjaxOptions';\nimport '../methods/trigger';\nimport {\n  CallbackName,\n  ErrorCallback,\n  ErrorTextStatus,\n  EventName,\n  StatusCodeCallbacks,\n  SuccessCallback,\n  SuccessTextStatus,\n  TextStatus,\n} from '../types/JQAjax';\nimport { isString, isUndefined } from '../utils';\nimport each from './each';\nimport extend from './extend';\nimport param from './param';\nimport { ajaxEvents, globalOptions } from './utils/ajax';\n\ninterface EventParams {\n  data?: string;\n  xhr?: XMLHttpRequest;\n  options?: AjaxOptions;\n}\n\n/**\n * 判断此请求方法是否通过查询字符串提交参数\n * @param method 请求方法，大写\n */\nfunction isQueryStringData(method: string): boolean {\n  return ['GET', 'HEAD'].indexOf(method) >= 0;\n}\n\n/**\n * 添加参数到 URL 上，且 URL 中不存在 ? 时，自动把第一个 & 替换为 ?\n * @param url\n * @param query\n */\nfunction appendQuery(url: string, query: string): string {\n  return `${url}&${query}`.replace(/[&?]{1,2}/, '?');\n}\n\n/**\n * 合并请求参数，参数优先级：options > globalOptions > defaults\n * @param options\n */\nfunction mergeOptions(options: AjaxOptions): AjaxOptions {\n  // 默认参数\n  const defaults: AjaxOptions = {\n    url: '',\n    method: 'GET',\n    data: '',\n    processData: true,\n    async: true,\n    cache: true,\n    username: '',\n    password: '',\n    headers: {},\n    xhrFields: {},\n    statusCode: {},\n    dataType: 'text',\n    contentType: 'application/x-www-form-urlencoded',\n    timeout: 0,\n    global: true,\n  };\n\n  // globalOptions 中的回调函数不合并\n  each(globalOptions, (key, value) => {\n    const callbacks: (CallbackName | 'statusCode')[] = [\n      'beforeSend',\n      'success',\n      'error',\n      'complete',\n      'statusCode',\n    ];\n\n    // @ts-ignore\n    if (callbacks.indexOf(key) < 0 && !isUndefined(value)) {\n      defaults[key] = value;\n    }\n  });\n\n  return extend({}, defaults, options);\n}\n\n/**\n * 发送 ajax 请求\n * @param options\n * @example\n```js\najax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n}).then(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n```\n */\nfunction ajax(options: AjaxOptions): Promise<any> {\n  // 是否已取消请求\n  let isCanceled = false;\n\n  // 事件参数\n  const eventParams: EventParams = {};\n\n  // 参数合并\n  const mergedOptions = mergeOptions(options);\n\n  let url = mergedOptions.url! || window.location.toString();\n  const method = mergedOptions.method!.toUpperCase();\n  let data = mergedOptions.data!;\n  const processData = mergedOptions.processData!;\n  const async = mergedOptions.async!;\n  const cache = mergedOptions.cache!;\n  const username = mergedOptions.username!;\n  const password = mergedOptions.password!;\n  const headers = mergedOptions.headers!;\n  const xhrFields = mergedOptions.xhrFields!;\n  const statusCode = mergedOptions.statusCode!;\n  const dataType = mergedOptions.dataType!;\n  const contentType = mergedOptions.contentType!;\n  const timeout = mergedOptions.timeout!;\n  const global = mergedOptions.global!;\n\n  // 需要发送的数据\n  // GET/HEAD 请求和 processData 为 true 时，转换为查询字符串格式，特殊格式不转换\n  if (\n    data &&\n    (isQueryStringData(method) || processData) &&\n    !isString(data) &&\n    !(data instanceof ArrayBuffer) &&\n    !(data instanceof Blob) &&\n    !(data instanceof Document) &&\n    !(data instanceof FormData)\n  ) {\n    data = param(data);\n  }\n\n  // 对于 GET、HEAD 类型的请求，把 data 数据添加到 URL 中\n  if (data && isQueryStringData(method)) {\n    // 查询字符串拼接到 URL 中\n    url = appendQuery(url, data);\n    data = null;\n  }\n\n  /**\n   * 触发事件和回调函数\n   * @param event\n   * @param params\n   * @param callback\n   * @param args\n   */\n  function trigger(\n    event: EventName,\n    params: EventParams,\n    callback: CallbackName,\n    ...args: any[]\n  ): void {\n    // 触发全局事件\n    if (global) {\n      $(document).trigger(event, params);\n    }\n\n    // 触发 ajax 回调和事件\n    let result1;\n    let result2;\n\n    if (callback) {\n      // 全局回调\n      if (callback in globalOptions) {\n        // @ts-ignore\n        result1 = globalOptions[callback](...args);\n      }\n\n      // 自定义回调\n      if (mergedOptions[callback]) {\n        // @ts-ignore\n        result2 = mergedOptions[callback](...args);\n      }\n\n      // beforeSend 回调返回 false 时取消 ajax 请求\n      if (\n        callback === 'beforeSend' &&\n        (result1 === false || result2 === false)\n      ) {\n        isCanceled = true;\n      }\n    }\n  }\n\n  // XMLHttpRequest 请求\n  function XHR(): Promise<any> {\n    let textStatus: TextStatus;\n\n    return new Promise((resolve, reject): void => {\n      // GET/HEAD 请求的缓存处理\n      if (isQueryStringData(method) && !cache) {\n        url = appendQuery(url, `_=${Date.now()}`);\n      }\n\n      // 创建 XHR\n      const xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, async, username, password);\n\n      if (\n        contentType ||\n        (data && !isQueryStringData(method) && contentType !== false)\n      ) {\n        xhr.setRequestHeader('Content-Type', contentType);\n      }\n\n      // 设置 Accept\n      if (dataType === 'json') {\n        xhr.setRequestHeader('Accept', 'application/json, text/javascript');\n      }\n\n      // 添加 headers\n      if (headers) {\n        each(headers, (key: string, value) => {\n          // undefined 值不发送，string 和 null 需要发送\n          if (!isUndefined(value)) {\n            xhr.setRequestHeader(key, value + ''); // 把 null 转换成字符串\n          }\n        });\n      }\n\n      // 检查是否是跨域请求，跨域请求时不添加 X-Requested-With\n      const crossDomain =\n        /^([\\w-]+:)?\\/\\/([^/]+)/.test(url) &&\n        RegExp.$2 !== window.location.host;\n\n      if (!crossDomain) {\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      }\n\n      if (xhrFields) {\n        each(xhrFields, (key, value) => {\n          // @ts-ignore\n          xhr[key] = value;\n        });\n      }\n\n      eventParams.xhr = xhr;\n      eventParams.options = mergedOptions;\n\n      let xhrTimeout: any;\n\n      xhr.onload = function(): void {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        // AJAX 返回的 HTTP 响应码是否表示成功\n        const isHttpStatusSuccess =\n          (xhr.status >= 200 && xhr.status < 300) ||\n          xhr.status === 304 ||\n          xhr.status === 0;\n\n        let responseData: any;\n\n        if (isHttpStatusSuccess) {\n          if (xhr.status === 204 || method === 'HEAD') {\n            textStatus = 'nocontent';\n          } else if (xhr.status === 304) {\n            textStatus = 'notmodified';\n          } else {\n            textStatus = 'success';\n          }\n\n          if (dataType === 'json') {\n            try {\n              responseData =\n                method === 'HEAD' ? undefined : JSON.parse(xhr.responseText);\n              eventParams.data = responseData;\n            } catch (err) {\n              textStatus = 'parsererror';\n\n              trigger(\n                ajaxEvents.ajaxError,\n                eventParams,\n                'error',\n                xhr,\n                textStatus,\n              );\n\n              reject(new Error(textStatus));\n            }\n\n            if (textStatus !== 'parsererror') {\n              trigger(\n                ajaxEvents.ajaxSuccess,\n                eventParams,\n                'success',\n                responseData,\n                textStatus,\n                xhr,\n              );\n\n              resolve(responseData);\n            }\n          } else {\n            responseData =\n              method === 'HEAD'\n                ? undefined\n                : xhr.responseType === 'text' || xhr.responseType === ''\n                ? xhr.responseText\n                : xhr.response;\n            eventParams.data = responseData;\n\n            trigger(\n              ajaxEvents.ajaxSuccess,\n              eventParams,\n              'success',\n              responseData,\n              textStatus,\n              xhr,\n            );\n\n            resolve(responseData);\n          }\n        } else {\n          textStatus = 'error';\n\n          trigger(ajaxEvents.ajaxError, eventParams, 'error', xhr, textStatus);\n\n          reject(new Error(textStatus));\n        }\n\n        // statusCode\n        each(\n          [globalOptions.statusCode!, statusCode],\n          (_, func: StatusCodeCallbacks) => {\n            if (func && func[xhr.status]) {\n              if (isHttpStatusSuccess) {\n                (func[xhr.status] as SuccessCallback)(\n                  responseData,\n                  textStatus as SuccessTextStatus,\n                  xhr,\n                );\n              } else {\n                (func[xhr.status] as ErrorCallback)(\n                  xhr,\n                  textStatus as ErrorTextStatus,\n                );\n              }\n            }\n          },\n        );\n\n        trigger(\n          ajaxEvents.ajaxComplete,\n          eventParams,\n          'complete',\n          xhr,\n          textStatus,\n        );\n      };\n\n      xhr.onerror = function(): void {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        trigger(\n          ajaxEvents.ajaxError,\n          eventParams,\n          'error',\n          xhr,\n          xhr.statusText,\n        );\n        trigger(ajaxEvents.ajaxComplete, eventParams, 'complete', xhr, 'error');\n\n        reject(new Error(xhr.statusText));\n      };\n\n      xhr.onabort = function(): void {\n        let statusText: ErrorTextStatus = 'abort';\n\n        if (xhrTimeout) {\n          statusText = 'timeout';\n          clearTimeout(xhrTimeout);\n        }\n\n        trigger(ajaxEvents.ajaxError, eventParams, 'error', xhr, statusText);\n        trigger(\n          ajaxEvents.ajaxComplete,\n          eventParams,\n          'complete',\n          xhr,\n          statusText,\n        );\n\n        reject(new Error(statusText));\n      };\n\n      // ajax start 回调\n      trigger(ajaxEvents.ajaxStart, eventParams, 'beforeSend', xhr);\n\n      if (isCanceled) {\n        reject(new Error('cancel'));\n\n        return;\n      }\n\n      // Timeout\n      if (timeout > 0) {\n        xhrTimeout = setTimeout(() => {\n          xhr.abort();\n        }, timeout);\n      }\n\n      // 发送 XHR\n      xhr.send(data);\n    });\n  }\n\n  return XHR();\n}\n\nexport default ajax;\n","import $ from '../$';\nimport ajax from '../functions/ajax';\nimport AjaxOptions from '../interfaces/AjaxOptions';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 发送 ajax 请求\n     * @param options\n     * @example\n```js\najax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n}).then(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n```\n     */\n    ajax(options: AjaxOptions): Promise<any>;\n  }\n}\n\n$.ajax = ajax;\n","import $ from '../$';\nimport ajaxSetup from '../functions/ajaxSetup';\nimport AjaxOptions from '../interfaces/AjaxOptions';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 为 Ajax 请求设置全局配置参数\n     * @param options 键值对参数\n     * @example\n```js\n$.ajaxSetup({\n  dataType: 'json',\n  method: 'POST',\n});\n```\n     */\n    ajaxSetup(options: AjaxOptions): AjaxOptions;\n  }\n}\n\n$.ajaxSetup = ajaxSetup;\n","import extend from '../functions/extend';\nimport AjaxOptions from '../interfaces/AjaxOptions';\nimport { globalOptions } from './utils/ajax';\n\n/**\n * 为 Ajax 请求设置全局配置参数\n * @param options 键值对参数\n * @example\n```js\najaxSetup({\n  dataType: 'json',\n  method: 'POST',\n});\n```\n */\nfunction ajaxSetup(options: AjaxOptions): AjaxOptions {\n  return extend(globalOptions, options);\n}\n\nexport default ajaxSetup;\n","import $ from '../$';\nimport contains from '../functions/contains';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 检查 container 元素内是否包含 contains 元素\n     * @param container 父元素\n     * @param contains 子元素\n     * @example\n```js\n$.contains( document, document.body ); // true\n$.contains( document.getElementById('test'), document ); // false\n$.contains( $('.container').get(0), $('.contains').get(0) ); // false\n```\n     */\n    contains(\n      container: Element | Document | null,\n      contains: Element | Document | null,\n    ): boolean;\n  }\n}\n\n$.contains = contains;\n","const dataNS = '_mduiElementDataStorage';\n\nexport default dataNS;\n","import PlainObject from '../interfaces/PlainObject';\nimport { isObjectLike, isUndefined, toCamelCase } from '../utils';\nimport each from './each';\nimport dataNS from './utils/data';\n\n/**\n * 在元素上设置键值对数据\n * @param element\n * @param object\n */\nfunction setObjectToElement(\n  element: Element | Document | Window,\n  object: PlainObject,\n): void {\n  // @ts-ignore\n  if (!element[dataNS]) {\n    // @ts-ignore\n    element[dataNS] = {};\n  }\n\n  each(object, (key, value) => {\n    // @ts-ignore\n    element[dataNS][toCamelCase(key)] = value;\n  });\n}\n\n/**\n * `value` 为 `undefined` 时，相当于 `data(element, key)`，即获取指定元素上存储的数据\n *\n * Note: 该方法不检索 `data-*` 属性\n *\n * @param element 用于存储数据的元素\n * @param key 数据键名\n * @param value `undefined`\n * @example\n```js\ndata(document.body, 'type', undefined)\n```\n */\nfunction data(\n  element: Element | Document | Window,\n  key: string,\n  value: undefined,\n): any;\n\n/**\n * 在指定元素上存储数据，返回存储的值。\n * @param element 用于存储数据的元素\n * @param key 数据键名\n * @param value 数据值\n * @example\n```js\ndata(document.body, 'type', 'image')\n// 'image'\n```\n */\nfunction data<T>(\n  element: Element | Document | Window,\n  key: string,\n  value: T,\n): T;\n\n/**\n * 获取在指定元素上存储的数据\n *\n * Note: 该方法不检索 `data-*` 属性\n *\n * @param element 用于存储数据的元素\n * @param key 数据键名\n * @example\n```js\ndata(document.body, 'key')\n```\n */\nfunction data(element: Element | Document | Window, key: string): any;\n\n/**\n * 获取指定元素上存储的所有数据\n *\n * Note: 该方法不检索 `data-*` 属性\n *\n * @param element 用于存储数据的元素\n * @example\n```js\ndata(document.body)\n// { 'type': 'image', 'width': 1020, 'height': 680 }\n```\n */\nfunction data(element: Element | Document | Window): PlainObject;\n\n/**\n * 在指定元素上存储数据，返回存储的键值对数据\n * @param element 用于存储数据的元素\n * @param data 键值对数据\n * @example\n```js\ndata(document.body, { 'width': 1020, 'height': 680 })\n// { 'width': 1020, 'height': 680 }\n```\n */\nfunction data<T extends PlainObject>(\n  element: Element | Document | Window,\n  data: T,\n): T;\n\nfunction data(\n  element: Element | Document | Window,\n  key?: string | PlainObject,\n  value?: any,\n): any {\n  // 根据键值对设置值\n  // data(element, { 'key' : 'value' })\n  if (isObjectLike(key)) {\n    setObjectToElement(element, key);\n\n    return key;\n  }\n\n  // 根据 key、value 设置值\n  // data(element, 'key', 'value')\n  if (!isUndefined(value)) {\n    setObjectToElement(element, { [key as string]: value });\n\n    return value;\n  }\n\n  // 获取所有值\n  // data(element)\n  if (isUndefined(key)) {\n    // @ts-ignore\n    return element[dataNS] ? element[dataNS] : {};\n  }\n\n  // 从 dataNS 中获取指定值\n  // data(element, 'key')\n  key = toCamelCase(key);\n  // @ts-ignore\n  if (element[dataNS] && key in element[dataNS]) {\n    // @ts-ignore\n    return element[dataNS][key];\n  }\n\n  return undefined;\n}\n\nexport default data;\n","import PlainObject from '../interfaces/PlainObject';\nimport each from './each';\n\n/**\n * 遍历数组，通过函数返回值生成一个新数组\n *\n * @param array 被遍历的数组\n * @param callback 处理每个元素的回调函数\n *\n * 函数的第一个参数是数组值，第二个参数是数组索引，`this` 指向 `window` 对象\n *\n * 函数可以返回任何值，若返回数组，则会被展开；若返回 `null` 或 `undefined`，则不会被放入新生成的数组中\n * @example\n```js\n// 数组的每个元素都 +4\nmap([0, 1, 2], function(value){\n  return value + 4;\n});\n// [4, 5, 6]\n```\n * @example\n```js\n// 移除小于 2 的值\nmap([0, 1, 2, 3], function(value){\n  return value >= 2 ? value : null;\n});\n// [2, 3]\n```\n * @example\n```js\n// 返回数组时，展开\nmap([1, 2, 3], function(value, index){\n    return [index, value];\n});\n// [0, 1, 1, 2, 2, 3]\n```\n */\nfunction map<T, TReturn>(\n  array: ArrayLike<T>,\n  callback: (\n    this: Window,\n    value: T,\n    index: number,\n  ) => TReturn | TReturn[] | null | undefined,\n): TReturn[];\n\n/**\n * 循环对象，通过函数返回值生成一个新数组\n *\n * @param obj 被遍历的对象\n * @param callback 处理每个元素的回调函数\n *\n * 函数的第一个参数为对象值，第二个参数为对象键，`this` 指向 `window` 对象\n *\n * 函数可以返回任何值，若返回数组，则会被展开；若返回 `null` 或 `undefined`，则不会被放入新生成的数组中\n * @example\n```js\n// 值 +2\nmap({ width: 1, height: 2 }, function(value, key){\n  return value + 2;\n});\n// [3, 4]\n```\n * @example\n```js\n// 获取键名组成的数组\nmap({ width: 1, height: 2 }, function(value, key){\n  return key;\n});\n// ['width', 'height']\n```\n * @example\n```js\n// 返回数组时，展开\nmap({ width: 1, height: 2 }, function(value, key){\n  return [key, value];\n});\n// ['width', 1, 'height', 2]\n```\n */\nfunction map<T extends PlainObject, K extends keyof T, TReturn>(\n  obj: T,\n  callback: (\n    this: Window,\n    value: T[K],\n    key: K,\n  ) => TReturn | TReturn[] | null | undefined,\n): TReturn[];\n\nfunction map(elements: any, callback: Function): any {\n  let value;\n  const ret: any[] = [];\n\n  each(elements, (i, element) => {\n    value = callback.call(window, element, i);\n\n    if (value != null) {\n      ret.push(value);\n    }\n  });\n\n  return [].concat(...ret);\n}\n\nexport default map;\n","import each from '../functions/each';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { isUndefined, isString, toCamelCase } from '../utils';\nimport dataNS from './utils/data';\n\n/**\n * 移除指定元素上存放的数据\n * @param element 存放数据的元素\n * @param name\n * 数据键名\n *\n * 若未指定键名，将移除元素上所有数据\n *\n * 多个键名可以用空格分隔，或者用数组表示多个键名\n  @example\n```js\n// 移除元素上键名为 name 的数据\nremoveData(document.body, 'name');\n```\n * @example\n```js\n// 移除元素上键名为 name1 和 name2 的数据\nremoveData(document.body, 'name1 name2');\n```\n * @example\n```js\n// 移除元素上键名为 name1 和 name2 的数据\nremoveData(document.body, ['name1', 'name2']);\n```\n * @example\n```js\n// 移除元素上所有数据\nremoveData(document.body);\n```\n */\nfunction removeData(\n  element: Element | Document | Window,\n  name?: TypeOrArray<string>,\n): void {\n  // @ts-ignore\n  if (!element[dataNS]) {\n    return;\n  }\n\n  const remove = (nameItem: string): void => {\n    nameItem = toCamelCase(nameItem);\n\n    // @ts-ignore\n    if (element[dataNS][nameItem]) {\n      // @ts-ignore\n      element[dataNS][nameItem] = null;\n      // @ts-ignore\n      delete element[dataNS][nameItem];\n    }\n  };\n\n  if (isUndefined(name)) {\n    // @ts-ignore\n    element[dataNS] = null;\n    // @ts-ignore\n    delete element[dataNS];\n    // @ts-ignore\n  } else if (isString(name)) {\n    name\n      .split(' ')\n      .filter(nameItem => nameItem)\n      .forEach(nameItem => remove(nameItem));\n  } else {\n    each(name, (_, nameItem) => remove(nameItem));\n  }\n}\n\nexport default removeData;\n","import each from './each';\n\n/**\n * 过滤掉数组中的重复元素\n * @param arr 数组\n * @example\n```js\nunique([1, 2, 12, 3, 2, 1, 2, 1, 1]);\n// [1, 2, 12, 3]\n```\n */\nfunction unique(arr: any[]): any[] {\n  const result: any[] = [];\n\n  each(arr, (_, val) => {\n    if (result.indexOf(val) === -1) {\n      result.push(val);\n    }\n  });\n\n  return result;\n}\n\nexport default unique;\n","import $ from '../../$';\nimport unique from '../../functions/unique';\nimport { JQ } from '../../JQ';\nimport { isElement } from '../../utils';\nimport '../each';\nimport '../is';\n\nexport default function dir(\n  $elements: JQ,\n  nameIndex: number,\n  node: 'parentNode' | 'nextElementSibling' | 'previousElementSibling',\n  selector?: any,\n  filter?: string,\n): JQ {\n  const ret: Element[] = [];\n  let target;\n\n  $elements.each((_, element) => {\n    target = element[node];\n\n    // 不能包含最顶层的 document 元素\n    while (target && isElement(target)) {\n      // prevUntil, nextUntil, parentsUntil\n      if (nameIndex === 2) {\n        if (selector && $(target).is(selector)) {\n          break;\n        }\n\n        if (!filter || $(target).is(filter)) {\n          ret.push(target);\n        }\n      }\n\n      // prev, next, parent\n      else if (nameIndex === 0) {\n        if (!selector || $(target).is(selector)) {\n          ret.push(target);\n        }\n\n        break;\n      }\n\n      // prevAll, nextAll, parents\n      else {\n        if (!selector || $(target).is(selector)) {\n          ret.push(target);\n        }\n      }\n\n      // @ts-ignore\n      target = target[node];\n    }\n  });\n\n  return new JQ(unique(ret));\n}\n","import $ from '../$';\nimport data from '../functions/data';\nimport PlainObject from '../interfaces/PlainObject';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * `value` 为 `undefined` 时，相当于 `$.data(element, key)`，即获取指定元素上存储的数据\n     *\n     * Note: 该方法不检索 `data-*` 属性\n     *\n     * @param element 用于存储数据的元素\n     * @param key 数据键名\n     * @param value `undefined`\n     * @example\n```js\ndata(document.body, 'type', undefined)\n```\n     */\n    data(\n      element: Element | Document | Window,\n      key: string,\n      value: undefined,\n    ): any;\n\n    /**\n     * 在指定元素上存储数据，返回存储的值\n     * @param element 用于存储数据的元素\n     * @param key 数据键名\n     * @param value 数据值\n     * @example\n```js\ndata(document.body, 'type', 'image')\n// 'image'\n```\n     */\n    data<T>(element: Element | Document | Window, key: string, value: T): T;\n\n    /**\n     * 获取在指定元素上存储的数据\n     *\n     * Note: 该方法不检索 `data-*` 属性\n     *\n     * @param element 用于存储数据的元素\n     * @param key 数据键名\n     * @example\n```js\ndata(document.body, 'key')\n```\n     */\n    data(element: Element | Document | Window, key: string): any;\n\n    /**\n     * 获取指定元素上存储的所有数据\n     *\n     * Note: 该方法不检索 data-* 属性\n     *\n     * @param element 用于存储数据的元素\n     * @example\n```js\ndata(document.body)\n// { 'type': 'image', 'width': 1020, 'height': 680 }\n```\n     */\n    data(element: Element | Document | Window): PlainObject;\n\n    /**\n     * 在指定元素上存储数据，返回存储的键值对数据\n     * @param element 用于存储数据的元素\n     * @param data 键值对数据\n     * @example\n```js\ndata(document.body, { 'width': 1020, 'height': 680 })\n// { 'width': 1020, 'height': 680 }\n```\n     */\n    data<T extends PlainObject>(\n      element: Element | Document | Window,\n      data: T,\n    ): T;\n  }\n}\n\n$.data = data;\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 遍历数组，原样返回第一个参数\n     *\n     * @param array 需要遍历的数组\n     * @param callback 为数组中每个元素执行的回调函数\n     *\n     * 函数的第一个参数为数组的索引，第二个参数为对应的索引的值，`this` 也指向该值\n     *\n     * 函数返回 `false` 时，停止遍历\n     * @example\n```js\n$.each( [ \"a\", \"b\", \"c\" ], function( index, value ){\n  alert( \"Index #\" + index + \": \" + value );\n});\n```\n     */\n    each<T>(\n      array: ArrayLike<T>,\n      callback: (this: T, index: number, value: T) => any | false,\n    ): ArrayLike<T>;\n\n    /**\n     * 遍历对象，原样返回第一个参数\n     *\n     * @param obj 需要遍历的对象\n     * @param callback 为对象中每个元素执行的回调函数\n     *\n     * 函数的第一个参数为对象的键名，第二个参数为对应的键值，`this` 也指向该值\n     *\n     * 函数返回 `false` 时，停止遍历\n     * @example\n```js\n$.each({ name: \"John\", lang: \"JS\" }, function( key, value ) {\n  alert( \"Key: \" + key + \", Value: \" + value );\n});\n```\n     */\n    each<T extends PlainObject, K extends keyof T>(\n      obj: T,\n      callback: (this: T[K], key: K, value: T[K]) => any | false,\n    ): T;\n  }\n}\n\n$.each = each;\n","import $ from '../$';\nimport each from '../functions/each';\nimport extend from '../functions/extend';\nimport PlainObject from '../interfaces/PlainObject';\n\n/**\n * 比 ../functions/extend 函数多了一个 extend<T>(target: T): this & T 的用法\n */\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @param object4 该对象的属性将合并到第一个参数\n     * @param object5 该对象的属性将合并到第一个参数\n     * @param object6 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n  { key6: value6 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n  key6: value6,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject,\n      X extends PlainObject,\n      Y extends PlainObject,\n      Z extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n      object4: X,\n      object5: Y,\n      object6: Z,\n    ): T & U & V & W & X & Y & Z;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @param object4 该对象的属性将合并到第一个参数\n     * @param object5 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject,\n      X extends PlainObject,\n      Y extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n      object4: X,\n      object5: Y,\n    ): T & U & V & W & X & Y;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @param object4 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject,\n      X extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n      object4: X,\n    ): T & U & V & W & X;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n    ): T & U & V & W;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n     */\n    extend<T extends PlainObject, U extends PlainObject, V extends PlainObject>(\n      target: T,\n      object1: U,\n      object2: V,\n    ): T & U & V;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n}\n```\n     */\n    extend<T extends PlainObject, U extends PlainObject>(\n      target: T,\n      object1: U,\n    ): T & U;\n\n    /**\n     * 将对象属性扩展到 $ 命名空间中\n     * @param target 该对象的属性将扩展到 $ 命名空间中\n     * @example\n```js\n$.extend({\n  customFunc: function () {}\n})\n\n// 然后就可以这样调用自定义方法了\n$.customFunc()\n```\n     */\n    extend<T extends PlainObject>(target: T): this & T;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param objectN 额外的对象，这些对象的属性将合并到第一个对象\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n     */\n    extend(\n      target: PlainObject,\n      object1: PlainObject,\n      ...objectN: PlainObject[]\n    ): PlainObject;\n  }\n}\n\n$.extend = function(...objectN: PlainObject[]): any {\n  if (objectN.length === 1) {\n    each(objectN[0], (prop, value) => {\n      this[prop] = value;\n    });\n\n    return this;\n  }\n\n  return extend(\n    objectN.shift() as PlainObject,\n    objectN.shift() as PlainObject,\n    ...objectN,\n  );\n};\n","import $ from '../$';\nimport map from '../functions/map';\nimport PlainObject from '../interfaces/PlainObject';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 遍历数组，通过函数返回值生成一个新数组\n     *\n     * @param array 被遍历的数组\n     * @param callback 处理每个元素的回调函数\n     *\n     * 第一个参数是数组值，第二个参数是数组索引，`this` 指向 `window` 对象\n     *\n     * 函数可以返回任何值，若返回数组，则会被展开；若返回 `null` 或 `undefined`，则不会被放入新生成的数组中\n     * @example\n```js\n// 数组的每个元素都 +4\nmap([0, 1, 2], function(value){\n  return value + 4;\n});\n// [4, 5, 6]\n```\n     * @example\n```js\n// 移除小于 2 的值\nmap([0, 1, 2, 3], function(value){\n  return value >= 2 ? value : null;\n});\n// [2, 3]\n```\n     * @example\n```js\n// 返回数组时，展开\nmap([1, 2, 3], function(value, index){\n    return [index, value];\n});\n// [0, 1, 1, 2, 2, 3]\n```\n     */\n    map<T, TReturn>(\n      array: ArrayLike<T>,\n      callback: (\n        this: Window,\n        value: T,\n        index: number,\n      ) => TReturn | TReturn[] | null | undefined,\n    ): TReturn[];\n\n    /**\n     * 循环对象，通过函数返回值生成一个新数组\n     *\n     * @param obj 被遍历的对象\n     * @param callback 处理每个元素的回调函数\n     *\n     * 第一个参数为对象值，第二个参数为对象键，`this` 指向 `window` 对象\n     *\n     * 函数可以返回任何值，若返回数组，则会被展开；若返回 `null` 或 `undefined`，则不会被放入新生成的数组中\n     * @example\n```js\n// 值 +2\nmap({ width: 1, height: 2 }, function(value, key){\n  return value + 2;\n});\n// [3, 4]\n```\n     * @example\n```js\n// 获取键名组成的数组\nmap({ width: 1, height: 2 }, function(value, key){\n  return key;\n});\n// ['width', 'height']\n```\n     * @example\n```js\n// 返回数组时，展开\nmap({ width: 1, height: 2 }, function(value, key){\n  return [key, value];\n});\n// ['width', 1, 'height', 2]\n```\n     */\n    map<T extends PlainObject, K extends keyof T, TReturn>(\n      obj: T,\n      callback: (\n        this: Window,\n        value: T[K],\n        key: K,\n      ) => TReturn | TReturn[] | null | undefined,\n    ): TReturn[];\n  }\n}\n\n$.map = map;\n","import $ from '../$';\nimport merge from '../functions/merge';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 把第二个数组的元素追加到第一个数组中，并返回合并后的数组\n     * @param first 第一个数组\n     * @param second 该数组的元素将被追加到第一个数组中\n     * @example\n```js\n$.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )\n// [ 0, 1, 2, 2, 3, 4 ]\n```\n     */\n    merge<T, U>(first: T[], second: U[]): Array<T | U>;\n  }\n}\n\n$.merge = merge;\n","import $ from '../$';\nimport param from '../functions/param';\nimport PlainObject from '../interfaces/PlainObject';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 将数组或对象序列化，序列化后的字符串可作为 URL 查询字符串使用\n     *\n     * 若传入数组，则格式必须和 serializeArray 方法的返回值一样\n     * @param obj 对象或数组\n     * @example\n```js\nparam({ width: 1680, height: 1050 });\n// width=1680&height=1050\n```\n     * @example\n```js\nparam({ foo: { one: 1, two: 2 }})\n// foo[one]=1&foo[two]=2\n```\n     * @example\n```js\nparam({ids: [1, 2, 3]})\n// ids[]=1&ids[]=2&ids[]=3\n```\n     * @example\n```js\nparam([\n  {\"name\":\"name\",\"value\":\"mdui\"},\n  {\"name\":\"password\",\"value\":\"123456\"}\n])\n// name=mdui&password=123456\n```\n */\n    param(obj: any[] | PlainObject): string;\n  }\n}\n\n$.param = param;\n","import $ from '../$';\nimport removeData from '../functions/removeData';\nimport TypeOrArray from '../types/TypeOrArray';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 移除指定元素上存放的数据\n     * @param element 存放数据的元素\n     * @param name\n     * 数据键名\n     *\n     * 若未指定键名，将移除元素上所有数据\n     *\n     * 多个键名可以用空格分隔，或者用数组表示多个键名\n     * @example\n```js\n// 移除元素上键名为 name 的数据\n$.removeData(document.body, 'name');\n```\n     * @example\n```js\n// 移除元素上键名为 name1 和 name2 的数据\n$.removeData(document.body, 'name1 name2');\n```\n     * @example\n```js\n// 移除元素上键名为 name1 和 name2 的数据\n$.removeData(document.body, ['name1', 'name2']);\n```\n     * @example\n```js\n// 移除元素上所有数据\n$.removeData(document.body);\n```\n     */\n    removeData(\n      element: Element | Document | Window,\n      name?: TypeOrArray<string>,\n    ): void;\n  }\n}\n\n$.removeData = removeData;\n","import $ from '../$';\nimport unique from '../functions/unique';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 过滤掉数组中的重复元素\n     * @param arr 数组\n     * @example\n```js\nunique([1, 2, 12, 3, 2, 1, 2, 1, 1]);\n// [1, 2, 12, 3]\n```\n     */\n    unique(arr: any[]): any[];\n  }\n}\n\n$.unique = unique;\n","import $ from '../$';\nimport merge from '../functions/merge';\nimport unique from '../functions/unique';\nimport { JQ } from '../JQ';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './get';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 添加元素到当前 JQ 对象中\n     * @param selector 可以是 HTML 字符串、CSS 选择器、JQ 对象、DOM 元素、DOM 元素数组、NodeList 等\n     * @example\n```js\n// 把含 .selected 的元素添加到当前 JQ 对象中\n$('.box').add('.selected');\n```\n     */\n    add(selector: string | TypeOrArray<Element> | JQ | null): this;\n  }\n}\n\n$.fn.add = function(this: JQ, selector: any): JQ {\n  return new JQ(unique(merge(this.get(), $(selector).get())));\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport { isElement, isFunction } from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在当前元素上添加 CSS 类\n     * @param className\n     * CSS 类名的字符串，多个类名可以用空格分隔\n     *\n     * 也可以是一个返回 CSS 类名的回调函数。回调函数的第一个参数为元素的索引位置，第二个参数为旧的 CSS 类名，`this` 指向当前元素\n     * @example\n```js\n// 在 p 元素上加上 item 类\n$('p').addClass('item')\n```\n     * @example\n```js\n// 在 p 元素上加上 item1 和 item2 两个类\n$('p').addClass('item1 item2')\n```\n     * @example\n```js\n// 在 p 元素上添加由回调函数返回的类\n$('p').addClass(function (index, currentClassName) {\n  return currentClassName + '-' + index;\n});\n```\n     */\n    addClass(\n      className:\n        | string\n        | ((this: T, index: number, currentClassName: string) => string),\n    ): this;\n  }\n}\n\ntype classListMethod = 'add' | 'remove' | 'toggle';\n\neach(['add', 'remove', 'toggle'], (_, name: classListMethod) => {\n  $.fn[`${name}Class`] = function(\n    this: JQ,\n    className:\n      | string\n      | ((this: any, index: number, currentClassName: string) => string),\n  ): JQ {\n    if (name === 'remove' && !arguments.length) {\n      return this.each((_, element) => {\n        element.setAttribute('class', '');\n      });\n    }\n\n    return this.each((i, element) => {\n      if (!isElement(element)) {\n        return;\n      }\n\n      const classes = (isFunction(className)\n        ? className.call(element, i, element.getAttribute('class') || '')\n        : className\n      )\n        .split(' ')\n        .filter(name => name);\n\n      each(classes, (_, cls) => {\n        element.classList[name](cls);\n      });\n    });\n  };\n});\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { isFunction, isString } from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 如果集合中至少一个元素和参数匹配，则返回 `true`，否则返回 `false`\n     * @param selector\n     * 可以是 CSS 选择器、DOM 元素、DOM 元素数组、JQ 对象、或回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置、第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 若回调函数返回 `true`，则表示和当前元素匹配；若返回 `false`，表示和当前元素不匹配\n     * @example\n```js\n$('.box').is('.box') // true\n$('.box').is('.boxss'); // false\n```\n     */\n    is(\n      selector:\n        | Selector\n        | TypeOrArray<Element>\n        | JQ\n        | ((this: T, index: number, element: T) => boolean),\n    ): boolean;\n  }\n}\n\n$.fn.is = function(this: JQ, selector: any): boolean {\n  let isMatched = false;\n\n  if (isFunction(selector)) {\n    this.each((index, element) => {\n      if (selector.call(element, index, element)) {\n        isMatched = true;\n      }\n    });\n\n    return isMatched;\n  }\n\n  if (isString(selector)) {\n    this.each((_, element) => {\n      // @ts-ignore\n      const matches = element.matches || element.msMatchesSelector;\n\n      if (matches.call(element, selector)) {\n        isMatched = true;\n      }\n    });\n\n    return isMatched;\n  }\n\n  const $compareWith = $(selector);\n\n  this.each((_, element) => {\n    $compareWith.each((_, compare) => {\n      if (element === compare) {\n        isMatched = true;\n      }\n    });\n  });\n\n  return isMatched;\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './each';\nimport './is';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 从 DOM 中移除当前集合中的元素\n     * @param selector CSS 选择器。若指定了该参数，则仅移除当前集合中和该参数匹配的元素\n     * @example\n```js\n// 移除所有 p 元素\n$('p').remove()\n```\n     * @example\n```js\n// 移除所有含 .box 的 p 元素\n$('p').remove('.box')\n```\n     */\n    remove(selector?: Selector): this;\n  }\n}\n\n$.fn.remove = function(this: JQ, selector?: Selector): JQ {\n  return this.each((_, element) => {\n    if (element.parentNode && (!selector || $(element).is(selector))) {\n      element.parentNode.removeChild(element);\n    }\n  });\n};\n","import $ from '../$';\nimport data from '../functions/data';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './each';\nimport './remove';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 把当前集合中的元素插入到指定元素的前面，作为目标元素的兄弟元素\n     *\n     * 如果当前集合中的元素是页面中已有的元素，则将移动该元素，而不是复制\n     *\n     * 如果有多个目标元素，则将克隆当前集合中的元素，并添加到每个目标元素的前面\n     * @param target 可以是 CSS 选择器、HTML 字符串、DOM 元素、DOM 元素数组、JQ 对象\n     * @returns 由新插入的元素组成的集合\n     * @example\n```js\n$('<p>I would like to say: </p>').insertBefore('<b>Hello</b>');\n// <p>I would like to say: </p><b>Hello</b>\n```\n     */\n    insertBefore(\n      target: Selector | HTMLString | TypeOrArray<Node> | JQ<Node>,\n    ): this;\n  }\n}\n\neach(['insertBefore', 'insertAfter'], (nameIndex, name) => {\n  $.fn[name] = function(this: JQ, target: any): JQ {\n    const $element = nameIndex ? $(this.get().reverse()) : this; // 顺序和 jQuery 保持一致\n    const result: HTMLElement[] = [];\n\n    $(target).each((_, target) => {\n      if (!target.parentNode) {\n        return;\n      }\n\n      $element.each((_, element) => {\n        const newItem = element.cloneNode(true) as HTMLElement;\n        const existingItem = nameIndex ? target.nextSibling : target;\n\n        // 通过 .data() 设置的数据需要保留\n        data(newItem, data(element));\n\n        // todo: 事件也需要保留\n\n        result.push(newItem as HTMLElement);\n        target.parentNode.insertBefore(newItem, existingItem);\n      });\n    });\n\n    $element.remove();\n\n    return $(nameIndex ? result.reverse() : result);\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { getChildNodesArray, isFunction, isString } from '../utils';\nimport './each';\nimport './insertAfter';\nimport './insertBefore';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在当前元素前面插入指定内容，作为其兄弟节点。支持传入多个参数。\n     * @param contents HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象\n     * @returns 原始集合\n     * @example\n```js\n$('<p>I would like to say: </p>').before('<b>Hello</b>')\n// <b>Hello</b><p>I would like to say: </p>\n```\n     * @example\n```js\n$('<p>I would like to say: </p>').before('<b>Hello</b>', '<b>World</b>')\n// <b>Hello</b><b>World</b><p>I would like to say: </p>\n```\n     */\n    before(...contents: Array<HTMLString | TypeOrArray<Node> | JQ<Node>>): this;\n\n    /**\n     * 在当前元素前面插入指定内容，作为其兄弟节点\n     * @param callback\n     * 一个返回 HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象的回调函数\n     *\n     * 函数的第一个参数为元素的索引位置，第二个参数为元素的旧的 HTML 值，`this` 指向当前元素\n     * @returns 原始集合\n     * @example\n```js\n$('<p>Hello</p>').before(function (index, html) {\n  return '<b>' + html + index + '</b>';\n});\n// <b>Hello0</b><p>Hello</p>\n```\n     */\n    before(\n      callback: (\n        this: T,\n        index: number,\n        oldHtml: string,\n      ) => HTMLString | TypeOrArray<Node> | JQ<Node>,\n    ): this;\n  }\n}\n\n/**\n * 是否不是 HTML 字符串（包裹在 <> 中）\n * @param target\n */\nfunction isPlainText(target: string): boolean {\n  return (\n    isString(target) && (target[0] !== '<' || target[target.length - 1] !== '>')\n  );\n}\n\neach(['before', 'after'], (nameIndex, name) => {\n  $.fn[name] = function(this: JQ, ...args: any[]): JQ {\n    // after 方法，多个参数需要按参数顺序添加到元素后面，所以需要将参数顺序反向处理\n    if (nameIndex === 1) {\n      args = args.reverse();\n    }\n\n    return this.each((index, element) => {\n      const targets = isFunction(args[0])\n        ? [args[0].call(element, index, element.innerHTML)]\n        : args;\n\n      each(targets, (_, target) => {\n        const $target = $(\n          isPlainText(target) ? getChildNodesArray(target, 'div') : target,\n        );\n\n        $target[nameIndex ? 'insertAfter' : 'insertBefore'](element);\n      });\n    });\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport { isFunction, isObjectLike, returnFalse } from '../utils';\nimport './each';\nimport { EventCallback, remove } from './utils/event';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 解除通过事件委托绑定的指定事件\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔，如 `click`, `click dbclick`\n     *\n     * 事件名中可以包含命名空间，或者只包含命名空间，如 `keydown.myPlugin`, `.myPlugin`。\n     * @param selector CSS 选择器\n     * @param callback 事件处理函数\n     * @example\n```js\n$(document).off('click', '.box', functionName);\n```\n     * @example\n```js\n$(document).off('click dbclick', '.box', functionName);\n```\n     * @example\n```js\n$(document).off('click', '.box');\n```\n     * @example\n```js\n$(document).off('click dbclick', '.box');\n```\n     */\n    off(\n      eventName: string,\n      selector: string,\n      callback?: EventCallback | false,\n    ): this;\n\n    /**\n     * 解除绑定的指定事件\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔，如 `click`, `click dbclick`\n     *\n     * 事件名中可以包含命名空间，或者只包含命名空间，如 `keydown.myPlugin`, `.myPlugin`。\n     * @param callback 事件处理函数\n     * @example\n```js\n$('.box').off('click', functionName);\n```\n     * @example\n```js\n$('.box').off('click dbclick', functionName);\n```\n     * @example\n```js\n$('.box').off('click');\n```\n     * @example\n```js\n$('.box').off('click dbclick');\n```\n     */\n    off(eventName: string, callback?: EventCallback | false): this;\n\n    /**\n     * 同时移除多个事件处理函数\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param selector CSS 选择器\n     * @example\n```js\n$('.wrapper').off({\n  'click': functionName,\n  'dbclick': functionName,\n}, '.box')\n```\n     * @example\n```js\n$('.wrapper').off({\n  'click': functionName,\n  'dbclick': functionName,\n})\n```\n     */\n    off(events: PlainObject<EventCallback | false>, selector?: string): this;\n\n    /**\n     * 删除所有绑定的事件处理函数\n     * @example\n```js\n$('.wrapper').off();\n```\n     */\n    off(): this;\n  }\n}\n\n$.fn.off = function(\n  this: JQ,\n  types?: PlainObject<EventCallback | false> | string,\n  selector?: any,\n  callback?: any,\n): any {\n  // types 是对象\n  if (isObjectLike(types)) {\n    each(types, (type: string, fn: EventCallback | false) => {\n      // this.off('click', undefined, function () {})\n      // this.off('click', '.box', function () {})\n      this.off(type, selector, fn);\n    });\n\n    return this;\n  }\n\n  // selector 不存在\n  if (selector === false || isFunction(selector)) {\n    callback = selector;\n    selector = undefined;\n    // this.off('click', undefined, function () {})\n  }\n\n  // callback 传入 `false`，相当于 `return false`\n  if (callback === false) {\n    callback = returnFalse;\n  }\n\n  return this.each(function() {\n    remove(this, types, callback, selector);\n  });\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport { isObjectLike, isString, returnFalse } from '../utils';\nimport './each';\nimport './off';\nimport { EventCallback, add } from './utils/event';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 通过事件委托同时添加多个事件处理函数\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param selector CSS 选择器\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     */\n    on(\n      events: PlainObject<EventCallback | false>,\n      selector: string | null | undefined,\n      data?: any,\n    ): this;\n\n    /**\n     * 同时添加多个事件处理函数\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     */\n    on(events: PlainObject<EventCallback | false>, data?: any): this;\n\n    /**\n     * 通过事件委托添加事件处理函数，并传入参数\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param selector CSS 选择器\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     * @param callback 事件处理函数\n     */\n    on(\n      eventName: string,\n      selector: string | null | undefined,\n      data: any,\n      callback: EventCallback | false,\n    ): this;\n\n    /**\n     * 通过事件委托添加事件处理函数\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param selector CSS 选择器\n     * @param callback 事件处理函数\n     */\n    on(\n      eventName: string,\n      selector: string,\n      callback: EventCallback | false,\n    ): this;\n\n    /**\n     * 添加事件处理函数，并传入参数\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param data 事件触发时，传递给事件处理函数的数据\n     * @param callback 事件处理函数\n     */\n    on(eventName: string, data: any, callback: EventCallback | false): this;\n\n    /**\n     * 添加事件处理函数\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param callback 事件处理函数\n     */\n    on(eventName: string, callback: EventCallback | false): this;\n  }\n}\n\n$.fn.on = function(\n  this: JQ,\n  types: PlainObject<EventCallback | false> | string,\n  selector: any,\n  data?: any,\n  callback?: any,\n  one?: boolean, // 是否是 one 方法，只在 JQ 内部使用\n): JQ {\n  // types 可以是 type/func 对象\n  if (isObjectLike(types)) {\n    // (types-Object, selector, data)\n    if (!isString(selector)) {\n      // (types-Object, data)\n      data = data || selector;\n      selector = undefined;\n    }\n\n    each(types, (type: string, fn: EventCallback | false) => {\n      // selector 和 data 都可能是 undefined\n      // @ts-ignore\n      this.on(type, selector, data, fn, one);\n    });\n\n    return this;\n  }\n\n  if (data == null && callback == null) {\n    // (types, fn)\n    callback = selector;\n    data = selector = undefined;\n  } else if (callback == null) {\n    if (isString(selector)) {\n      // (types, selector, fn)\n      callback = data;\n      data = undefined;\n    } else {\n      // (types, data, fn)\n      callback = data;\n      data = selector;\n      selector = undefined;\n    }\n  }\n\n  if (callback === false) {\n    callback = returnFalse;\n  } else if (!callback) {\n    return this;\n  }\n\n  // $().one()\n  if (one) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const _this = this;\n    const origCallback: Function = callback;\n\n    callback = function(this: Element | Document | Window, event: Event): void {\n      _this.off(event.type, selector, callback);\n\n      // eslint-disable-next-line prefer-rest-params\n      return origCallback.apply(this, arguments);\n    };\n  }\n\n  return this.each(function() {\n    add(this, types, callback, data, selector);\n  });\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { ajaxEvents } from '../functions/utils/ajax';\nimport { JQ } from '../JQ';\nimport { GlobalCallback, GlobalSuccessCallback } from '../types/JQAjax';\nimport './on';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 监听全局 Ajax 开始事件\n     * 通过 $(document).on('start.mdui.ajax', function (event, params) {}) 调用时，包含两个参数\n     * event: 事件对象\n     * params: {\n     *   xhr: XMLHttpRequest 对象\n     *   options: ajax 请求的配置参数\n     * }\n     * @param handler\n     * @example\n```js\n$(document).ajaxStart(function (event, xhr, options) {});\n```\n     */\n    ajaxStart(handler: GlobalCallback): this;\n  }\n}\n\neach(ajaxEvents, (name, eventName) => {\n  $.fn[name] = function(\n    this: JQ,\n    fn: GlobalCallback | GlobalSuccessCallback,\n  ): any {\n    return this.on(eventName, (e, params) => {\n      fn(e, params.xhr, params.options, params.data);\n    });\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { isFunction } from '../utils';\nimport './after';\nimport './before';\nimport './each';\nimport './remove';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在当前元素内部的后面插入指定内容。支持传入多个参数\n     * @param contents HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象\n     * @returns 原始集合\n     * @example\n```js\n$('<p>I would like to say: </p>').append('<b>Hello</b>');\n// <p>I would like to say: <b>Hello</b></p>\n```\n     * @example\n```js\n$('<p>I would like to say: </p>').append('<b>Hello</b>', '<b>World</b>');\n// <p>I would like to say: <b>Hello</b><b>World</b></p>\n```\n     */\n    append(...contents: Array<HTMLString | TypeOrArray<Node> | JQ<Node>>): this;\n\n    /**\n     * 在当前元素内部的后面插入指定内容\n     * @param callback\n     * 一个返回 HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象的回调函数\n     *\n     * 函数的第一个参数为元素的索引位置，第二个参数为元素的旧的 HTML 值，`this` 指向当前元素\n     * @returns 原始集合\n     * @example\n```js\n$('<p>Hello</p>').append(function (index, html) {\n  return '<b>' + html + index + '</b>';\n});\n// <p>Hello<b>Hello0</b></p>\n```\n     */\n    append(\n      callback: (\n        this: T,\n        index: number,\n        oldHTML: string,\n      ) => HTMLString | TypeOrArray<Node> | JQ<Node>,\n    ): this;\n  }\n}\n\neach(['prepend', 'append'], (nameIndex, name) => {\n  $.fn[name] = function(this: JQ, ...args: any[]): JQ {\n    return this.each((index, element) => {\n      const childNodes = element.childNodes;\n      const childLength = childNodes.length;\n\n      const child = childLength\n        ? childNodes[nameIndex ? childLength - 1 : 0]\n        : document.createElement('div');\n\n      if (!childLength) {\n        element.appendChild(child);\n      }\n\n      const contents = isFunction(args[0])\n        ? [args[0].call(element, index, element.innerHTML)]\n        : args;\n\n      $(child)[nameIndex ? 'after' : 'before'](...contents);\n\n      if (!childLength) {\n        element.removeChild(child);\n      }\n    });\n  };\n});\n","import $ from '../$';\nimport map from '../functions/map';\nimport { JQ } from '../JQ';\nimport TypeOrArray from '../types/TypeOrArray';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 为当前集合中的每个元素都调用一个函数，生成一个包含函数返回值的新的集合\n     * @param callback\n     * 执行的回调函数\n     *\n     * 函数的第一个参数为元素的索引位置，第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 函数可以返回单个数据或数据数组。若返回数组，则会将数组中的元素依次添加到新集合中\n     *\n     * 若函数返回 `null` 或 `undefined`，则不会添加到新集合中\n     * @example\n```js\nconst result = $('input.checked').map(function (i, element) {\n  return element.value;\n});\n```\n     */\n    map<TReturn>(\n      callback: (\n        this: T,\n        index: number,\n        element: T,\n      ) => TypeOrArray<TReturn> | null | undefined,\n    ): JQ<TReturn>;\n  }\n}\n\n$.fn.map = function(\n  this: JQ<any>,\n  callback: (this: any, index: number, element: any) => null | undefined | any,\n): JQ {\n  return new JQ(map(this, (element, i) => callback.call(element, i, element)));\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './insertAfter';\nimport './insertBefore';\nimport './map';\nimport './remove';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 把当前元素追加到指定元素内部的后面\n     * @param target CSS 选择器、HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象\n     * @returns 由新插入的元素组成的集合\n     * @example\n```js\n$('<p>Hello</p>').appendTo('<p>I would like to say: </p>')\n// <p>I would like to say: <p>Hello</p></p>\n```\n     */\n    appendTo(target: Selector | HTMLString | TypeOrArray<Element> | JQ): this;\n  }\n}\n\neach(['appendTo', 'prependTo'], (nameIndex, name) => {\n  $.fn[name] = function(this: JQ, target: any): JQ {\n    const extraChilds: HTMLElement[] = [];\n    const $target = $(target).map((_, element: HTMLElement) => {\n      const childNodes = element.childNodes;\n      const childLength = childNodes.length;\n\n      if (childLength) {\n        return childNodes[nameIndex ? 0 : childLength - 1];\n      }\n\n      const child = document.createElement('div');\n      element.appendChild(child);\n      extraChilds.push(child);\n\n      return child;\n    });\n\n    const $result = this[nameIndex ? 'insertBefore' : 'insertAfter']($target);\n\n    $(extraChilds).remove();\n\n    return $result;\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport {\n  cssNumber,\n  getStyle,\n  isElement,\n  isFunction,\n  isNull,\n  isNumber,\n  isObjectLike,\n  isUndefined,\n  toCamelCase,\n} from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 设置元素的属性\n     * @param name 属性名\n     * @param value\n     * 属性值，可以为字符串或数值。\n     *\n     * 也可以是一个返回字符串或数值的回调函数。函数的第一个参数为元素的索引位置，第二个参数为旧的属性值，`this` 指向当前元素\n     *\n     * 若属性值或函数返回 `null`，则删除指定属性\n     *\n     * 若属性值或函数返回 `void` 或 `undefined`，则不修改当前属性\n     * @example\n```js\n$('div').attr('title', 'mdui');\n```\n     * @example\n```js\n$('img').attr('src', function() {\n  return '/resources/' + this.title;\n});\n```\n     */\n    attr(\n      name: string,\n      value:\n        | string\n        | number\n        | null\n        | undefined\n        | ((\n            this: T,\n            index: number,\n            oldAttrValue: string,\n          ) => string | number | null | void | undefined),\n    ): this;\n\n    /**\n     * 同时设置多个属性\n     * @param attributes\n     * 键值对数据。键名为属性名，键值为属性值或回调函数。\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为旧的属性值，`this` 指向当前元素\n     *\n     * 若属性值或函数返回 `null`，则删除指定属性\n     *\n     * 若属性值或函数返回 `void` 或 `undefined`，则不修改对应属性\n     * @example\n```js\n$('img').attr({\n  src: '/resources/hat.gif',\n  title: 'mdui',\n  alt: 'mdui Logo'\n});\n```\n     @example\n```js\n$('img').attr({\n  src: function () {\n    return '/resources/' + this.title;\n  },\n  title: 'mdui',\n  alt: 'mdui Logo'\n});\n```\n     */\n    attr(\n      attributes: PlainObject<\n        | string\n        | number\n        | null\n        | undefined\n        | ((\n            this: T,\n            index: number,\n            oldAttrValue: string,\n          ) => string | number | null | void | undefined)\n      >,\n    ): this;\n\n    /**\n     * 获取集合中第一个元素的属性值\n     * @param name 属性名\n     * @example\n```js\n$('div').attr('title');\n```\n     */\n    attr(name: string): string | undefined;\n  }\n}\n\neach(['attr', 'prop', 'css'], (nameIndex, name) => {\n  function set(element: HTMLElement, key: string, value: any): void {\n    // 值为 undefined 时，不修改\n    if (isUndefined(value)) {\n      return;\n    }\n\n    switch (nameIndex) {\n      // attr\n      case 0:\n        if (isNull(value)) {\n          element.removeAttribute(key);\n        } else {\n          element.setAttribute(key, value);\n        }\n        break;\n\n      // prop\n      case 1:\n        // @ts-ignore\n        element[key] = value;\n        break;\n\n      // css\n      default:\n        key = toCamelCase(key);\n\n        // @ts-ignore\n        element.style[key] = isNumber(value)\n          ? `${value}${cssNumber.indexOf(key) > -1 ? '' : 'px'}`\n          : value;\n        break;\n    }\n  }\n\n  function get(element: HTMLElement, key: string): any {\n    switch (nameIndex) {\n      // attr\n      case 0:\n        // 属性不存在时，原生 getAttribute 方法返回 null，而 jquery 返回 undefined。这里和 jquery 保持一致\n        const value = element.getAttribute(key);\n        return isNull(value) ? undefined : value;\n\n      // prop\n      case 1:\n        // @ts-ignore\n        return element[key];\n\n      // css\n      default:\n        return getStyle(element, key);\n    }\n  }\n\n  $.fn[name] = function(this: JQ, key: string | PlainObject, value?: any): any {\n    if (isObjectLike(key)) {\n      each(key, (k, v) => {\n        // @ts-ignore\n        this[name](k, v);\n      });\n\n      return this;\n    }\n\n    if (arguments.length === 1) {\n      const element = this[0];\n\n      return isElement(element) ? get(element, key) : undefined;\n    }\n\n    return this.each((i, element) => {\n      set(\n        element,\n        key,\n        isFunction(value) ? value.call(element, i, get(element, key)) : value,\n      );\n    });\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport unique from '../functions/unique';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport { isElement } from '../utils';\nimport './each';\nimport './is';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前元素的直接子元素\n     * @param selector CSS 选择器。若指定了该参数，则使用该参数对子元素进行过滤\n     * @example\n```js\n// 找到 #box 的所有直接子元素\n$('#box').children()\n```\n     * @example\n```js\n// 找到 #box 的所有直接子元素中，包含 .box 的元素集合\n$('#box').children('.box')\n```\n     */\n    children(selector?: Selector): this;\n  }\n}\n\n$.fn.children = function(this: JQ, selector?: Selector): JQ {\n  const children: Element[] = [];\n\n  this.each((_, element) => {\n    each(element.childNodes, (__, childNode) => {\n      if (!isElement(childNode)) {\n        return;\n      }\n\n      if (!selector || $(childNode).is(selector)) {\n        children.push(childNode);\n      }\n    });\n  });\n\n  return new JQ(unique(children));\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './map';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 通过深度克隆来复制集合中的所有元素\n     *\n     * 通过原生 cloneNode 方法深度克隆来复制集合中的所有元素。此方法不会有数据和事件处理程序复制到新的元素。这点和jquery中利用一个参数来确定是否复制数据和事件处理不相同。\n     * @example\n```js\n$('body').append($(\"#box\").clone())\n```\n     */\n    clone(): this;\n  }\n}\n\n$.fn.clone = function(this: JQ): JQ {\n  return this.map(function() {\n    return this.cloneNode(true) as HTMLElement;\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回一个当前集合的子集\n     *\n     * 子集为从 start 开始的元素。若指定了 end 参数，则提取从 start 到不包含 end 位置的元素\n     * @param start 从该位置开始\n     * @param end 到该位置结束（不包含该位置）\n     * @example\n```js\n返回集合中第三个（包含第三个）之后的所有元素\n$('div').slice(3);\n```\n     * @example\n```js\n// 返回集合中第三个到第五个（包含第三个，不包含第五个）之间的元素\n$('div').slice(3, 5);\n```\n     */\n    slice(start: number, end?: number): this;\n  }\n}\n\n$.fn.slice = function(this: JQ, ...args: [number, number?]): JQ {\n  return new JQ([].slice.apply(this, args));\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './slice';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回 JQ 对象中指定索引位置的元素的 JQ 对象\n     * @param index 元素的索引位置\n     * @example\n```js\n// 返回第一个元素的 JQ 对象\n$('div').eq(0);\n```\n     * @example\n```js\n// 返回最后一个元素的 JQ 对象\n$('div').eq(-1);\n```\n     */\n    eq(index: number): this;\n  }\n}\n\n$.fn.eq = function(this: JQ, index: number): JQ {\n  const ret = index === -1 ? this.slice(index) : this.slice(index, +index + 1);\n\n  return new JQ(ret);\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './get';\nimport dir from './utils/dir';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前集合中，所有元素的直接父元素的集合\n     * @param selector CSS 选择器。若指定了该参数，则仅返回与该参数匹配的父元素的集合\n     * @example\n```js\n// 返回 .box 元素的直接父元素的集合\n$('.box').parent()\n```\n     * @example\n```js\n// 返回 .box 元素的直接父元素中含有 .parent 元素的集合\n$('.box').parent('.parent')\n```\n     */\n    parent(selector?: Selector): this;\n  }\n}\n\neach(['', 's', 'sUntil'], (nameIndex, name) => {\n  $.fn[`parent${name}`] = function(\n    this: JQ,\n    selector?: any,\n    filter?: Selector,\n  ): JQ {\n    // parents、parentsUntil 需要把元素的顺序反向处理，以便和 jQuery 的结果一致\n    const $nodes = !nameIndex ? this : $(this.get().reverse());\n\n    return dir($nodes, nameIndex, 'parentNode', selector, filter);\n  };\n});\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './eq';\nimport './is';\nimport './parents';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 从当前元素向上逐级匹配，返回最先匹配到的元素\n     * @param selector CSS 选择器、DOM 元素、或 JQ 对象\n     * @example\n```js\n// 获取 .box 元素的父元素中最近的 .parent 元素\n$('.box').closest('.parent')\n```\n     */\n    closest(selector: Selector | Element | JQ): this;\n  }\n}\n\n$.fn.closest = function(this: JQ, selector: any): JQ {\n  if (this.is(selector)) {\n    return this;\n  }\n\n  const matched: HTMLElement[] = [];\n  this.parents().each((_, element): void | false => {\n    if ($(element).is(selector)) {\n      matched.push(element);\n\n      return false;\n    }\n  });\n\n  return new JQ(matched);\n};\n","import $ from '../$';\nimport data from '../functions/data';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport {\n  isObjectLike,\n  isString,\n  isUndefined,\n  toCamelCase,\n  toKebabCase,\n} from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在当前元素上存储数据\n     *\n     * `value` 为 `undefined` 时，不设置数据，直接返回原对象\n     *\n     * @param key 数据键名\n     * @param value 数据值\n     * @example\n```js\n$('.box').data('type', 'image')\n```\n     */\n    data(key: string, value: any): this;\n\n    /**\n     * 在当前元素上存储数据\n     * @param data 键值对数据\n     * @example\n```js\n$('.box').data({\n  width: 1020,\n  height: 680,\n})\n```\n     */\n    data(data: PlainObject): this;\n\n    /**\n     * 获取在当前元素上存储的数据\n     * @param key 数据键名\n     * @example\n```js\n$('.box').data('height')\n// 680\n```\n     */\n    data(key: string): any;\n\n    /**\n     * 获取在当前元素上存储的所有数据\n     * @example\n```js\n$('.box').data()\n// { 'type': 'image', 'width': 1020, 'height': 680 }\n```\n     */\n    data(): PlainObject;\n  }\n}\n\nconst rbrace = /^(?:{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\n\n// 从 `data-*` 中获取的值，需要经过该函数转换\nfunction getData(value: string): any {\n  if (value === 'true') {\n    return true;\n  }\n\n  if (value === 'false') {\n    return false;\n  }\n\n  if (value === 'null') {\n    return null;\n  }\n\n  if (value === +value + '') {\n    return +value;\n  }\n\n  if (rbrace.test(value)) {\n    return JSON.parse(value);\n  }\n\n  return value;\n}\n\n// 若 value 不存在，则从 `data-*` 中获取值\nfunction dataAttr(element: HTMLElement, key: string, value?: any): any {\n  if (isUndefined(value) && element.nodeType === 1) {\n    const name = 'data-' + toKebabCase(key);\n    value = element.getAttribute(name);\n\n    if (isString(value)) {\n      try {\n        value = getData(value);\n      } catch (e) {}\n    } else {\n      value = undefined;\n    }\n  }\n\n  return value;\n}\n\n$.fn.data = function(this: JQ, key?: string | PlainObject, value?: any): any {\n  // 获取所有值\n  if (isUndefined(key)) {\n    if (!this.length) {\n      return undefined;\n    }\n\n    const element = this[0];\n    const resultData = data(element);\n\n    // window, document 上不存在 `data-*` 属性\n    if (element.nodeType !== 1) {\n      return resultData;\n    }\n\n    // 从 `data-*` 中获取值\n    const attrs = element.attributes;\n    let i = attrs.length;\n    while (i--) {\n      if (attrs[i]) {\n        let name = attrs[i].name;\n        if (name.indexOf('data-') === 0) {\n          name = toCamelCase(name.slice(5));\n          resultData[name] = dataAttr(element, name, resultData[name]);\n        }\n      }\n    }\n\n    return resultData;\n  }\n\n  // 同时设置多个值\n  if (isObjectLike(key)) {\n    return this.each(function() {\n      data(this, key);\n    });\n  }\n\n  // value 传入了 undefined\n  if (arguments.length === 2 && isUndefined(value)) {\n    return this;\n  }\n\n  // 设置值\n  if (!isUndefined(value)) {\n    return this.each(function() {\n      data(this, key as string, value);\n    });\n  }\n\n  // 获取值\n  if (!this.length) {\n    return undefined;\n  }\n\n  return dataAttr(this[0], key, data(this[0], key));\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport {\n  isBoolean,\n  isDocument,\n  isFunction,\n  isWindow,\n  toElement,\n  isBorderBox,\n  getExtraWidth,\n} from '../utils';\nimport './css';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 设置集合中所有元素的宽度（不包含 `padding`, `border`, `margin` 的宽度）\n     * @param value\n     * 可以是带单位的字符串，或者数值；或者是返回带单位的字符串或数值的回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为旧的宽度值，`this` 指向当前元素\n     *\n     * 若该值、或函数返回值是数值，则自动添加 `px` 作为单位\n     *\n     * 若该值、或函数返回值是 `null` 或 `undefined`，则不修改元素的宽度\n     * @example\n```js\n$('.box').width('20%');\n```\n     * @example\n```js\n$('.box').width(10);\n```\n     */\n    width(\n      value:\n        | string\n        | number\n        | null\n        | undefined\n        | ((\n            this: T,\n            index: number,\n            oldValue: number,\n          ) => string | number | null | undefined | void),\n    ): this;\n\n    /**\n     * 获取集合中第一个元素的宽度（像素值），不包含 `padding`, `border`, `margin` 的宽度\n     * @example\n```js\n$('.box').width();\n```\n     */\n    width(): number;\n  }\n}\n\ntype typeName = 'Width' | 'Height';\ntype typeFuncIndex = 0 | 1 | 2;\ntype typeExtra = 'margin' | 'padding' | 'border';\n\n/**\n * 值上面的 padding、border、margin 处理\n * @param element\n * @param name\n * @param value\n * @param funcIndex\n * @param includeMargin\n * @param multiply\n */\nfunction handleExtraWidth(\n  element: HTMLElement,\n  name: typeName,\n  value: number,\n  funcIndex: typeFuncIndex,\n  includeMargin: boolean,\n  multiply: number, // 值乘以多少\n): number {\n  // 获取元素的 padding, border, margin 宽度（两侧宽度的和）\n  const getExtraWidthValue = (extra: typeExtra): number => {\n    return (\n      getExtraWidth(element, name.toLowerCase() as 'width' | 'height', extra) *\n      multiply\n    );\n  };\n\n  if (funcIndex === 2 && includeMargin) {\n    value += getExtraWidthValue('margin');\n  }\n\n  if (isBorderBox(element)) {\n    if (funcIndex === 0) {\n      value -= getExtraWidthValue('border');\n    }\n\n    if (funcIndex === 1) {\n      value -= getExtraWidthValue('border');\n      value -= getExtraWidthValue('padding');\n    }\n  } else {\n    if (funcIndex === 0) {\n      value += getExtraWidthValue('padding');\n    }\n\n    if (funcIndex === 2) {\n      value += getExtraWidthValue('border');\n      value += getExtraWidthValue('padding');\n    }\n  }\n\n  return value;\n}\n\n/**\n * 获取元素的样式值\n * @param element\n * @param name\n * @param funcIndex 0: innerWidth, innerHeight; 1: width, height; 2: outerWidth, outerHeight\n * @param includeMargin\n */\nfunction get(\n  element: HTMLElement,\n  name: typeName,\n  funcIndex: typeFuncIndex,\n  includeMargin: boolean,\n): number {\n  const clientProp = `client${name}` as 'clientWidth' | 'clientHeight';\n  const scrollProp = `scroll${name}` as 'scrollWidth' | 'scrollHeight';\n  const offsetProp = `offset${name}` as 'offsetWidth' | 'offsetHeight';\n  const innerProp = `inner${name}` as 'innerWidth' | 'innerHeight';\n\n  // $(window).width()\n  if (isWindow(element)) {\n    // outerWidth, outerHeight 需要包含滚动条的宽度\n    return funcIndex === 2\n      ? element[innerProp]\n      : toElement(document)[clientProp];\n  }\n\n  // $(document).width()\n  if (isDocument(element)) {\n    const doc = toElement(element) as HTMLElement;\n\n    return Math.max(\n      element.body[scrollProp],\n      doc[scrollProp],\n      element.body[offsetProp],\n      doc[offsetProp],\n      doc[clientProp],\n    );\n  }\n\n  const $element = $(element);\n  const value = parseFloat($element.css(name.toLowerCase()) || '0');\n\n  return handleExtraWidth(element, name, value, funcIndex, includeMargin, 1);\n}\n\n/**\n * 设置元素的样式值\n * @param element\n * @param elementIndex\n * @param name\n * @param funcIndex 0: innerWidth, innerHeight; 1: width, height; 2: outerWidth, outerHeight\n * @param includeMargin\n * @param value\n */\nfunction set(\n  element: HTMLElement,\n  elementIndex: number,\n  name: typeName,\n  funcIndex: typeFuncIndex,\n  includeMargin: boolean,\n  value: string | number,\n): void {\n  let computedValue = isFunction(value)\n    ? value.call(\n        element,\n        elementIndex,\n        get(element, name, funcIndex, includeMargin),\n      )\n    : value;\n\n  if (computedValue == null) {\n    return;\n  }\n\n  const $element = $(element);\n  const dimension = name.toLowerCase();\n\n  // 特殊的值，不需要计算 padding、border、margin\n  if (['auto', 'inherit', ''].indexOf(computedValue) > -1) {\n    $element.css(dimension, computedValue);\n    return;\n  }\n\n  // 其他值保留原始单位。注意：如果不使用 px 作为单位，则算出的值一般是不准确的\n  const suffix = computedValue.toString().replace(/\\b[0-9]*/, '');\n  const numerical = parseFloat(computedValue);\n\n  computedValue =\n    handleExtraWidth(element, name, numerical, funcIndex, includeMargin, -1) +\n    (suffix || 'px');\n\n  $element.css(dimension, computedValue);\n}\n\neach(['Width', 'Height'], (_, name: typeName) => {\n  each(\n    [`inner${name}`, name.toLowerCase(), `outer${name}`],\n    (funcIndex: typeFuncIndex, funcName) => {\n      $.fn[funcName] = function(\n        this: JQ,\n        margin?: any,\n        value?: any,\n      ): JQ | number | undefined {\n        // 是否是赋值操作\n        const isSet = arguments.length && (funcIndex < 2 || !isBoolean(margin));\n        const includeMargin = margin === true || value === true;\n\n        // 获取第一个元素的值\n        if (!isSet) {\n          return this.length\n            ? get(this[0], name, funcIndex, includeMargin)\n            : undefined;\n        }\n\n        // 设置每个元素的值\n        return this.each((index, element) =>\n          set(element, index, name, funcIndex, includeMargin, margin),\n        );\n      };\n    },\n  );\n});\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './css';\nimport './eq';\nimport './offset';\nimport './offsetParent';\n\ninterface Coordinates {\n  left: number;\n  top: number;\n}\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取集合中第一个元素相对于父元素的偏移\n     * @example\n```js\n$('.box').position();\n// { top: 20, left: 30 }\n```\n     */\n    position(): Coordinates;\n  }\n}\n\nfunction floatStyle($element: JQ, name: string): number {\n  return parseFloat($element.css(name));\n}\n\n$.fn.position = function(this: JQ): Coordinates | undefined {\n  if (!this.length) {\n    return undefined;\n  }\n\n  const $element = this.eq(0);\n\n  let currentOffset: Coordinates;\n  let parentOffset: Coordinates = {\n    left: 0,\n    top: 0,\n  };\n\n  if ($element.css('position') === 'fixed') {\n    currentOffset = $element[0].getBoundingClientRect();\n  } else {\n    currentOffset = $element.offset();\n\n    const $offsetParent = $element.offsetParent();\n    parentOffset = $offsetParent.offset();\n    parentOffset.top += floatStyle($offsetParent, 'border-top-width');\n    parentOffset.left += floatStyle($offsetParent, 'border-left-width');\n  }\n\n  return {\n    top:\n      currentOffset.top - parentOffset.top - floatStyle($element, 'margin-top'),\n    left:\n      currentOffset.left -\n      parentOffset.left -\n      floatStyle($element, 'margin-left'),\n  };\n};\n","import $ from '../$';\nimport extend from '../functions/extend';\nimport { JQ } from '../JQ';\nimport { isFunction } from '../utils';\nimport './css';\nimport './each';\nimport './position';\n\n/**\n * 获取坐标的返回值，left 和 top 都存在\n */\ninterface CoordinatesValue {\n  left: number;\n  top: number;\n}\n\n/**\n * 设置坐标时，left 和 top 都是可选的\n */\ninterface CoordinatesParam {\n  left?: number;\n  top?: number;\n}\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 设置集合中所有元素相对于 `document` 的坐标\n     * @param value\n     * 包含 `top` 和 `left` 属性的对象；或返回此对象的回调函数。\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为元素的当前坐标，`this`指向当前元素\n     *\n     * `top`, `left` 的值为 `undefined` 时，不修改对应的值。\n     * @example\n```js\n$('.box').offset({ top: 20, left: 30 });\n```\n     * @example\n```js\n$('.box').offset(function () {\n  return { top: 20, left: 30 };\n});\n```\n     */\n    offset(\n      value:\n        | CoordinatesParam\n        | ((\n            this: T,\n            index: number,\n            oldOffset: CoordinatesValue,\n          ) => CoordinatesParam),\n    ): this;\n\n    /**\n     * 获取当前集合中第一个元素相对于 `document` 的坐标\n     * @example\n```js\n$('.box').offset();\n// { top: 20, left: 30 }\n```\n     */\n    offset(): CoordinatesValue;\n  }\n}\n\nfunction get(element: Element): CoordinatesValue {\n  if (!element.getClientRects().length) {\n    return { top: 0, left: 0 };\n  }\n\n  const rect = element.getBoundingClientRect();\n  const win = (element.ownerDocument as Document).defaultView as Window;\n\n  return {\n    top: rect.top + win.pageYOffset,\n    left: rect.left + win.pageXOffset,\n  };\n}\n\nfunction set(element: Element, value: CoordinatesParam, index: number): void {\n  const $element = $(element);\n  const position = $element.css('position');\n\n  if (position === 'static') {\n    $element.css('position', 'relative');\n  }\n\n  const currentOffset = get(element);\n  const currentTopString = $element.css('top');\n  const currentLeftString = $element.css('left');\n  let currentTop: number;\n  let currentLeft: number;\n\n  const calculatePosition =\n    (position === 'absolute' || position === 'fixed') &&\n    (currentTopString + currentLeftString).indexOf('auto') > -1;\n\n  if (calculatePosition) {\n    const currentPosition = $element.position();\n    currentTop = currentPosition.top;\n    currentLeft = currentPosition.left;\n  } else {\n    currentTop = parseFloat(currentTopString);\n    currentLeft = parseFloat(currentLeftString);\n  }\n\n  const computedValue = isFunction(value)\n    ? value.call(element, index, extend({}, currentOffset))\n    : value;\n\n  $element.css({\n    top:\n      computedValue.top != null\n        ? computedValue.top - currentOffset.top + currentTop\n        : undefined,\n    left:\n      computedValue.left != null\n        ? computedValue.left - currentOffset.left + currentLeft\n        : undefined,\n  });\n}\n\n$.fn.offset = function(this: JQ, value?: any): any {\n  // 获取坐标\n  if (!arguments.length) {\n    if (!this.length) {\n      return undefined;\n    }\n\n    return get(this[0]);\n  }\n\n  // 设置坐标\n  return this.each(function(index) {\n    set(this, value, index);\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 移除当前元素中所有的子元素\n     * @example\n```js\n$('.box').empty()\n```\n     */\n    empty(): this;\n  }\n}\n\n$.fn.empty = function(this: JQ): JQ {\n  return this.each(function() {\n    this.innerHTML = '';\n  });\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在 $ 的原型链上扩展方法\n     * @param obj\n     * @example\n```js\n$.fn.extend({\n  customFunc: function () {}\n})\n\n// 然后就可以这样使用扩展的方法了\n$(document).customFunc()\n```\n     */\n    extend(obj: PlainObject): this;\n  }\n}\n\n$.fn.extend = function(this: JQ, obj: PlainObject): JQ {\n  each(obj, (prop, value) => {\n    // 在 JQ 对象上扩展方法时，需要自己添加 typescript 的类型定义\n    $.fn[prop] = value;\n  });\n\n  return this;\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { isFunction, isString } from '../utils';\nimport './is';\nimport './map';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 从当前对象中筛选出与指定表达式匹配的元素\n     * @param selector\n     * 可以是 CSS 表达式、DOM 元素、DOM 元素数组、或回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 回调函数返回 `true` 时，对应元素会被保留；返回 `false` 时，对应元素会被移除\n     * @example\n```js\n// 筛选出所有含 .box 的 div 元素\n$('div').filter('.box');\n```\n     * @example\n```js\n// 筛选出所有已选中的元素\n$('#select option').filter(function (idx, element) {\n  return element.selected;\n});\n```\n     */\n    filter(\n      selector:\n        | Selector\n        | TypeOrArray<Element>\n        | JQ\n        | ((this: T, index: number, element: T) => boolean),\n    ): this;\n  }\n}\n\n$.fn.filter = function(this: JQ, selector: any): JQ {\n  if (isFunction(selector)) {\n    return this.map((index, element) =>\n      selector.call(element, index, element) ? element : undefined,\n    );\n  }\n\n  if (isString(selector)) {\n    return this.map((_, element) =>\n      $(element).is(selector) ? element : undefined,\n    );\n  }\n\n  const $selector = $(selector);\n\n  return this.map((_, element) =>\n    $selector.get().indexOf(element) > -1 ? element : undefined,\n  );\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './eq';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回当前集合中第一个元素的 JQ 对象\n     * @example\n```js\n$('div').first()\n```\n     */\n    first(): this;\n  }\n}\n\n$.fn.first = function(this: JQ): JQ {\n  return this.eq(0);\n};\n","import $ from '../$';\nimport contains from '../functions/contains';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport { isString } from '../utils';\nimport './find';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 保留含有指定子元素的元素，去掉不含有指定子元素的元素\n     * @param selector CSS 选择器或 DOM 元素\n     * @example\n```js\n// 给含有 ul 的 li 加上背景色\n$('li').has('ul').css('background-color', 'red');\n```\n     */\n    has(selector: Selector | Element): this;\n  }\n}\n\n$.fn.has = function(this: JQ, selector: Selector | Element): JQ {\n  const $targets = isString(selector) ? this.find(selector) : $(selector);\n  const { length } = $targets;\n\n  return this.map(function() {\n    for (let i = 0; i < length; i += 1) {\n      if (contains(this, $targets[i])) {\n        return this;\n      }\n    }\n\n    return;\n  });\n};\n","import $ from '../$';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 是否含有指定的 CSS 类\n     * @param className CSS 类名\n     * @example\n```js\n$('div').hasClass('item')\n```\n     */\n    hasClass(className: string): boolean;\n  }\n}\n\n$.fn.hasClass = function(className: string): boolean {\n  return this[0].classList.contains(className);\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 隐藏集合中所有元素\n     * @example\n```js\n$('.box').hide();\n```\n     */\n    hide(): this;\n  }\n}\n\n$.fn.hide = function(this: JQ): JQ {\n  return this.each(function() {\n    this.style.display = 'none';\n  });\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport map from '../functions/map';\nimport { JQ } from '../JQ';\nimport { isElement, isFunction, isUndefined, toElement } from '../utils';\nimport './each';\nimport './is';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 设置集合中每个元素的值\n     * @param value\n     * 元素的值。可以是字符串、数值、字符串数组、或回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为元素旧的值，`this` 指向当前元素\n     *\n     * 若元素为 `<input type=\"checkbox\">`、`<input type=\"radio\">`、`<option>`，则元素值、或函数返回值可以为数组，此时将选中值在数组中的元素，并取消选中值不在数组中的元素\n     *\n     * 若元素值、或函数返回值为 `undefined`，则会将元素值设为空\n     * @example\n```js\n$('#input').val('input value')\n```\n     */\n    val(\n      value:\n        | string\n        | number\n        | string[]\n        | undefined\n        | ((\n            this: T,\n            inDex: number,\n            oldValue: string | number | string[],\n          ) => string | number | string[] | void | undefined),\n    ): this;\n\n    /**\n     * 获取集合中第一个元素的值\n     *\n     * 对于 `<select multiple=\"multiple\">` 元素，将返回一个包含每个选择项的数组\n     * @example\n```js\n$('#input').val()\n```\n     */\n    val(): string | number | string[] | undefined;\n  }\n}\n\neach(['val', 'html', 'text'], (nameIndex, name) => {\n  const props: { [index: number]: string } = {\n    0: 'value',\n    1: 'innerHTML',\n    2: 'textContent',\n  };\n  const propName = props[nameIndex];\n\n  function get($elements: JQ): any {\n    // text() 获取所有元素的文本\n    if (nameIndex === 2) {\n      // @ts-ignore\n      return map($elements, element => toElement(element)[propName]).join('');\n    }\n\n    // 空集合时，val() 和 html() 返回 undefined\n    if (!$elements.length) {\n      return undefined;\n    }\n\n    // val() 和 html() 仅获取第一个元素的内容\n    const firstElement = $elements[0];\n\n    // select multiple 返回数组\n    if (nameIndex === 0 && $(firstElement).is('select[multiple]')) {\n      return map(\n        $(firstElement).find('option:checked'),\n        element => (element as HTMLOptionElement).value,\n      );\n    }\n\n    // @ts-ignore\n    return firstElement[propName];\n  }\n\n  function set(element: HTMLElement, value: any): void {\n    // text() 和 html() 赋值为 undefined，则保持原内容不变\n    // val() 赋值为 undefined 则赋值为空\n    if (isUndefined(value)) {\n      if (nameIndex !== 0) {\n        return;\n      }\n\n      value = '';\n    }\n\n    if (nameIndex === 1 && isElement(value)) {\n      value = value.outerHTML;\n    }\n\n    // @ts-ignore\n    element[propName] = value;\n  }\n\n  $.fn[name] = function(this: JQ, value?: any): any {\n    // 获取值\n    if (!arguments.length) {\n      return get(this);\n    }\n\n    // 设置值\n    return this.each((i, element) => {\n      const computedValue = isFunction(value)\n        ? value.call(element, i, get($(element)))\n        : value;\n\n      // value 是数组，则选中数组中的元素，反选不在数组中的元素\n      if (nameIndex === 0 && Array.isArray(computedValue)) {\n        // select[multiple]\n        if ($(element).is('select[multiple]')) {\n          map(\n            $(element).find('option'),\n            option =>\n              ((option as HTMLOptionElement).selected =\n                computedValue.indexOf((option as HTMLOptionElement).value) >\n                -1),\n          );\n        }\n\n        // 其他 checkbox, radio 等元素\n        else {\n          (element as HTMLInputElement).checked =\n            computedValue.indexOf((element as HTMLInputElement).value) > -1;\n        }\n      } else {\n        set(element, computedValue);\n      }\n    });\n  };\n});\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport { isString } from '../utils';\nimport './children';\nimport './eq';\nimport './get';\nimport './parent';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 如果没有传入参数，则返回当前集合中第一个元素相对于同辈元素的索引值。\n     *\n     * 如果传入一个 CSS 选择器作为参数，则返回当前集合中第一个元素相对于 CSS 选择器匹配元素的索引值。\n     *\n     * 如果传入一个 DOM 元素，则返回该 DOM 元素在当前集合中的索引值。\n     *\n     * 如果传入一个 JQ 对象，则返回 JQ 对象中第一个元素在当前集合中的索引值。\n     * @param selector CSS 选择器、DOM 元素、JQ 对象\n     */\n    index(selector?: Selector | Element | JQ): number;\n  }\n}\n\n$.fn.index = function(this: JQ, selector?: any): number {\n  if (!arguments.length) {\n    return this.eq(0)\n      .parent()\n      .children()\n      .get()\n      .indexOf(this[0]);\n  }\n\n  if (isString(selector)) {\n    return $(selector)\n      .get()\n      .indexOf(this[0]);\n  }\n\n  return this.get().indexOf($(selector)[0]);\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './eq';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回当前集合中最后一个元素的 JQ 对象\n     * @example\n```js\n$('div').last()\n```\n     */\n    last(): this;\n  }\n}\n\n$.fn.last = function(this: JQ): JQ {\n  return this.eq(-1);\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport dir from './utils/dir';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前集合中每个元素的后一个匹配的同辈元素\n     * @param selector CSS 选择器。指定该参数时，将仅返回和该参数匹配的元素的集合\n     * @example\n```js\n// 获取 .box 元素的后一个元素的集合\n$('.box').next()\n```\n     * @example\n```js\n// 获取 .box 元素的后一个 div 元素的集合\n$('.box').next('div')\n```\n     */\n    next(selector?: Selector): this;\n  }\n}\n\neach(['', 'All', 'Until'], (nameIndex, name) => {\n  $.fn[`next${name}`] = function(\n    this: JQ,\n    selector?: any,\n    filter?: Selector,\n  ): JQ {\n    return dir(this, nameIndex, 'nextElementSibling', selector, filter);\n  };\n});\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './filter';\nimport './map';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 从当前集合中筛选出与表达式不匹配的元素\n     * @param selection\n     * 可以是 CSS 选择器、DOM 元素、DOM 元素数组、JQ 对象、或返回 `boolean` 值的回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 回调函数返回 `true` 时，将移除对应元素；返回 `false` 时，将保留对应元素\n     * @example\n```js\n// 筛选出所有不含 .box 类的 div 元素\n$('div').not('.box')\n```\n     * @example\n```js\n// 筛选出所有未选中的元素\n$('#select option').not(function (idx, element) {\n  return element.selected;\n})\n```\n     */\n    not(\n      selection:\n        | Selector\n        | TypeOrArray<Element>\n        | JQ\n        | ((this: T, index: number, element: T) => boolean),\n    ): this;\n  }\n}\n\n$.fn.not = function(this: JQ, selector: any): JQ {\n  const $excludes = this.filter(selector);\n\n  return this.map((_, element) =>\n    $excludes.index(element) > -1 ? undefined : element,\n  );\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './css';\nimport './map';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回最近的用于定位的父元素\n     *\n     * 即父元素中第一个 `position` 为 `relative`, `absolute` 或 `fixed` 的元素\n     * @example\n```js\n$('.box').offsetParent()\n```\n     */\n    offsetParent(): this;\n  }\n}\n\n/**\n * 返回最近的用于定位的父元素\n */\n$.fn.offsetParent = function(this: JQ): JQ {\n  return this.map(function() {\n    let offsetParent = this.offsetParent as HTMLElement;\n\n    while (offsetParent && $(offsetParent).css('position') === 'static') {\n      offsetParent = offsetParent.offsetParent as HTMLElement;\n    }\n\n    return offsetParent || document.documentElement;\n  });\n};\n","import $ from '../$';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport './on';\nimport { EventCallback } from './utils/event';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 通过事件委托同时添加多个事件处理函数，触发一次后自动解绑\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param selector CSS 选择器\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     */\n    one(\n      events: PlainObject<EventCallback | false>,\n      selector: string | null | undefined,\n      data?: any,\n    ): this;\n\n    /**\n     * 同时添加多个事件处理函数，触发一次后自动解绑\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     */\n    one(events: PlainObject<EventCallback | false>, data?: any): this;\n\n    /**\n     * 通过事件委托添加事件处理函数，并传入参数，触发一次后自动解绑\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param selector CSS 选择器\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     * @param callback 事件处理函数\n     */\n    one(\n      eventName: string,\n      selector: string | null | undefined,\n      data: any,\n      callback: EventCallback | false,\n    ): this;\n\n    /**\n     * 通过事件委托添加事件处理函数，触发一次后自动解绑\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param selector CSS 选择器\n     * @param callback 事件处理函数\n     */\n    one(\n      eventName: string,\n      selector: string,\n      callback: EventCallback | false,\n    ): this;\n\n    /**\n     * 添加事件处理函数，并传入参数，触发一次后自动解绑\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param data 事件触发时，传递给事件处理函数的数据\n     * @param callback 事件处理函数\n     */\n    one(eventName: string, data: any, callback: EventCallback | false): this;\n\n    /**\n     * 添加事件处理函数，触发一次后自动解绑\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param callback 事件处理函数\n     */\n    one(eventName: string, callback: EventCallback | false): this;\n  }\n}\n\n$.fn.one = function(\n  this: JQ,\n  types: PlainObject<EventCallback | false> | string,\n  selector?: any,\n  data?: any,\n  callback?: any,\n): JQ {\n  // @ts-ignore\n  return this.on(types, selector, data, callback, true);\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './get';\nimport dir from './utils/dir';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前集合中每个元素的前一个匹配的同辈元素\n     * @param selector CSS 选择器。指定该参数时，将仅返回和该参数匹配的元素的集合\n     * @example\n```js\n// 获取 .box 元素的前一个元素的集合\n$('.box').prev()\n```\n     * @example\n```js\n// 获取 .box 元素的前一个 div 元素的集合\n$('.box').prev('div')\n```\n     */\n    prev(selector?: Selector): this;\n  }\n}\n\neach(['', 'All', 'Until'], (nameIndex, name) => {\n  $.fn[`prev${name}`] = function(\n    this: JQ,\n    selector?: any,\n    filter?: Selector,\n  ): JQ {\n    // prevAll、prevUntil 需要把元素的顺序倒序处理，以便和 jQuery 的结果一致\n    const $nodes = !nameIndex ? this : $(this.get().reverse());\n\n    return dir($nodes, nameIndex, 'previousElementSibling', selector, filter);\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 移除集合中每个元素上的指定属性\n     * @param attributeName 属性名，多个属性名可以用空格分隔\n     * @example\n```js\n// 移除一个属性\n$('div').removeAttr('title')\n```\n     * @example\n```js\n// 移除多个属性\n$('div').removeAttr('title label');\n```\n     */\n    removeAttr(attributeName: string): this;\n  }\n}\n\n$.fn.removeAttr = function(this: JQ, attributeName: string): JQ {\n  const names = attributeName.split(' ').filter(name => name);\n\n  return this.each(function() {\n    each(names, (_, name) => {\n      this.removeAttribute(name);\n    });\n  });\n};\n","import $ from '../$';\nimport removeData from '../functions/removeData';\nimport { JQ } from '../JQ';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 移除元素上存储的数据\n     *\n     * 该方法只会删除通过 `.data()` 方法设置的数据，不会删除 `data-*` 属性上的数据\n     * @param name\n     * 数据键名\n     *\n     * 若未指定键名，则将移除元素上所有数据\n     *\n     * 多个键名可以用空格分隔，或者用数组表示多个键名\n     * @example\n```js\n// 移除指定键名的数据\n$('.box').removeData('key');\n```\n     * @example\n```js\n// 移除键名为 key1 和 key2 的数据\n$('.box').removeData('key1 key2');\n```\n     * @example\n```js\n// 移除键名为 key1 和 key2 的数据\n$('.box').removeData(['key1', 'key2']);\n```\n     * @example\n```js\n// 移除元素上所有数据\n$('.box').removeData();\n```\n     */\n    removeData(name?: TypeOrArray<string>): this;\n  }\n}\n\n$.fn.removeData = function(this: JQ, name?: TypeOrArray<string>): JQ {\n  return this.each(function() {\n    removeData(this, name);\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 删除集合中每个元素上的指定属性\n     * @param name 属性名\n     * @example\n```js\n$('input').removeProp('disabled')\n```\n     */\n    removeProp(name: string): this;\n  }\n}\n\n$.fn.removeProp = function(this: JQ, name: string): JQ {\n  return this.each(function() {\n    try {\n      // @ts-ignore\n      delete this[name];\n    } catch (e) {}\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './before';\nimport './remove';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 用指定元素替换当前集合中的元素\n     * @param newContent\n     * 可以是 HTML 字符串、DOM 元素、DOM 元素数组、JQ 对象、或回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为当前元素 HTML 字符串，`this` 指向当前元素\n     * @returns 被替换调的元素集\n     * @example\n```js\n$('.box').replaceWith('<p>Hello</p>')\n```\n     * @example\n```js\n$('.box').replaceWith(function (index, html) {\n  return html + index;\n})\n```\n     */\n    replaceWith(\n      newContent:\n        | HTMLString\n        | TypeOrArray<Element>\n        | JQ\n        | ((\n            this: T,\n            index: number,\n            oldHtml: string,\n          ) => HTMLString | TypeOrArray<Element> | JQ),\n    ): this;\n  }\n}\n\n$.fn.replaceWith = function(this: JQ, newContent: any): JQ {\n  return this.before(newContent).remove();\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './get';\nimport './map';\nimport './replaceWith';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 用当前集合中的元素替换指定元素\n     * @param target 被替换的元素。可以是 CSS 选择器、DOM 元素、DOM 元素数组、或 JQ 对象\n     * @returns 用于替换的元素的集合\n     * @example\n```js\n// 用 .new 元素替换所有 .box 元素\n$('.new').replaceAll('.box');\n```\n     */\n    replaceAll(target: Selector | TypeOrArray<Element> | JQ): this;\n  }\n}\n\n$.fn.replaceAll = function(this: JQ, target: any): JQ {\n  return $(target).map((_, element) => {\n    $(element).replaceWith(this);\n\n    return this.get();\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './each';\nimport './val';\n\ninterface NameValuePair {\n  name: string;\n  value: any;\n}\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 把表单元素的值组合成由 `name` 和 `value` 的键值对组成的数组\n     *\n     * 该方法可对单独表单元素进行操作，也可以对整个 `<form>` 表单进行操作\n     * @example\n```js\n$('form').serializeArray()\n// [ {\"name\":\"name\",\"value\":\"mdui\"}, {\"name\":\"password\",\"value\":\"123456\"} ]\n```\n     */\n    serializeArray(): NameValuePair[];\n  }\n}\n\n/**\n * 将表单元素的值组合成键值对数组\n * @returns {Array}\n */\n$.fn.serializeArray = function(this: JQ): NameValuePair[] {\n  const result: NameValuePair[] = [];\n\n  this.each((_, element) => {\n    const elements =\n      element instanceof HTMLFormElement ? element.elements : [element];\n\n    $(elements).each((_, element) => {\n      const $element = $(element);\n      const type = (element as HTMLInputElement).type;\n      const nodeName = element.nodeName.toLowerCase();\n\n      if (\n        nodeName !== 'fieldset' &&\n        (element as HTMLInputElement).name &&\n        !(element as HTMLInputElement).disabled &&\n        ['input', 'select', 'textarea', 'keygen'].indexOf(nodeName) > -1 &&\n        ['submit', 'button', 'image', 'reset', 'file'].indexOf(type) === -1 &&\n        (['radio', 'checkbox'].indexOf(type) === -1 ||\n          (element as HTMLInputElement).checked)\n      ) {\n        const value = $element.val();\n        const valueArr = Array.isArray(value) ? value : [value];\n\n        valueArr.forEach(value => {\n          result.push({\n            name: (element as HTMLInputElement).name,\n            value,\n          });\n        });\n      }\n    });\n  });\n\n  return result;\n};\n","import $ from '../$';\nimport param from '../functions/param';\nimport { JQ } from '../JQ';\nimport './serializeArray';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 把表单元素的值编译为字符串\n     * @example\n```js\n$('form').serialize();\n// golang=456&name=mdui&password=\n```\n     */\n    serialize(): string;\n  }\n}\n\n$.fn.serialize = function(this: JQ): string {\n  return param(this.serializeArray());\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport { getStyle } from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 显示集合中的所有元素\n     * @example\n```js\n$('.box').show()\n```\n     */\n    show(): this;\n  }\n}\n\nconst elementDisplay: {\n  [nodeName: string]: string;\n} = {};\n\n/**\n * 获取元素的初始 display 值，用于 .show() 方法\n * @param nodeName\n */\nfunction defaultDisplay(nodeName: string): string {\n  let element: HTMLElement;\n  let display: string;\n\n  if (!elementDisplay[nodeName]) {\n    element = document.createElement(nodeName);\n    document.body.appendChild(element);\n    display = getStyle(element, 'display');\n    element.parentNode!.removeChild(element);\n    if (display === 'none') {\n      display = 'block';\n    }\n\n    elementDisplay[nodeName] = display;\n  }\n\n  return elementDisplay[nodeName];\n}\n\n/**\n * 显示指定元素\n * @returns {JQ}\n */\n$.fn.show = function(this: JQ): JQ {\n  return this.each(function() {\n    if (this.style.display === 'none') {\n      this.style.display = '';\n    }\n\n    if (getStyle(this, 'display') === 'none') {\n      this.style.display = defaultDisplay(this.nodeName);\n    }\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './add';\nimport './nextAll';\nimport './prevAll';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前集合中，每个元素的兄弟元素\n     * @param selector CSS 选择器。若指定了该参数，则只返回和该参数匹配的兄弟元素\n     * @example\n```js\n// 获取 .box 元素的所有兄弟元素\n$('.box').siblings()\n```\n     * @example\n```js\n// 获取 .box 元素的所有兄弟元素中含 .selected 的元素\n$('.box').siblings('.selected')\n```\n     */\n    siblings(selector?: Selector): this;\n  }\n}\n\n/**\n * 取得同辈元素的集合\n * @param selector {String=}\n * @returns {JQ}\n */\n$.fn.siblings = function(this: JQ, selector?: Selector): JQ {\n  return this.prevAll(selector).add(this.nextAll(selector));\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport { getStyle } from '../utils';\nimport './each';\nimport './hide';\nimport './show';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 切换集合中所有元素的显示状态\n     * @example\n```js\n$('.box').toggle()\n```\n     */\n    toggle(): this;\n  }\n}\n\n/**\n * 切换元素的显示状态\n */\n$.fn.toggle = function(this: JQ): JQ {\n  return this.each(function() {\n    getStyle(this, 'display') === 'none' ? $(this).show() : $(this).hide();\n  });\n};\n"],"names":["t","e","bubbles","cancelable","detail","n","document","createEvent","initCustomEvent","finallyConstructor","callback","constructor","this","then","value","resolve","reason","reject","MouseEvent","initMouseEvent","window","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","prototype","Event","CustomEvent","setTimeoutFunc","setTimeout","isArray","x","Boolean","length","noop","Promise","fn","TypeError","_state","_handled","_value","undefined","_deferreds","doResolve","handle","self","deferred","_immediateFn","cb","onFulfilled","onRejected","ret","promise","push","newValue","finale","thisArg","apply","arguments","bind","_unhandledRejectionFn","i","len","Handler","done","ex","prom","promiseFinally","all","arr","args","Array","slice","call","remaining","res","val","race","setImmediate","err","console","warn","globalNS","global","Error","isFunction","target","isString","isNumber","isUndefined","isNull","isWindow","Window","isDocument","Document","isElement","Element","isArrayLike","isObjectLike","toElement","documentElement","toCamelCase","string","replace","_","letter","toUpperCase","toKebabCase","replacer","toLowerCase","getComputedStyleValue","element","name","getComputedStyle","getPropertyValue","isBorderBox","getExtraWidth","direction","extra","const","position","reduce","prev","index","let","prop","parseFloat","getStyle","valueNumber","getBoundingClientRect","getChildNodesArray","parent","tempParent","createElement","innerHTML","childNodes","returnFalse","cssNumber","each","keys","Object","JQ","item","$","selector","test","readyState","body","addEventListener","html","trim","toCreate","li","tr","td","th","tbody","option","childTag","parentTag","indexOf","match","querySelectorAll","getElementById","Node","isNode","contains","container","merge","first","second","get","find","foundElements","handlers","mduiElementId","getElementId","key","parse","type","parts","split","ns","sort","join","matcherFor","RegExp","remove","types","func","removeEvent","handler","handlersInElement","id","removeEventListener","proxy","forEach","event","filter","getHandlers","extend","object1","objectN","unshift","object","param","obj","destructure","keyTmp","v","encodeURIComponent","trigger","extraParameters","eventObject","eventParams","isMouseEvent","_detail","_ns","dispatchEvent","globalOptions","ajaxEvents","ajaxStart","ajaxSuccess","ajaxError","ajaxComplete","isQueryStringData","method","appendQuery","url","query","ajax","options","textStatus","isCanceled","mergedOptions","defaults","data","processData","async","cache","username","password","headers","xhrFields","statusCode","dataType","contentType","timeout","mergeOptions","location","toString","params","result1","result2","ArrayBuffer","Blob","FormData","Date","now","xhrTimeout","xhr","XMLHttpRequest","open","setRequestHeader","$2","host","onload","clearTimeout","responseData","isHttpStatusSuccess","status","JSON","responseText","responseType","response","onerror","statusText","onabort","abort","send","ajaxSetup","dataNS","setObjectToElement","map","elements","concat","removeData","nameItem","unique","result","dir","$elements","nameIndex","node","is","shift","add","className","getAttribute","cls","classList","setAttribute","isMatched","matches","msMatchesSelector","$compareWith","compare","parentNode","removeChild","$element","reverse","newItem","cloneNode","existingItem","nextSibling","insertBefore","isPlainText","off","on","one","_this","origCallback","elementId","useCapture","proxyFn","callFn","elem","preventDefault","stopPropagation","_data","eventName","childLength","child","appendChild","contents","extraChilds","$target","$result","k","removeAttribute","style","set","children","__","childNode","clone","eq","closest","matched","parents","rbrace","dataAttr","nodeType","getData","handleExtraWidth","funcIndex","includeMargin","multiply","getExtraWidthValue","clientProp","scrollProp","offsetProp","innerProp","doc","Math","max","css","floatStyle","getClientRects","top","left","rect","win","ownerDocument","defaultView","pageYOffset","pageXOffset","resultData","attrs","attributes","empty","$selector","has","$targets","hasClass","funcName","margin","isSet","isBoolean","elementIndex","computedValue","dimension","suffix","hide","display","propName","0","1","2","firstElement","selected","checked","outerHTML","last","not","$excludes","offsetParent","currentOffset","parentOffset","offset","$offsetParent","currentTop","currentLeft","currentTopString","currentLeftString","currentPosition","removeAttr","attributeName","names","removeProp","replaceWith","newContent","before","replaceAll","serializeArray","HTMLFormElement","nodeName","disabled","serialize","elementDisplay","show","defaultDisplay","siblings","prevAll","nextAll","toggle"],"mappings":"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"}